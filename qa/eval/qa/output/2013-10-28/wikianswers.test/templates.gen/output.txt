How common is the bipolar disorder?	children	10564.709742493591	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: does affect) => children; when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: can occur in) => children; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: does affect) => children; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: openie4, r0.arg2: children, r0.rel: exists in) => children; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: causes in) => children; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: exist in) => children; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: found in) => children; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: was rare in) => children; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: has been diagnosed in) => children; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: children, r0.rel: does affect) => children
How common is the bipolar disorder?	schizoaffective disorder	10564.69734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: ? Bipolar II disorder, r0.namespace: reverb, r0.arg2: schizoaffective disorder, r0.rel: does) => schizoaffective disorder; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: ? Bipolar II disorder, r0.namespace: reverb, r0.arg2: schizoaffective disorder, r0.rel: does) => schizoaffective disorder; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: ? Bipolar II disorder, r0.namespace: reverb, r0.arg2: schizoaffective disorder, r0.rel: does) => schizoaffective disorder
How common is the bipolar disorder?	twin studies	10564.687706395971	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: twin studies, r0.rel: is often done using) => twin studies; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: twin studies, r0.rel: is often done using) => twin studies; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: twin studies, r0.rel: is often done using) => twin studies
How common is the bipolar disorder?	authority	10564.687706395971	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: authority, r0.rel: do hold positions of) => authority; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: authority, r0.rel: do hold positions of) => authority; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: authority, r0.rel: do hold positions of) => authority
How common is the bipolar disorder?	suicidal ideation	10564.679993761803	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: suicidal ideation, r0.rel: does have a history of) => suicidal ideation; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: suicidal ideation, r0.rel: does have a history of) => suicidal ideation; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: suicidal ideation, r0.rel: does have a history of) => suicidal ideation
How common is the bipolar disorder?	suicide	10564.679993761803	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder &, r0.namespace: reverb, r0.arg2: suicide, r0.rel: did end up committing) => suicide; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder &, r0.namespace: reverb, r0.arg2: suicide, r0.rel: did end up committing) => suicide; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder &, r0.namespace: reverb, r0.arg2: suicide, r0.rel: did end up committing) => suicide
How common is the bipolar disorder?	emperor	10563.926269566808	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the emperor, r0.rel: did) => the emperor; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the emperor, r0.rel: did) => the emperor; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the emperor, r0.rel: did) => the emperor
How common is the bipolar disorder?	display mood swings	10563.926269566808	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: display mood swings, r0.rel: do) => display mood swings; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: display mood swings, r0.rel: do) => display mood swings; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: display mood swings, r0.rel: do) => display mood swings
How common is the bipolar disorder?	bipolar disorder work	10563.926269566808	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: bipolar disorder work, r0.rel: does) => bipolar disorder work; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: bipolar disorder work, r0.rel: does) => bipolar disorder work; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: bipolar disorder work, r0.rel: does) => bipolar disorder work
How common is the bipolar disorder?	?fit	10563.926269566808	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: ?fit, r0.rel: does) => ?fit; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: ?fit, r0.rel: does) => ?fit; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: ?fit, r0.rel: does) => ?fit
How common is the bipolar disorder?	cause problems	10563.926269566808	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: cause problems, r0.rel: does) => cause problems; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: cause problems, r0.rel: does) => cause problems; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: cause problems, r0.rel: does) => cause problems
How common is the bipolar disorder?	normal periods	10563.909742493592	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: normal periods, r0.rel: do have) => normal periods; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: normal periods, r0.rel: do have) => normal periods; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: normal periods, r0.rel: do have) => normal periods
How common is the bipolar disorder?	suicidal	10563.909742493592	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: suicidal, r0.rel: do become) => suicidal; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: suicidal, r0.rel: do become) => suicidal; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: suicidal, r0.rel: do become) => suicidal
How common is the bipolar disorder?	genetic traits	10563.909742493592	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: genetic traits, r0.rel: does have) => genetic traits; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: genetic traits, r0.rel: does have) => genetic traits; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: genetic traits, r0.rel: does have) => genetic traits
How common is the bipolar disorder?	avatar	10563.909742493592	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: BTW BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: Avatar, r0.rel: did) => Avatar; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: BTW BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: Avatar, r0.rel: did) => Avatar; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: BTW BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: Avatar, r0.rel: did) => Avatar
How common is the bipolar disorder?	medical psychiatrist	10563.903131664307	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: the bipolar disorder, r0.namespace: reverb, r0.arg2: a medical psychiatrist, r0.rel: is due to do by) => a medical psychiatrist; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: the bipolar disorder, r0.namespace: reverb, r0.arg2: a medical psychiatrist, r0.rel: is due to do by) => a medical psychiatrist; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: the bipolar disorder, r0.namespace: reverb, r0.arg2: a medical psychiatrist, r0.rel: is due to do by) => a medical psychiatrist
How common is the bipolar disorder?	china	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorders, r0.namespace: reverb, r0.arg2: China, r0.rel: are done in) => China; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorders, r0.namespace: reverb, r0.arg2: China, r0.rel: are done in) => China; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorders, r0.namespace: reverb, r0.arg2: China, r0.rel: are done in) => China
How common is the bipolar disorder?	disorder	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the disorder, r0.rel: actually do have) => the disorder; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the disorder, r0.rel: actually do have) => the disorder; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the disorder, r0.rel: actually do have) => the disorder
How common is the bipolar disorder?	rules directions	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: rules or directions, r0.rel: does n?t follow) => rules or directions; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: rules or directions, r0.rel: does n?t follow) => rules or directions; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: rules or directions, r0.rel: does n?t follow) => rules or directions
How common is the bipolar disorder?	teens children	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur in, $x) => $x: (bipolar disorder, do occur in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: teens and children, r0.rel: do occur in) => teens and children; when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: teens and children, r0.rel: do occur in) => teens and children; when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: teens and children, r0.rel: do occur in) => teens and children; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: teens and children, r0.rel: do occur in) => teens and children; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: teens and children, r0.rel: do occur in) => teens and children
How common is the bipolar disorder?	evidence lead	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder clinical synthesis, r0.namespace: reverb, r0.arg2: the evidence lead, r0.rel: does) => the evidence lead; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder clinical synthesis, r0.namespace: reverb, r0.arg2: the evidence lead, r0.rel: does) => the evidence lead; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder clinical synthesis, r0.namespace: reverb, r0.arg2: the evidence lead, r0.rel: does) => the evidence lead
How common is the bipolar disorder?	fathers	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: fathers, r0.rel: did children of) => fathers; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: fathers, r0.rel: did children of) => fathers; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: fathers, r0.rel: did children of) => fathers
How common is the bipolar disorder?	families	10563.89734718868	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does run in) => families; when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: openie4, r0.arg2: families, r0.rel: does run in) => families; when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does seem to run in) => families; when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does tend to run in) => families; when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: can occur in) => families; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does run in) => families; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: openie4, r0.arg2: families, r0.rel: does run in) => families; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does seem to run in) => families; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does tend to run in) => families; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: openie4, r0.arg2: families, r0.rel: runs in) => families; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: runs in) => families; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does run in) => families; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: openie4, r0.arg2: families, r0.rel: does run in) => families; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does seem to run in) => families; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: families, r0.rel: does tend to run in) => families
How common is the bipolar disorder?	yoga tai chi	10563.887706395972	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: yoga or tai chi, r0.rel: get together to do) => yoga or tai chi; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: yoga or tai chi, r0.rel: get together to do) => yoga or tai chi; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: yoga or tai chi, r0.rel: get together to do) => yoga or tai chi
How common is the bipolar disorder?	depression	10563.887706395972	what be the bipolar disorder ? => $x: ($x, be, the bipolar disorder) => $x: ($x, be, bipolar disorder) => (r0.arg1: depression, r0.namespace: reverb, r0.arg2: bipolar disorder, r0.rel: are) => depression; what be the meaning of the bipolar disorder ? => $x: ($x, be the meaning of, the bipolar disorder) => $x: ($x, be, bipolar disorder) => (r0.arg1: depression, r0.namespace: reverb, r0.arg2: bipolar disorder, r0.rel: are) => depression; what be the meaning of the bipolar disorder ? => $x: ($x, be the meaning of, the bipolar disorder) => $x: ($x, be, bipolar disorder) => (r0.arg1: depression, r0.namespace: reverb, r0.arg2: bipolar disorder, r0.rel: are) => depression; what be wrong with the bipolar disorder ? => $x: ($x, be wrong with, the bipolar disorder) => $x: ($x, be, bipolar disorder) => (r0.arg1: depression, r0.namespace: reverb, r0.arg2: bipolar disorder, r0.rel: are) => depression; when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: depression, r0.rel: do have periods of) => depression; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: depression, r0.rel: do have periods of) => depression; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: depression, r0.rel: do have periods of) => depression
How common is the bipolar disorder?	buspar work	10563.887706395972	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: 16 % BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: BUSPAR work, r0.rel: well does) => BUSPAR work; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: 16 % BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: BUSPAR work, r0.rel: well does) => BUSPAR work; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: 16 % BIPOLAR DISORDER, r0.namespace: reverb, r0.arg2: BUSPAR work, r0.rel: well does) => BUSPAR work
How common is the bipolar disorder?	field	10563.879993761804	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: the field, r0.rel: will do much to move) => the field; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: the field, r0.rel: will do much to move) => the field; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: the field, r0.rel: will do much to move) => the field
How common is the bipolar disorder?	work	10563.87368342476	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: work, r0.rel: had a lot to do with) => work; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: work, r0.rel: had a lot to do with) => work; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: work, r0.rel: had a lot to do with) => work
How common is the bipolar disorder?	debate	10563.868424810553	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the debate, r0.rel: is doing a fine job of keeping) => the debate; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the debate, r0.rel: is doing a fine job of keeping) => the debate; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: the debate, r0.rel: is doing a fine job of keeping) => the debate
How common is the bipolar disorder?	character	10563.856855859303	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: extreme bipolar/split personality disorder, r0.namespace: reverb, r0.arg2: a character, r0.rel: do give) => a character; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: extreme bipolar/split personality disorder, r0.namespace: reverb, r0.arg2: a character, r0.rel: do give) => a character; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: extreme bipolar/split personality disorder, r0.namespace: reverb, r0.arg2: a character, r0.rel: do give) => a character
How common is the bipolar disorder?	care	10562.871106129955	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: openie4, r0.arg2: care, r0.rel: does nt) => care; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: openie4, r0.arg2: care, r0.rel: does nt) => care; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar disorder, r0.namespace: openie4, r0.arg2: care, r0.rel: does nt) => care
How common is the bipolar disorder?	run families	10562.858710825043	when do the bipolar disorder occur ? => $x: (the bipolar disorder, do occur on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: openie4, r0.arg2: run in families, r0.rel: does tend to) => run in families; when do the bipolar disorder happen ? => $x: (the bipolar disorder, do happen on, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: openie4, r0.arg2: run in families, r0.rel: does tend to) => run in families; what do the bipolar disorder stand for ? => $x: (the bipolar disorder, do stand for, $x) => $x: (bipolar disorder, do, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: openie4, r0.arg2: run in families, r0.rel: does tend to) => run in families
How common is the bipolar disorder?	individual	10319.268666998669	when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: bipolar disorders, r0.namespace: reverb, r0.arg2: an individual, r0.rel: occur in) => an individual; when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: Depression and bipolar disorder, r0.namespace: reverb, r0.arg2: an individual, r0.rel: will occur in) => an individual; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorders, r0.namespace: reverb, r0.arg2: an individual, r0.rel: occur in) => an individual
How common is the bipolar disorder?	need	10319.268666998669	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: need, r0.rel: is in) => need
How common is the bipolar disorder?	east asia	10319.268666998669	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: East Asia, r0.rel: confirmed in) => East Asia
How common is the bipolar disorder?	winter	10319.268666998669	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: winter, r0.rel: grows in) => winter
How common is the bipolar disorder?	dogs	10319.268666998669	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: dogs, r0.rel: exists in) => dogs; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: dogs, r0.rel: is likely rarer in) => dogs
How common is the bipolar disorder?	denial	10319.268666998669	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: denial, r0.rel: was in) => denial
How common is the bipolar disorder?	september	10319.268666998669	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: September, r0.rel: ends in) => September
How common is the bipolar disorder?	research	10319.256271693757	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: research, r0.rel: are obvious in) => research
How common is the bipolar disorder?	adults	10319.256271693757	when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: bipolar disorder, r0.namespace: openie4, r0.arg2: adults, r0.rel: only occurred in) => adults; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: adults, r0.rel: was underdiagnosed in) => adults
How common is the bipolar disorder?	hand	10319.256271693757	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: hand, r0.rel: goes hand in) => hand
How common is the bipolar disorder?	dsm-iv	10319.256271693757	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: DSM-IV, r0.rel: are defined in) => DSM-IV
How common is the bipolar disorder?	december	10319.246630901049	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: December, r0.rel: will be released in) => December
How common is the bipolar disorder?	symptoms	10319.246630901049	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: bipolar disorder, r0.namespace: reverb, r0.arg2: symptoms, r0.rel: showed wide variability in) => symptoms
How common is the bipolar disorder?	two official flavors	10318.523757242721	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: two official flavors, r0.rel: comes in) => two official flavors
How common is the bipolar disorder?	different forms	10318.523757242721	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: different forms, r0.rel: comes in) => different forms
How common is the bipolar disorder?	personal experience	10318.485194071885	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from, $x) => $x: (bipolar disorder, come from, $x) => (r0.arg1: bi-polar disorder, r0.namespace: reverb, r0.arg2: personal experience, r0.rel: comes from) => personal experience
How common is the bipolar disorder?	youth	10318.46866699867	where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar disorder, r0.namespace: reverb, r0.arg2: youth, r0.rel: diagnose in) => youth
How common is the bipolar disorder?	children adults	10318.46866699867	when do the bipolar disorder occur ? => $x: (the bipolar disorder, occur in, $x) => $x: (bipolar disorder, occur in, $x) => (r0.arg1: Bipolar spectrum disorders, r0.namespace: reverb, r0.arg2: children or adults, r0.rel: can occur in) => children or adults; where do the bipolar disorder come from ? => $x: (the bipolar disorder, come from in, $x) => $x: (bipolar disorder, in, $x) => (r0.arg1: Bipolar Disorder, r0.namespace: reverb, r0.arg2: children and adults, r0.rel: differ in) => children and adults
What is the worlds oldest drink after water?	tea	7795.439255811328	what be the world first drink after water ? => $x: ($x, be the world first drink after, water) => $x: ($x, be drink after, water) => (r0.arg1: Tea, r0.namespace: openie4, r0.arg2: water, r0.rel: is the most consumed drink after) => Tea
What is a job for a lawyer?	dhl	7788.5936065825235	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: DHL, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => DHL; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: DHL, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => DHL
What is a job for a lawyer?	gpl	7788.5936065825235	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: GPL, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => GPL; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: GPL, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => GPL
What is a job for a lawyer?	lunch	7788.5936065825235	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Lunch, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => Lunch; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Lunch, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => Lunch
What is a job for a lawyer?	judicial review	7788.558899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: judicial review, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: was urged for) => judicial review; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: judicial review, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: was urged for) => judicial review
What is a job for a lawyer?	south australia	7788.53576182627	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: South Australia, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is essential reading for) => South Australia; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: South Australia, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is essential reading for) => South Australia
What is a job for a lawyer?	legal education	7788.53576182627	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: legal education, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is the need for) => legal education; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: legal education, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is the need for) => legal education
What is a job for a lawyer?	event	7788.53576182627	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The event, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is an opportunity for) => The event
What is a job for a lawyer?	information america database service	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the Information America database service, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the Information America database service; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the Information America database service, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the Information America database service
What is a job for a lawyer?	?netpreneurs	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: ?netpreneurs, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => ?netpreneurs; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: ?netpreneurs, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => ?netpreneurs
What is a job for a lawyer?	black	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: black, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => black; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: black, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => black
What is a job for a lawyer?	need ! law	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: NEED ! Law, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => NEED ! Law; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: NEED ! Law, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => NEED ! Law
What is a job for a lawyer?	program	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => program; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => program
What is a job for a lawyer?	second program	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The second program, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The second program; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The second program, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The second program
What is a job for a lawyer?	appointment theme	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Appointment theme, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: is for) => Appointment theme; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Appointment theme, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: is for) => Appointment theme
What is a job for a lawyer?	purpose	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The purpose, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The purpose; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The purpose, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The purpose
What is a job for a lawyer?	federalist society	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the Federalist Society, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the Federalist Society; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the Federalist Society, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the Federalist Society
What is a job for a lawyer?	idea	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The idea, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The idea; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The idea, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The idea
What is a job for a lawyer?	site	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: site, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => site; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: site, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => site
What is a job for a lawyer?	forms	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: such forms, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => such forms; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: such forms, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => such forms
What is a job for a lawyer?	one common misstep	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: One common misstep, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => One common misstep; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: One common misstep, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => One common misstep
What is a job for a lawyer?	professional coaching	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Professional Coaching, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => Professional Coaching; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Professional Coaching, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => Professional Coaching
What is a job for a lawyer?	ties coats	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: ties and coats, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were for) => ties and coats; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: ties and coats, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were for) => ties and coats
What is a job for a lawyer?	important paralegals	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: important paralegals, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => important paralegals; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: important paralegals, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => important paralegals
What is a job for a lawyer?	most stressful frustrating practice	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the most stressful and frustrating practice, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are for) => the most stressful and frustrating practice; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the most stressful and frustrating practice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => the most stressful and frustrating practice; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the most stressful and frustrating practice, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: are for) => the most stressful and frustrating practice; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the most stressful and frustrating practice, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => the most stressful and frustrating practice
What is a job for a lawyer?	challenge	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The challenge, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The challenge; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The challenge, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The challenge
What is a job for a lawyer?	bar admission	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: bar admission, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => bar admission; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: bar admission, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => bar admission
What is a job for a lawyer?	system	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The system, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The system; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The system, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The system
What is a job for a lawyer?	club	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The club; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The club
What is a job for a lawyer?	senior lawyers section	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The Senior Lawyers Section, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The Senior Lawyers Section; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The Senior Lawyers Section, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The Senior Lawyers Section
What is a job for a lawyer?	lawa program	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the LAWA Program, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the LAWA Program; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the LAWA Program, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the LAWA Program
What is a job for a lawyer?	benefits	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the benefits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => the benefits; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the benefits, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => the benefits
What is a job for a lawyer?	legal club	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the Legal Club, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: is for) => the Legal Club; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the Legal Club, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: is for) => the Legal Club
What is a job for a lawyer?	rear	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: rear, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => rear; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: rear, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => rear
What is a job for a lawyer?	rate	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the rate, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the rate; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the rate, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the rate
What is a job for a lawyer?	wlppfp	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: WLPPFP, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => WLPPFP; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: WLPPFP, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => WLPPFP
What is a job for a lawyer?	claims	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Claims, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => Claims; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Claims, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => Claims
What is a job for a lawyer?	job market	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the job market, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is for) => the job market; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the job market, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the job market; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the job market, r0.namespace: openie4, r0.arg2: lawyers, r0.rel: is for) => the job market; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the job market, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => the job market
What is a job for a lawyer?	five percent	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The other five percent, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were for) => The other five percent; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The other five percent, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: were for) => The other five percent
What is a job for a lawyer?	dangerous social media	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: dangerous social media, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => dangerous social media; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: dangerous social media, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => dangerous social media
What is a job for a lawyer?	man.that job	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: man.That job, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => man.That job; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: man.That job, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => man.That job
What is a job for a lawyer?	entries	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the entries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => the entries; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the entries, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are for) => the entries
What is a job for a lawyer?	8:30	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: 8:30, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: am For) => 8:30; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: 8:30, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: am For) => 8:30
What is a job for a lawyer?	legally minded	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Legally Minded, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => Legally Minded; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: Legally Minded, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => Legally Minded
What is a job for a lawyer?	new legal practice pro linkedin group	7787.793606582523	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The new Legal Practice Pro LinkedIn Group, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The new Legal Practice Pro LinkedIn Group; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The new Legal Practice Pro LinkedIn Group, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is for) => The new Legal Practice Pro LinkedIn Group
What is a job for a lawyer?	time money	7787.758899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: time and money, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are required for) => time and money; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: time and money, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are required for) => time and money
What is a job for a lawyer?	most	7787.758899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the most, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is money for) => the most; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the most, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is money for) => the most
What is a job for a lawyer?	job prospects	7787.758899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: job prospects, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are dim for) => job prospects; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: job prospects, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: are dim for) => job prospects
What is a job for a lawyer?	seminar	7787.758899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the seminar, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: was intended for) => the seminar; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: the seminar, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: was intended for) => the seminar
What is a job for a lawyer?	super-deluxe model	7787.758899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The Super-Deluxe Model, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Is Good For) => The Super-Deluxe Model; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: The Super-Deluxe Model, r0.namespace: reverb, r0.arg2: Lawyers, r0.rel: Is Good For) => The Super-Deluxe Model
What is a job for a lawyer?	copy	7787.758899728771	what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: a copy, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is being prepared for) => a copy; what be for a lawyer ? => $x: ($x, be for, a lawyer) => $x: ($x, be for, lawyer) => (r0.arg1: a copy, r0.namespace: reverb, r0.arg2: lawyers, r0.rel: is being prepared for) => a copy
Where can you sell books?	friendship	6302.296594472195	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Friendship, r0.namespace: reverb, r0.arg2: worth one book, r0.rel: is) => Friendship
Where can you sell books?	ebooks	6302.296594472195	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: ebooks, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => ebooks; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: eBooks, r0.namespace: reverb, r0.arg2: a Book Worth, r0.rel: Is) => eBooks
Where can you sell books?	bible	6302.296594472195	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Bible, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => The Bible
Where can you sell books?	?the bible ?	6302.296594472195	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: ?The Bible ?, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => ?The Bible ?
Where can you sell books?	bible ?	6302.296594472195	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Bible ?, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => The Bible ?
Where can you sell books?	mary shelley	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Mary Shelley, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Mary Shelley
Where can you sell books?	daniel boone	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: DANIEL BOONE, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => DANIEL BOONE
Where can you sell books?	fitness	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Fitness, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Fitness
Where can you sell books?	annual	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Annual, r0.namespace: reverb, r0.arg2: a book worth buying, r0.rel: is) => Annual
Where can you sell books?	club dumas	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Club Dumas, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => The Club Dumas
Where can you sell books?	? just minute ?	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: ? Just A Minute ?, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => ? Just A Minute ?
Where can you sell books?	genre fiction	6302.261887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: genre fiction, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: was) => genre fiction
Where can you sell books?	declaration	6302.238749715941	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Declaration, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is definitely) => The Declaration
Where can you sell books?	cases	6301.554439228448	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: cases, r0.namespace: reverb, r0.arg2: BOOKS WORTH, r0.rel: ARE) => cases
Where can you sell books?	ellen hopkins	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Ellen Hopkins, r0.namespace: reverb, r0.arg2: a Book Worth, r0.rel: Is) => Ellen Hopkins
Where can you sell books?	careerists	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Careerists, r0.namespace: reverb, r0.arg2: a Book Worth, r0.rel: Is) => Careerists
Where can you sell books?	status	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Status, r0.namespace: reverb, r0.arg2: that book worth, r0.rel: Is) => Status
Where can you sell books?	book royalties work	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Book Royalties Work, r0.namespace: reverb, r0.arg2: Your Book Worth, r0.rel: Is) => Book Royalties Work
Where can you sell books?	car	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the their car, r0.namespace: reverb, r0.arg2: worth blue book, r0.rel: was) => the their car
Where can you sell books?	columbus	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Columbus, r0.namespace: reverb, r0.arg2: a book worth, r0.rel: is) => Columbus
Where can you sell books?	edwarda comment # 56	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: edwarda Comment # 56, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: Is) => edwarda Comment # 56
Where can you sell books?	special lectures seminars	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: special lectures and seminars, r0.namespace: reverb, r0.arg2: this Book Worth, r0.rel: is) => special lectures and seminars
Where can you sell books?	elizabeth	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Elizabeth, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: was) => Elizabeth
Where can you sell books?	king?s	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: King?s, r0.namespace: reverb, r0.arg2: worth writing books, r0.rel: are) => King?s
Where can you sell books?	13 car	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: 13 car, r0.namespace: reverb, r0.arg2: worth blue book, r0.rel: was) => 13 car
Where can you sell books?	so many issues	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: so many issues, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: is) => so many issues
Where can you sell books?	value	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Value, r0.namespace: reverb, r0.arg2: this book worth, r0.rel: is) => Value
Where can you sell books?	arnold snyder re	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Arnold Snyder Re, r0.namespace: reverb, r0.arg2: this book worth, r0.rel: Is) => Arnold Snyder Re
Where can you sell books?	moreover comment # 57	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: moreover Comment # 57, r0.namespace: reverb, r0.arg2: the book worth, r0.rel: Is) => moreover Comment # 57
Where can you sell books?	any book worth banning	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Any Book Worth Banning, r0.namespace: reverb, r0.arg2: A Book Worth, r0.rel: Is) => Any Book Worth Banning; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Any book worth banning, r0.namespace: openie4, r0.arg2: a book worth reading, r0.rel: is) => Any book worth banning
Where can you sell books?	elusive 2.	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the elusive 2., r0.namespace: reverb, r0.arg2: the book worth, r0.rel: Is) => the elusive 2.
Where can you sell books?	question	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The question, r0.namespace: reverb, r0.arg2: this book worth, r0.rel: is) => The question; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: Is) => the question; what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the question, r0.namespace: reverb, r0.arg2: Old Books Worth, r0.rel: Much are) => the question
Where can you sell books?	minimum	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: minimum, r0.namespace: reverb, r0.arg2: worth book value, r0.rel: be) => minimum
Where can you sell books?	tour	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The tour, r0.namespace: reverb, r0.arg2: worth booking, r0.rel: is definitely) => The tour
Where can you sell books?	one ticket	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: One ticket, r0.namespace: reverb, r0.arg2: worth one book, r0.rel: is) => One ticket
Where can you sell books?	charset=utf-8	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: charset=UTF-8, r0.namespace: reverb, r0.arg2: Adventure Books Worth, r0.rel: Are) => charset=UTF-8
Where can you sell books?	credit	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Each credit, r0.namespace: reverb, r0.arg2: worth one book, r0.rel: is) => Each credit
Where can you sell books?	first trick	6301.496594472194	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the first trick, r0.namespace: reverb, r0.arg2: worth two books, r0.rel: is) => the first trick
Where can you sell books?	chris bowers	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Chris Bowers, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: is) => Chris Bowers
Where can you sell books?	adventure	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Adventure, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Adventure
Where can you sell books?	hugo question	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: the Hugo question, r0.namespace: reverb, r0.arg2: the book worth reading, r0.rel: is) => the Hugo question
Where can you sell books?	$ 64,000 question	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The $ 64,000 question, r0.namespace: reverb, r0.arg2: my book worth, r0.rel: much is) => The $ 64,000 question
Where can you sell books?	?drift ?	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: ?Drift ?, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => ?Drift ?
Where can you sell books?	sellers	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Sellers, r0.namespace: reverb, r0.arg2: my book worth, r0.rel: much is) => Sellers
Where can you sell books?	entire benchmarking efforts	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: entire benchmarking efforts, r0.namespace: reverb, r0.arg2: worth one large book, r0.rel: are) => entire benchmarking efforts
Where can you sell books?	followup question	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: a followup question, r0.namespace: reverb, r0.arg2: that book worth buying, r0.rel: is) => a followup question
Where can you sell books?	charcoal foundry	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: The Charcoal Foundry, r0.namespace: reverb, r0.arg2: a small book worth, r0.rel: is) => The Charcoal Foundry
Where can you sell books?	silicon snake oil	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: Silicon Snake Oil, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => Silicon Snake Oil
Where can you sell books?	person	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: a person, r0.namespace: reverb, r0.arg2: a book worth reading, r0.rel: is) => a person
Where can you sell books?	4/4/2011	6301.461887618442	what be book worth ? => $x: ($x, be, book worth) => $x: ($x, be, book worth) => (r0.arg1: 4/4/2011, r0.namespace: reverb, r0.arg2: my book worth, r0.rel: much is) => 4/4/2011
What is Capitol of lansing?	rental cars	6679.833855645901	what be lanse s capitol city ? => $x: ($x, be, lanse s capitol city) => $x: ($x, be, lanse capitol city) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be lanse s capitol ? => $x: ($x, be, lanse s capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be the capitol lanse ? => $x: ($x, be, the capitol lanse) => $x: ($x, be, capitol lanse) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars; what be lanse capitol ? => $x: ($x, be, lanse capitol) => $x: ($x, be, lanse capitol) => (r0.arg1: Rental cars, r0.namespace: reverb, r0.arg2: the Lansing Capitol City Airport, r0.rel: are available at) => Rental cars
What is Capitol of lansing?	first stop	6228.675493846535	what be the capital lanse ? => $x: ($x, be, the capital lanse) => $x: ($x, be, capital lanse) => (r0.arg1: first stop, r0.namespace: reverb, r0.arg2: the capital , lansing, r0.rel: was) => first stop
What is Capitol of lansing?	ship	6051.282820503276	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the ship, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were) => the ship; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the ship, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were) => the ship
What is Capitol of lansing?	general motors	6051.282820503276	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: General Motors, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => General Motors; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: General Motors, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => General Motors
What is Capitol of lansing?	michigan	6051.282820503276	what be the capitol of lanse ? => $x: (lanse, have capitol of, $x) => $x: (lanse, capitol of, $x) => (r0.arg1: Lansing, r0.namespace: openie4, r0.arg2: Michigan, r0.rel: was the capitol of) => Michigan; what be the capitol of lanse ? => $x: (lanse, have capitol of, $x) => $x: (lanse, capitol of, $x) => (r0.arg1: private Lansing, r0.namespace: reverb, r0.arg2: Michigan, r0.rel: is the state capitol of) => Michigan; what be the captital of lanse ? => $x: ($x, be the captital of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the captital of lanse ? => $x: ($x, be the captital of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the captital of lanse ? => $x: ($x, be the captital of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the captital of lanse ? => $x: ($x, be the captital of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the captital of lanse ? => $x: ($x, be the captital of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the captital of lanse ? => $x: ($x, be the captital of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the captail city of lanse ? => $x: ($x, be the captail city of, lanse) => $x: ($x, be city of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the captail city of lanse ? => $x: ($x, be the captail city of, lanse) => $x: ($x, be city of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capital of lanse ? => $x: ($x, be the capital of, lanse) => $x: ($x, be capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capital of lanse ? => $x: ($x, be the capital of, lanse) => $x: ($x, be capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capital of lanse ? => $x: (lanse, have capital of, $x) => $x: (lanse, capital of, $x) => (r0.arg1: Lansing, r0.namespace: reverb, r0.arg2: Michigan, r0.rel: is the capital of) => Michigan; what be the capital of lanse ? => $x: (lanse, have capital of, $x) => $x: (lanse, capital of, $x) => (r0.arg1: Lansing, r0.namespace: openie4, r0.arg2: Michigan, r0.rel: is the capital of) => Michigan; what be the capital of lanse ? => $x: (lanse, have capital of, $x) => $x: (lanse, capital of, $x) => (r0.arg1: Lansing, r0.namespace: reverb, r0.arg2: Michigan, r0.rel: is the State capital of) => Michigan; what be the capital of lanse ? => $x: (lanse, have capital of, $x) => $x: (lanse, capital of, $x) => (r0.arg1: Lansing, r0.namespace: openie4, r0.arg2: Michigan, r0.rel: is the capital city of) => Michigan; what be the capital of lanse ? => $x: (lanse, have capital of, $x) => $x: (lanse, capital of, $x) => (r0.arg1: Lansing, r0.namespace: reverb, r0.arg2: Michigan, r0.rel: is the capital city of) => Michigan; what be the capital of lanse ? => $x: (lanse, have capital of, $x) => $x: (lanse, capital of, $x) => (r0.arg1: The tri-county Lansing area, r0.namespace: reverb, r0.arg2: Michigan, r0.rel: is also the capital of) => Michigan; what be the state capital of lanse ? => $x: ($x, be the state capital of, lanse) => $x: ($x, be state capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the state capital of lanse ? => $x: ($x, be the state capital of, lanse) => $x: ($x, be state capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the state capital of lanse ? => $x: (lanse, have state capital of, $x) => $x: (lanse, state capital of, $x) => (r0.arg1: Lansing, r0.namespace: reverb, r0.arg2: Michigan, r0.rel: is the State capital of) => Michigan; what be the capatal of lanse ? => $x: ($x, be the capatal of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the capatal of lanse ? => $x: ($x, be the capatal of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capatal of lanse ? => $x: ($x, be the capatal of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the capatal of lanse ? => $x: ($x, be the capatal of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the capatal of lanse ? => $x: ($x, be the capatal of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capatal of lanse ? => $x: ($x, be the capatal of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be capital of lanse ? => $x: ($x, be capital of, lanse) => $x: ($x, be capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be capital of lanse ? => $x: ($x, be capital of, lanse) => $x: ($x, be capital of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitial city of lanse ? => $x: ($x, be the capitial city of, lanse) => $x: ($x, be city of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitial city of lanse ? => $x: ($x, be the capitial city of, lanse) => $x: ($x, be city of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitial of lanse ? => $x: ($x, be the capitial of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the capitial of lanse ? => $x: ($x, be the capitial of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitial of lanse ? => $x: ($x, be the capitial of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the capitial of lanse ? => $x: ($x, be the capitial of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the capitial of lanse ? => $x: ($x, be the capitial of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitial of lanse ? => $x: ($x, be the capitial of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the capitol city of lanse ? => $x: ($x, be the capitol city of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the capitol city of lanse ? => $x: ($x, be the capitol city of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitol city of lanse ? => $x: ($x, be the capitol city of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the capitol city of lanse ? => $x: ($x, be the capitol city of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the capitol city of lanse ? => $x: ($x, be the capitol city of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the capitol city of lanse ? => $x: ($x, be the capitol city of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the captail of lanse ? => $x: ($x, be the captail of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the captail of lanse ? => $x: ($x, be the captail of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the captail of lanse ? => $x: ($x, be the captail of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the captail of lanse ? => $x: ($x, be the captail of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is a historic community south of) => Michigan; what be the captail of lanse ? => $x: ($x, be the captail of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: michigan, r0.namespace: nell, r0.arg2: Lansing, r0.rel: is the capital city of the state or province) => michigan; what be the captail of lanse ? => $x: ($x, be the captail of, lanse) => $x: ($x, be of, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: the greater Lansing area, r0.rel: is part of) => Michigan; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => Michigan; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Michigan; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => Michigan; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Michigan
What is Capitol of lansing?	loft	6051.282820503276	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Loft, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Loft; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Loft, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Loft
What is Capitol of lansing?	citadel	6051.282820503276	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Citadel, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Citadel; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Citadel, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Citadel
What is Capitol of lansing?	mid-michigan	6051.282820503276	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mid-Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mid-Michigan; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mid-Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mid-Michigan
What is Capitol of lansing?	ingham county	6051.282820503276	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ingham County, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Ingham County; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ingham County, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Ingham County
What is Capitol of lansing?	ann arbor	6051.267395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ann Arbor, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: so is) => Ann Arbor; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Ann Arbor, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: so is) => Ann Arbor
What is Capitol of lansing?	2006 noac	6050.633304325851	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: 2006 NOAC, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => 2006 NOAC; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: 2006 NOAC, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => 2006 NOAC
What is Capitol of lansing?	december 2 , 1836	6050.633304325851	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: December 2 , 1836, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is now) => December 2 , 1836; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: December 2 , 1836, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is now) => December 2 , 1836
What is Capitol of lansing?	entertainment district	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: entertainment district, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => entertainment district; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: entertainment district, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => entertainment district
What is Capitol of lansing?	mega mall	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mega Mall, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mega Mall; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Mega Mall, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Mega Mall
What is Capitol of lansing?	capital	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital
What is Capitol of lansing?	potter park zoo	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Potter Park Zoo, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Potter Park Zoo; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Potter Park Zoo, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Potter Park Zoo
What is Capitol of lansing?	michigan?s capital	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan?s capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Michigan?s capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan?s capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Michigan?s capital
What is Capitol of lansing?	line	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: line, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => line; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: line, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => line
What is Capitol of lansing?	state capital	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: State Capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => State Capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The state capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The state capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: State Capital, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => State Capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The state capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The state capital
What is Capitol of lansing?	wettest spot	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The wettest spot, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => The wettest spot; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The wettest spot, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was) => The wettest spot
What is Capitol of lansing?	lothamer	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Lothamer, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Lothamer; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Lothamer, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Lothamer
What is Capitol of lansing?	work	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: work, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => work; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: work, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => work
What is Capitol of lansing?	shuto con	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Shuto Con, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Shuto Con; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Shuto Con, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => Shuto Con
What is Capitol of lansing?	palm	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the palm, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the palm; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the palm, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the palm
What is Capitol of lansing?	wee hours	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the wee hours, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => the wee hours; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the wee hours, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are) => the wee hours
What is Capitol of lansing?	capital city	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital city; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The capital city; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The capital city, r0.namespace: openie4, r0.arg2: Lansing, r0.rel: is) => The capital city
What is Capitol of lansing?	michigan state capital	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Michigan State Capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Michigan State Capital; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The Michigan State Capital, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => The Michigan State Capital
What is Capitol of lansing?	grand cedar rivers	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Grand and Cedar Rivers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the Grand and Cedar Rivers; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Grand and Cedar Rivers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => the Grand and Cedar Rivers
What is Capitol of lansing?	big	6050.482820503275	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: big, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => big; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: big, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is) => big
What is Capitol of lansing?	delphi transfers	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delphi transfers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Delphi transfers; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delphi transfers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Delphi transfers
What is Capitol of lansing?	hearing	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the hearing, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => the hearing; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the hearing, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => the hearing
What is Capitol of lansing?	michigan campaign	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan Campaign, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is petitioning) => Michigan Campaign; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Michigan Campaign, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is petitioning) => Michigan Campaign
What is Capitol of lansing?	club	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The club; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The club, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The club
What is Capitol of lansing?	christopher	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Christopher, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => Christopher; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Christopher, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => Christopher
What is Capitol of lansing?	tigers	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Tigers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Tigers; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Tigers, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: were in) => Tigers
What is Capitol of lansing?	honda	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the honda, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => the honda; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the honda, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => the honda
What is Capitol of lansing?	delegate meetings	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delegate meetings, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are in) => Delegate meetings; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Delegate meetings, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are in) => Delegate meetings
What is Capitol of lansing?	couple	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The couple, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The couple; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The couple, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was in) => The couple
What is Capitol of lansing?	dimondale michigan	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Dimondale Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is near) => Dimondale Michigan; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Dimondale Michigan, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is near) => Dimondale Michigan
What is Capitol of lansing?	artists	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the artists, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are from) => the artists; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the artists, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: are from) => the artists
What is Capitol of lansing?	bianca manago	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Bianca Manago, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Bianca Manago; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Bianca Manago, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Bianca Manago
What is Capitol of lansing?	sarah jo sarah	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Sarah Jo Sarah, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Sarah Jo Sarah; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Sarah Jo Sarah, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Sarah Jo Sarah
What is Capitol of lansing?	class c tournament	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Class C tournament, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is at) => the Class C tournament; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Class C tournament, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is at) => the Class C tournament
What is Capitol of lansing?	gathering	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The gathering, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was at) => The gathering; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The gathering, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was at) => The gathering
What is Capitol of lansing?	budget	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the budget, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: must be) => the budget; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the budget, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: must be) => the budget
What is Capitol of lansing?	neogen?s corporate headquarters	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Neogen?s corporate headquarters, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Neogen?s corporate headquarters; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Neogen?s corporate headquarters, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is in) => Neogen?s corporate headquarters
What is Capitol of lansing?	henton	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Henton, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Henton; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: Henton, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is from) => Henton
What is Capitol of lansing?	boy	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The boy, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was from) => The boy; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: The boy, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was from) => The boy
What is Capitol of lansing?	branch spotlight	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Branch Spotlight, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is on) => the Branch Spotlight; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: the Branch Spotlight, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: is on) => the Branch Spotlight
What is Capitol of lansing?	post office	6050.467395234941	what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: a post office, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was called) => a post office; what be the coordinate for lanse ? => $x: ($x, be the coordinate for, lanse) => $x: ($x, be, lanse) => (r0.arg1: a post office, r0.namespace: reverb, r0.arg2: Lansing, r0.rel: was called) => a post office
What is not required of a thesis?	philosophy	9925.907567277249	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Philosophy, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Philosophy; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Philosophy, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Philosophy
What is not required of a thesis?	science	9925.907567277249	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Science, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Science; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Science, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Science
What is not required of a thesis?	program	9925.907567277249	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may require the preparation of) => program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the submission of) => program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may require the preparation of) => program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: program, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the submission of) => program
What is not required of a thesis?	statistics	9925.885531179629	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a senior thesis, r0.rel: requires the completion of) => statistics; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: statistics, r0.namespace: reverb, r0.arg2: a senior thesis, r0.rel: requires the completion of) => statistics
What is not required of a thesis?	law	9925.885531179629	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Law, r0.namespace: reverb, r0.arg2: a major thesis, r0.rel: requires the completion of) => Law; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Law, r0.namespace: reverb, r0.arg2: a major thesis, r0.rel: requires the completion of) => Law
What is not required of a thesis?	moral realism	9925.869004106413	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: moral realism, r0.namespace: reverb, r0.arg2: a further thesis, r0.rel: has required the denial of) => moral realism; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: moral realism, r0.namespace: reverb, r0.arg2: a further thesis, r0.rel: has required the denial of) => moral realism
What is not required of a thesis?	students	9925.845866203912	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: students, r0.namespace: reverb, r0.arg2: their thesis, r0.rel: are required to provide a bound copy of) => students; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: students, r0.namespace: reverb, r0.arg2: their thesis, r0.rel: are required to provide a bound copy of) => students
What is not required of a thesis?	october 2011	9925.211775294822	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: October 2011, r0.namespace: reverb, r0.arg2: their thesis, r0.rel: will be required to submit a copy of) => October 2011; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: October 2011, r0.namespace: reverb, r0.arg2: their thesis, r0.rel: will be required to submit a copy of) => October 2011
What is not required of a thesis?	academic track	9925.138417813918	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The academic track, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The academic track; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The academic track, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The academic track
What is not required of a thesis?	ms-a option	9925.138417813918	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The MS-A option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The MS-A option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The MS-A option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => The MS-A option
What is not required of a thesis?	degree	9925.138417813918	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => The degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires completion of) => degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => The degree
What is not required of a thesis?	education	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Education, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => Education; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Education, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => Education
What is not required of a thesis?	ms degree	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The MS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The MS degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The MS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The MS degree
What is not required of a thesis?	option	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Option A This, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Option A This; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires a report instead of) => The option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Option A This, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => Option A This; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires a report instead of) => The option
What is not required of a thesis?	master?s degrees	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: A master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the preparation of) => A master?s degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: often require completion of) => Master?s degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: A master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the preparation of) => A master?s degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Master?s degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: often require completion of) => Master?s degrees
What is not required of a thesis?	m.a.	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The M.A., r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => The M.A.; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The M.A., r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => The M.A.
What is not required of a thesis?	science degree	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => science degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => science degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the writing of) => science degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: science degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the preparation of) => science degree
What is not required of a thesis?	elective mms degree	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The elective MMS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the submission of) => The elective MMS degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The elective MMS degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the submission of) => The elective MMS degree
What is not required of a thesis?	thesis option	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The thesis option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The thesis option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The thesis option, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The thesis option
What is not required of a thesis?	illinois graduate students	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Illinois graduate students, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Illinois graduate students; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Illinois graduate students, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => Illinois graduate students
What is not required of a thesis?	honors degree	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The honors degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The honors degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The honors degree, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: requires the completion of) => The honors degree
What is not required of a thesis?	ma programs	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: MA programs, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => MA programs; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: MA programs, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: require the completion of) => MA programs
What is not required of a thesis?	concentration	9925.10756727725	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Each concentration, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: also requires completion of) => Each concentration; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Each concentration, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: also requires completion of) => Each concentration
What is not required of a thesis?	curriculum	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The curriculum, r0.namespace: reverb, r0.arg2: a thesis and completion, r0.rel: requires preparation of) => The curriculum; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The curriculum, r0.namespace: reverb, r0.arg2: a thesis and completion, r0.rel: requires preparation of) => The curriculum
What is not required of a thesis?	msbs	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: the MSBS, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the completion of) => the MSBS; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: the MSBS, r0.namespace: reverb, r0.arg2: a research thesis, r0.rel: requires the completion of) => the MSBS
What is not required of a thesis?	thesis master?s degree	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Thesis master?s degree, r0.namespace: reverb, r0.arg2: 9 thesis credits, r0.rel: requires a minimum of) => Thesis master?s degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Thesis master?s degree, r0.namespace: reverb, r0.arg2: 9 thesis credits, r0.rel: requires a minimum of) => Thesis master?s degree
What is not required of a thesis?	graduate degrees	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Graduate degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually require the completion of) => Graduate degrees; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Graduate degrees, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually require the completion of) => Graduate degrees
What is not required of a thesis?	research paper	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: A research paper, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually requires the development of) => A research paper; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: A research paper, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: usually requires the development of) => A research paper
What is not required of a thesis?	one option	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: One option, r0.namespace: reverb, r0.arg2: a scholarly thesis, r0.rel: requires the writing of) => One option; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: One option, r0.namespace: reverb, r0.arg2: a scholarly thesis, r0.rel: requires the writing of) => One option
What is not required of a thesis?	ma degree	9925.08553117963	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The MA degree, r0.namespace: reverb, r0.arg2: a Master?s thesis, r0.rel: requires the completion of) => The MA degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: The MA degree, r0.namespace: reverb, r0.arg2: a Master?s thesis, r0.rel: requires the completion of) => The MA degree
What is not required of a thesis?	legal briefs	9925.069004106414	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: legal briefs, r0.namespace: reverb, r0.arg2: theses, r0.rel: require different kinds of) => legal briefs; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: legal briefs, r0.namespace: reverb, r0.arg2: theses, r0.rel: require different kinds of) => legal briefs
What is not required of a thesis?	supervisors	9925.069004106414	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Supervisors, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may still require a bound copy of) => Supervisors; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Supervisors, r0.namespace: reverb, r0.arg2: a thesis, r0.rel: may still require a bound copy of) => Supervisors
What is not required of a thesis?	waivers	9925.052477033198	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Waivers, r0.namespace: reverb, r0.arg2: the thesis advisor, r0.rel: require approval of) => Waivers; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Waivers, r0.namespace: reverb, r0.arg2: the thesis advisor, r0.rel: require approval of) => Waivers
What is not required of a thesis?	credit	9925.052477033198	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: credit, r0.namespace: reverb, r0.arg2: the thesis supervisor, r0.rel: requires the approval of) => credit; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: credit, r0.namespace: reverb, r0.arg2: the thesis supervisor, r0.rel: requires the approval of) => credit
What is not required of a thesis?	master?s degree	9925.052477033198	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: a master?s degree, r0.namespace: reverb, r0.arg2: an acceptable thesis, r0.rel: requires completion of) => a master?s degree; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: a master?s degree, r0.namespace: reverb, r0.arg2: an acceptable thesis, r0.rel: requires completion of) => a master?s degree
What is not required of a thesis?	citation	9925.052477033198	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: such a citation, r0.namespace: reverb, r0.arg2: an undergraduate thesis, r0.rel: requires completion of) => such a citation; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: such a citation, r0.namespace: reverb, r0.arg2: an undergraduate thesis, r0.rel: requires completion of) => such a citation
What is not required of a thesis?	unt	9925.040081728286	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: UNT, r0.namespace: reverb, r0.arg2: theses and dissertations, r0.rel: required the submission of) => UNT; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: UNT, r0.namespace: reverb, r0.arg2: theses and dissertations, r0.rel: required the submission of) => UNT
What is not required of a thesis?	theology program	9925.040081728286	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Theology program, r0.namespace: reverb, r0.arg2: an original thesis, r0.rel: requires the submission of) => Theology program; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: Theology program, r0.namespace: reverb, r0.arg2: an original thesis, r0.rel: requires the submission of) => Theology program
What is not required of a thesis?	mea 601 seminar	9925.040081728286	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: MEA 601 Seminar, r0.namespace: reverb, r0.arg2: all thesis M.S. students, r0.rel: is required of) => MEA 601 Seminar; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: MEA 601 Seminar, r0.namespace: reverb, r0.arg2: all thesis M.S. students, r0.rel: is required of) => MEA 601 Seminar
What is not required of a thesis?	turn	9925.040081728286	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: a mini-thesis, r0.rel: will require the completion of) => turn; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: a mini-thesis, r0.rel: will require the completion of) => turn
What is not required of a thesis?	two forms	9925.030440935578	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: two forms, r0.namespace: reverb, r0.arg2: non-thesis students, r0.rel: required of) => two forms; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: two forms, r0.namespace: reverb, r0.arg2: non-thesis students, r0.rel: required of) => two forms
What is not required of a thesis?	project	9925.019422886768	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: A project, r0.namespace: reverb, r0.arg2: non-thesis candidates, r0.rel: is required of) => A project; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: A project, r0.namespace: reverb, r0.arg2: non-thesis candidates, r0.rel: is required of) => A project
What is not required of a thesis?	french 99	9925.004732155021	what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: French 99, r0.namespace: reverb, r0.arg2: all thesis-track honors concentrators, r0.rel: is required of) => French 99; what require of a thesis ? => $x: ($x, require of, a thesis) => $x: ($x, require of, thesis) => (r0.arg1: French 99, r0.namespace: reverb, r0.arg2: all thesis-track honors concentrators, r0.rel: is required of) => French 99
What is something that is white and orange?	texas	6992.397938076217	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Texas, r0.namespace: reverb, r0.arg2: burnt orange and white, r0.rel: are) => Texas
What is something that is white and orange?	saltwater	6992.367087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: saltwater, r0.namespace: reverb, r0.arg2: distinctive orange and white makings, r0.rel: are) => saltwater
What is something that is white and orange?	prince	6992.367087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the prince, r0.namespace: reverb, r0.arg2: orange , white and blue, r0.rel: was) => the prince
What is something that is white and orange?	albert heijn	6992.367087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Albert Heijn, r0.namespace: reverb, r0.arg2: orange , blue and white, r0.rel: were) => Albert Heijn
What is something that is white and orange?	?florida?	6992.345051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: ?Florida?, r0.namespace: reverb, r0.arg2: orange and white lettering, r0.rel: is detailed with) => ?Florida?
What is something that is white and orange?	?florida?	6992.345051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: ?Florida?, r0.namespace: reverb, r0.arg2: orange and white lettering, r0.rel: is detailed with) => ?Florida?
What is something that is white and orange?	new york city	6992.345051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: New York City, r0.namespace: reverb, r0.arg2: orange and white lights, r0.rel: is lit up with) => New York City
What is something that is white and orange?	whigs	6992.345051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The Whigs, r0.namespace: reverb, r0.arg2: white and orange washes, r0.rel: were backlit by) => The Whigs
What is something that is white and orange?	road signs	6992.345051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Road signs, r0.namespace: reverb, r0.arg2: green , white and orange, r0.rel: were painted) => Road signs
What is something that is white and orange?	rock	6992.345051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The rock, r0.namespace: reverb, r0.arg2: white and orange calcite, r0.rel: is composed of) => The rock
What is something that is white and orange?	sandman	6992.328524368712	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Sandman, r0.namespace: reverb, r0.arg2: orange and white patches, r0.rel: is a boy with) => Sandman
What is something that is white and orange?	obo 2006 model year	6991.81012297213	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: OBO 2006 model year, r0.namespace: reverb, r0.arg2: Orange and White, r0.rel: is) => OBO 2006 model year
What is something that is white and orange?	keegan@may 10 2003 , 12:20	6991.732996630458	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: keegan@May 10 2003 , 12:20, r0.namespace: reverb, r0.arg2: the orange and white, r0.rel: AM thought) => keegan@May 10 2003 , 12:20
What is something that is white and orange?	lucky colors	6991.64421388122	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Lucky colors, r0.namespace: reverb, r0.arg2: Orange and White, r0.rel: are) => Lucky colors
What is something that is white and orange?	walter	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Walter, r0.namespace: reverb, r0.arg2: orange tabby and white, r0.rel: is) => Walter
What is something that is white and orange?	ship 's-mast light fixtures	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the ship 's-mast light fixtures, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: are in) => the ship 's-mast light fixtures
What is something that is white and orange?	562	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: 562, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: were for) => 562
What is something that is white and orange?	lettering	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The lettering, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: is in) => The lettering
What is something that is white and orange?	older taxis	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The older taxis, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: are painted) => The older taxis
What is something that is white and orange?	chicago bears jerseys	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Chicago Bears jerseys, r0.namespace: reverb, r0.arg2: blue white and orange, r0.rel: are) => Chicago Bears jerseys
What is something that is white and orange?	victor	6991.597938076216	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Victor, r0.namespace: reverb, r0.arg2: the orange and white, r0.rel: is) => Victor
What is something that is white and orange?	wedding colours	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The wedding colours, r0.namespace: reverb, r0.arg2: White and Orange, r0.rel: will apparently be) => The wedding colours
What is something that is white and orange?	creamy	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Creamy, r0.namespace: reverb, r0.arg2: an orange and white color, r0.rel: was) => Creamy
What is something that is white and orange?	bo	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Bo, r0.namespace: reverb, r0.arg2: an orange and white Corgi, r0.rel: is) => Bo
What is something that is white and orange?	flames	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the flames, r0.namespace: reverb, r0.arg2: Orange , White and Green, r0.rel: were) => the flames
What is something that is white and orange?	dustjacket	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The dustjacket, r0.namespace: reverb, r0.arg2: black , orange and white, r0.rel: was) => The dustjacket
What is something that is white and orange?	high elevations	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: high elevations, r0.namespace: reverb, r0.arg2: orange , red and white, r0.rel: are) => high elevations
What is something that is white and orange?	red	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the red, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is mixed with) => the red
What is something that is white and orange?	tower	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The tower, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is painted in) => The tower
What is something that is white and orange?	originally dutch flag	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: originally the Dutch flag, r0.namespace: reverb, r0.arg2: Orange , white and blue, r0.rel: was) => originally the Dutch flag
What is something that is white and orange?	upright?s blue colors	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: UpRight?s blue colors, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: were changed for) => UpRight?s blue colors
What is something that is white and orange?	team colors	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The team colors, r0.namespace: openie4, r0.arg2: black , orange and white, r0.rel: are) => The team colors; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The team colors, r0.namespace: reverb, r0.arg2: black , orange and white, r0.rel: are) => The team colors
What is something that is white and orange?	dominating colors	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the dominating colors, r0.namespace: reverb, r0.arg2: orange , white and gray, r0.rel: are) => the dominating colors
What is something that is white and orange?	inside	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Inside, r0.namespace: reverb, r0.arg2: an orange and white kitten, r0.rel: was) => Inside
What is something that is white and orange?	markings	6991.567087539548	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the markings, r0.namespace: reverb, r0.arg2: typical white and orange, r0.rel: are in) => the markings
What is something that is white and orange?	philadelphia flyers	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the Philadelphia Flyers, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: are getting back to) => the Philadelphia Flyers
What is something that is white and orange?	62 heads	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The 62 heads, r0.namespace: reverb, r0.arg2: green , white and orange, r0.rel: were dyed) => The 62 heads
What is something that is white and orange?	gazebo	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the gazebo, r0.namespace: reverb, r0.arg2: white and orange roses, r0.rel: was draped in) => the gazebo
What is something that is white and orange?	amazing skirt	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The amazing skirt, r0.namespace: reverb, r0.arg2: white and orange tie, r0.rel: is designed with) => The amazing skirt
What is something that is white and orange?	canvas blue strap	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Canvas blue strap, r0.namespace: reverb, r0.arg2: white and orange accents, r0.rel: is preppy with) => Canvas blue strap
What is something that is white and orange?	wire 1	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Wire 1, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: needs to be matched to) => Wire 1
What is something that is white and orange?	wings	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Wings, r0.namespace: reverb, r0.arg2: white and orange bars, r0.rel: are black with) => Wings
What is something that is white and orange?	ambient lighting	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The ambient lighting, r0.namespace: reverb, r0.arg2: orange and white, r0.rel: can be switched between) => The ambient lighting
What is something that is white and orange?	fake halloween teeth	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The fake Halloween teeth, r0.namespace: reverb, r0.arg2: white , black and orange, r0.rel: are painted) => The fake Halloween teeth
What is something that is white and orange?	chest	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the chest, r0.namespace: reverb, r0.arg2: white and orange, r0.rel: is black outlined by) => the chest
What is something that is white and orange?	thompson-boling arena	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Thompson-Boling Arena, r0.namespace: reverb, r0.arg2: the Orange and White, r0.rel: was ruined by) => Thompson-Boling Arena
What is something that is white and orange?	mesh	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the mesh, r0.namespace: reverb, r0.arg2: brown , white , orange and yellow, r0.rel: are) => the mesh
What is something that is white and orange?	cones	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: cones, r0.namespace: reverb, r0.arg2: fluorescent orange and white, r0.rel: are normally colored) => cones
What is something that is white and orange?	colors	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The colors, r0.namespace: openie4, r0.arg2: blue , white and orange, r0.rel: are) => The colors; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: The colors, r0.namespace: openie4, r0.arg2: Orange and White, r0.rel: are) => The colors; what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: Colors, r0.namespace: reverb, r0.arg2: White , Yellow , Orange and Silver, r0.rel: are) => Colors
What is something that is white and orange?	jewelry kit	6991.545051441927	what be white and orange ? => $x: ($x, be, white and orange) => $x: ($x, be, white and orange) => (r0.arg1: the jewelry kit, r0.namespace: reverb, r0.arg2: pink , blue , orange and white, r0.rel: are) => the jewelry kit
What countries were involved in the Spanish war?	spain	6222.363567404402	which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; which country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "type", country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "type", country) ($x, be invovle in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "type", 2 country) ($x, be in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "is a", 2 country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what 2 country be in the spanish war ? => $x: ($x, "is a", 2 country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what 2 country be in the spanish war ? => $x: ($x, "is an example of", 2 country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what 2 country be in the spanish war ? => $x: ($x, "is an example of", 2 country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: freebase, r1.arg2: the Spanish-American War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "type", country) ($x, be involove in, the spanish war) => $x: ($x, "type", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: freebase, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "is a", country) ($x, be involove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: was defeated in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be involove in the spanish war ? => $x: ($x, "is a", country) ($x, be involove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: SPAIN, r1.rel: is in, r0.namespace: nell, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Spain) => SPAIN; what country be involove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be involove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be involove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be involove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "type", country) ($x, be invole with, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "type", country) ($x, be invole with, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "type", country) ($x, be invole with, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "type", country) ($x, be invole with, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "type", country) ($x, be invole with, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "type", country) ($x, be invole with, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "is a", country) ($x, be invole with, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "type", country) ($x, be apart of, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "is a", country) ($x, be apart of, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Spain, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was defeated in) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Spain, r0.namespace: openie4, r0.arg2: the midst of the brutal Spanish Civil War, r0.rel: is in) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Spain, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was defeated in) => Spain; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Spain, r0.namespace: openie4, r0.arg2: the midst of the brutal Spanish Civil War, r0.rel: is in) => Spain; what country be effect by the spanish war ? => $x: ($x, "type", country) ($x, be effect by, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "type", country) ($x, be effect by, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "type", country) ($x, be effect by, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "type", country) ($x, be effect by, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "type", country) ($x, be effect by, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "type", country) ($x, be effect by, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "is a", country) ($x, be effect by, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Spain, r0.namespace: reverb, r0.arg2: the Spanish American war, r0.rel: was called) => Spain; what country be at the spanish war ? => $x: ($x, "type", country) ($x, be at, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "type", country) ($x, be at, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "type", country) ($x, be at, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "type", country) ($x, be at, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "type", country) ($x, be at, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "type", country) ($x, be at, the spanish war) => $x: ($x, "type", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: freebase, r1.arg2: the Spanish American war, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "is a", country) ($x, be at, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: SPAIN, r1.rel: was called, r0.namespace: nell, r1.arg2: the Spanish American war, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Spain) => SPAIN; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was called, r0.namespace: openie4, r1.arg2: the Spanish American war, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: was defeated in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Spain) => Spain; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Spain, r1.rel: is in, r0.namespace: openie4, r1.arg2: the midst of the brutal Spanish Civil War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: Spain) => Spain
What countries were involved in the Spanish war?	cuba	6218.262467637166	what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: is a remnant of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: were the primary cause of, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: Cuba, r1.rel: was based on, r0.namespace: openie4, r1.arg2: the impending Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Cuba) => Cuba
What countries were involved in the Spanish war?	united states	6218.252085245018	What countries were involved in the Spanish war? => $x: ($x, "is a", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is a", countries) ($x, were involved in, Spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, Spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; What countries were involved in the Spanish war? => $x: ($x, "is an example of", countries) ($x, were involved in, the Spanish war) => $x: ($x, "is an example of", countries) ($x, were involved in, Spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; which country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; which country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be in the spanish war ? => $x: ($x, "is a", country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be in the spanish war ? => $x: ($x, "is an example of", country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be invovle in the spanish war ? => $x: ($x, "is a", country) ($x, be invovle in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be invovle in the spanish war ? => $x: ($x, "is an example of", country) ($x, be invovle in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country involve in the spanish war ? => $x: ($x, "is a", country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country involve in the spanish war ? => $x: ($x, "is an example of", country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what 2 country be in the spanish war ? => $x: ($x, "is a", 2 country) ($x, be in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what 2 country be in the spanish war ? => $x: ($x, "is an example of", 2 country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what 2 country be in the spanish war ? => $x: ($x, "is an example of", 2 country) ($x, be in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be involove in the spanish war ? => $x: ($x, "is a", country) ($x, be involove in, the spanish war) => $x: ($x, "is a", country) ($x, be in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what country be involove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be involove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be involove in the spanish war ? => $x: ($x, "is an example of", country) ($x, be involove in, the spanish war) => $x: ($x, "is an example of", country) ($x, be in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what werethe country involve in the spanish war ? => $x: ($x, "is a", werethe country) ($x, involve in, the spanish war) => $x: ($x, "is a", country) ($x, involve in, spanish war) => (r0.arg1: the united states, r1.rel: was involved in, r0.namespace: nell, r1.arg2: the Spanish-American War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: the United States) => the united states; what werethe country involve in the spanish war ? => $x: ($x, "is an example of", werethe country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what werethe country involve in the spanish war ? => $x: ($x, "is an example of", werethe country) ($x, involve in, the spanish war) => $x: ($x, "is an example of", country) ($x, involve in, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be invole with the spanish war ? => $x: ($x, "is an example of", country) ($x, be invole with, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be apart of the spanish war ? => $x: ($x, "is an example of", country) ($x, be apart of, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was involved in) => the United States; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was involved in) => the United States; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be effect by the spanish war ? => $x: ($x, "is an example of", country) ($x, be effect by, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: the United States, r1.rel: was involved in, r0.namespace: openie4, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => the United States; what country be at the spanish war ? => $x: ($x, "is an example of", country) ($x, be at, the spanish war) => $x: ($x, "is an example of", country) ($x, be, spanish war) => (r0.arg1: The United States, r1.rel: was involved in, r0.namespace: reverb, r1.arg2: the Spanish-American War, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the United States) => The United States
What countries were involved in the Spanish war?	bosnia	6212.008313169299	what country be invole with the spanish war ? => $x: ($x, "is a", country) ($x, be invole with, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be invole with the spanish war ? => $x: ($x, "is a", country) ($x, be invole with, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA; what country be apart of the spanish war ? => $x: ($x, "is a", country) ($x, be apart of, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be apart of the spanish war ? => $x: ($x, "is a", country) ($x, be apart of, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA; what country be effect by the spanish war ? => $x: ($x, "is a", country) ($x, be effect by, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be effect by the spanish war ? => $x: ($x, "is a", country) ($x, be effect by, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Bosnia, r0.namespace: openie4, r0.arg2: my Spanish Civil War, r0.rel: was) => Bosnia; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Bosnia, r0.namespace: reverb, r0.arg2: my Spanish Civil War, r0.rel: was) => Bosnia; what country be at the spanish war ? => $x: ($x, "is a", country) ($x, be at, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: Bosnia) => BOSNIA; what country be at the spanish war ? => $x: ($x, "is a", country) ($x, be at, the spanish war) => $x: ($x, "is a", country) ($x, be, spanish war) => (r0.arg1: BOSNIA, r1.rel: was, r0.namespace: nell, r1.arg2: my Spanish Civil War, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Bosnia) => BOSNIA
What countries were involved in the Spanish war?	times	6163.937196354199	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: The Times, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was covering) => The Times
What countries were involved in the Spanish war?	military	6163.937196354199	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the military, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was during) => the military
What countries were involved in the Spanish war?	orwell	6163.937196354199	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Orwell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was in) => Orwell; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Orwell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was in) => Orwell; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Orwell, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was in) => Orwell
What countries were involved in the Spanish war?	guernica	6163.92434196392	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Guernica, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was destroyed during) => Guernica
What countries were involved in the Spanish war?	communist party	6163.92434196392	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: the Communist party, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => the Communist party; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: the Communist party, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => the Communist party; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the Communist party, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was killed in) => the Communist party
What countries were involved in the Spanish war?	construction	6163.92434196392	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: construction, r0.namespace: openie4, r0.arg2: the Spanish Civil War, r0.rel: was interrupted by) => construction; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Construction, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was interrupted by) => Construction
What countries were involved in the Spanish war?	children	6163.92434196392	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: children, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: were disrupted by) => children
What countries were involved in the Spanish war?	island	6163.92434196392	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: The island, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was abandoned during) => The island
What countries were involved in the Spanish war?	lorca	6163.92434196392	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Lorca, r0.namespace: reverb, r0.arg2: the Spanish Civil war, r0.rel: was murdered as) => Lorca
What countries were involved in the Spanish war?	republic	6163.92434196392	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: The Republic, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was ended by) => The Republic
What countries were involved in the Spanish war?	anarchism	6163.914058451696	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Anarchism, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was very influential in) => Anarchism; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Anarchism, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was very influential in) => Anarchism; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Anarchism, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was very influential in) => Anarchism
What countries were involved in the Spanish war?	july 18 , 1936	6163.332027823234	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: July 18 , 1936, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was the start of) => July 18 , 1936
What countries were involved in the Spanish war?	1937	6163.315959835386	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: 1937, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was a result of) => 1937
What countries were involved in the Spanish war?	2006	6163.3031054451085	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: 2006, r0.namespace: reverb, r0.arg2: The Spanish Civil War, r0.rel: was entitled) => 2006
What countries were involved in the Spanish war?	1898 country	6163.290251054829	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: 1898 our Country, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was embroiled in) => 1898 our Country; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: 1898 our Country, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was embroiled in) => 1898 our Country; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: 1898 our Country, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was embroiled in) => 1898 our Country
What countries were involved in the Spanish war?	1879	6163.290251054829	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: 1879, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was abandoned after) => 1879
What countries were involved in the Spanish war?	fifth regiment	6163.186777573844	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the fifth regiment, r0.namespace: reverb, r0.arg2: the Spanish War, r0.rel: is the song of) => the fifth regiment
What countries were involved in the Spanish war?	parade	6163.166118732325	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the parade, r0.namespace: reverb, r0.arg2: the Spanish -American War, r0.rel: are soldiers of) => the parade
What countries were involved in the Spanish war?	lt . col . andrew d.	6163.153723427414	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Lt . Col . Andrew D., r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: Were in) => Lt . Col . Andrew D.; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Lt . Col . Andrew D., r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: Were in) => Lt . Col . Andrew D.; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Lt . Col . Andrew D., r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: Were in) => Lt . Col . Andrew D.
What countries were involved in the Spanish war?	precedent	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: A precedent, r0.namespace: reverb, r0.arg2: the Spanish civil war, r0.rel: was) => A precedent
What countries were involved in the Spanish war?	col . eddy	6163.153723427414	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Col . Eddy, r0.namespace: reverb, r0.arg2: the Spanish War, r0.rel: was in) => Col . Eddy; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Col . Eddy, r0.namespace: reverb, r0.arg2: the Spanish War, r0.rel: was in) => Col . Eddy; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Col . Eddy, r0.namespace: reverb, r0.arg2: the Spanish War, r0.rel: was in) => Col . Eddy
What countries were involved in the Spanish war?	natural choice	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the natural choice, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => the natural choice
What countries were involved in the Spanish war?	topics	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: topics, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: are) => topics
What countries were involved in the Spanish war?	colonial conflict	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: a colonial conflict, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => a colonial conflict
What countries were involved in the Spanish war?	first signs	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the first signs, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => the first signs
What countries were involved in the Spanish war?	major grower	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: a major grower, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was) => a major grower
What countries were involved in the Spanish war?	one example	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: One example, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is) => One example
What countries were involved in the Spanish war?	best examples	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the best examples, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is) => the best examples
What countries were involved in the Spanish war?	fascism socialism	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: fascism and socialism, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => fascism and socialism
What countries were involved in the Spanish war?	era	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the era, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: were) => the era
What countries were involved in the Spanish war?	most prominent	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the most prominent, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: were) => the most prominent
What countries were involved in the Spanish war?	passing	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: passing, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is) => passing
What countries were involved in the Spanish war?	francoists	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the Francoists, r0.namespace: reverb, r0.arg2: the Spanish war, r0.rel: were winning) => the Francoists
What countries were involved in the Spanish war?	setting	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: The setting, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is) => The setting
What countries were involved in the Spanish war?	issue	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => issue
What countries were involved in the Spanish war?	plane	6163.153723427414	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: plane, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => plane
What countries were involved in the Spanish war?	war	6163.153723427414	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: war, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was in) => war; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: war, r0.namespace: reverb, r0.arg2: the Spanish-American War, r0.rel: was in) => war; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: war, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was) => war; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the war, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was similar to) => the war
What countries were involved in the Spanish war?	protagonist	6163.150050744477	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the protagonist, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is a veteran of) => the protagonist
What countries were involved in the Spanish war?	individual	6163.150050744477	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: an individual, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was a veteran of) => an individual
What countries were involved in the Spanish war?	sling	6163.137196354198	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: a sling, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was during) => a sling
What countries were involved in the Spanish war?	jean	6163.137196354198	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Jean, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => Jean; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Jean, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => Jean; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Jean, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => Jean
What countries were involved in the Spanish war?	different historical metaphor	6163.137196354198	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: A different historical metaphor, r0.namespace: reverb, r0.arg2: the Spanish civil war, r0.rel: might be) => A different historical metaphor
What countries were involved in the Spanish war?	bell tolls	6163.137196354198	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the Bell Tolls, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: is about) => the Bell Tolls
What countries were involved in the Spanish war?	71st	6163.137196354198	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: the 71st, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => the 71st; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: the 71st, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => the 71st; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: the 71st, r0.namespace: reverb, r0.arg2: the Spanish American War, r0.rel: was in) => the 71st
What countries were involved in the Spanish war?	thomas	6163.137196354198	who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Thomas, r0.namespace: reverb, r0.arg2: the Spanish American war, r0.rel: was in) => Thomas; who be in the spanish war ? => $x: ($x, be in, the spanish war) => $x: ($x, be in, spanish war) => (r0.arg1: Thomas, r0.namespace: reverb, r0.arg2: the Spanish American war, r0.rel: was in) => Thomas; country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: Thomas, r0.namespace: reverb, r0.arg2: the Spanish American war, r0.rel: was in) => Thomas
What countries were involved in the Spanish war?	song	6163.137196354198	country of the spanish war ? => $x: ($x, be country of, the spanish war) => $x: ($x, be, spanish war) => (r0.arg1: The song, r0.namespace: reverb, r0.arg2: the Spanish Civil War, r0.rel: was about) => The song
What is another word of sand hills?	town	10878.240154219071	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: town, r0.namespace: reverb, r0.arg2: the Great Sand Hills, r0.rel: are) => town; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: town, r0.namespace: reverb, r0.arg2: the Great Sand Hills, r0.rel: are) => town; what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: sand-hills, r0.rel: is composed of) => The town; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: sand-hills, r0.rel: is composed of) => The town; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: sand-hills, r0.rel: is composed of) => The town; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: sand-hills, r0.rel: is composed of) => The town
What is another word of sand hills?	ghost crab	10877.517280560744	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The ghost crab, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: is king of) => The ghost crab; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The ghost crab, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: is king of) => The ghost crab; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The ghost crab, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: is king of) => The ghost crab; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The ghost crab, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: is king of) => The ghost crab
What is another word of sand hills?	ghrood	10877.517280560744	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood; what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Ghrood, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: are those species of) => Ghrood
What is another word of sand hills?	henry	10877.517280560744	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Henry, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: was the king of) => Henry; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Henry, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: was the king of) => Henry; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Henry, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: was the king of) => Henry; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Henry, r0.namespace: reverb, r0.arg2: the sand hill, r0.rel: was the king of) => Henry
What is another word of sand hills?	southwest	10877.517280560744	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest; what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the southwest, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a line of) => the southwest
What is another word of sand hills?	it?s terrain	10877.517280560744	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: It?s terrain, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is reminiscent of) => It?s terrain; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: It?s terrain, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is reminiscent of) => It?s terrain; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: It?s terrain, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is reminiscent of) => It?s terrain; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: It?s terrain, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is reminiscent of) => It?s terrain
What is another word of sand hills?	hill	10877.517280560744	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the hill, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is the border of) => the hill; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the hill, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is the border of) => the hill; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the hill, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is the border of) => the hill; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the hill, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: is the border of) => the hill
What is another word of sand hills?	?there ?	10877.495244463124	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: ?There ?, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is a corner of) => ?There ?; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: ?There ?, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is a corner of) => ?There ?; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?There ?, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is a corner of) => ?There ?; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?There ?, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is a corner of) => ?There ?
What is another word of sand hills?	anurag	10877.495244463124	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Anurag, r0.namespace: reverb, r0.arg2: Sand Hill Angels, r0.rel: is the President of) => Anurag; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Anurag, r0.namespace: reverb, r0.arg2: Sand Hill Angels, r0.rel: is the President of) => Anurag; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Anurag, r0.namespace: reverb, r0.arg2: Sand Hill Angels, r0.rel: is the President of) => Anurag; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Anurag, r0.namespace: reverb, r0.arg2: Sand Hill Angels, r0.rel: is the President of) => Anurag
What is another word of sand hills?	mike smith	10877.495244463124	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Mike Smith, r0.namespace: reverb, r0.arg2: the Sand Hills Conference, r0.rel: were champions of) => Mike Smith; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Mike Smith, r0.namespace: reverb, r0.arg2: the Sand Hills Conference, r0.rel: were champions of) => Mike Smith; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Mike Smith, r0.namespace: reverb, r0.arg2: the Sand Hills Conference, r0.rel: were champions of) => Mike Smith; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Mike Smith, r0.namespace: reverb, r0.arg2: the Sand Hills Conference, r0.rel: were champions of) => Mike Smith
What is another word of sand hills?	coastal plain	10877.495244463124	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: the Sand Hills region, r0.rel: is) => the coastal plain; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: the Sand Hills region, r0.rel: is) => the coastal plain; what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: the coastal plain, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a thin strip of) => the coastal plain
What is another word of sand hills?	western shore	10877.495244463124	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore; what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The western shore, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is a continued range of) => The western shore
What is another word of sand hills?	last respondent	10877.495244463124	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The last respondent, r0.namespace: reverb, r0.arg2: the Sand Hills Co-op, r0.rel: was the President of) => The last respondent; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The last respondent, r0.namespace: reverb, r0.arg2: the Sand Hills Co-op, r0.rel: was the President of) => The last respondent; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The last respondent, r0.namespace: reverb, r0.arg2: the Sand Hills Co-op, r0.rel: was the President of) => The last respondent; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The last respondent, r0.namespace: reverb, r0.arg2: the Sand Hills Co-op, r0.rel: was the President of) => The last respondent
What is another word of sand hills?	slac	10877.495244463124	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: SLAC, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is located off of) => SLAC; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: SLAC, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is located off of) => SLAC; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: SLAC, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is located off of) => SLAC; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: SLAC, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is located off of) => SLAC
What is another word of sand hills?	life dr. medicine crow	10877.478717389908	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Life Dr. Medicine Crow, r0.namespace: reverb, r0.arg2: the Sand Hill Band, r0.rel: is a Chief of) => Life Dr. Medicine Crow; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Life Dr. Medicine Crow, r0.namespace: reverb, r0.arg2: the Sand Hill Band, r0.rel: is a Chief of) => Life Dr. Medicine Crow; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Life Dr. Medicine Crow, r0.namespace: reverb, r0.arg2: the Sand Hill Band, r0.rel: is a Chief of) => Life Dr. Medicine Crow; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Life Dr. Medicine Crow, r0.namespace: reverb, r0.arg2: the Sand Hill Band, r0.rel: is a Chief of) => Life Dr. Medicine Crow
What is another word of sand hills?	?d rounds	10877.478717389908	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: ?D rounds, r0.namespace: reverb, r0.arg2: Sand Hill road, r0.rel: are virtually non-existent out of) => ?D rounds; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: ?D rounds, r0.namespace: reverb, r0.arg2: Sand Hill road, r0.rel: are virtually non-existent out of) => ?D rounds; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?D rounds, r0.namespace: reverb, r0.arg2: Sand Hill road, r0.rel: are virtually non-existent out of) => ?D rounds; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: ?D rounds, r0.namespace: reverb, r0.arg2: Sand Hill road, r0.rel: are virtually non-existent out of) => ?D rounds
What is another word of sand hills?	deceased	10877.465862999628	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The deceased, r0.namespace: reverb, r0.arg2: the Sand Hill Methodist church, r0.rel: was a member of) => The deceased; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The deceased, r0.namespace: reverb, r0.arg2: the Sand Hill Methodist church, r0.rel: was a member of) => The deceased; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The deceased, r0.namespace: reverb, r0.arg2: the Sand Hill Methodist church, r0.rel: was a member of) => The deceased; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The deceased, r0.namespace: reverb, r0.arg2: the Sand Hill Methodist church, r0.rel: was a member of) => The deceased
What is another word of sand hills?	nina	10877.455579487407	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Nina, r0.namespace: reverb, r0.arg2: the Sand Hill Lutheran Church, r0.rel: was a devoted member of) => Nina; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Nina, r0.namespace: reverb, r0.arg2: the Sand Hill Lutheran Church, r0.rel: was a devoted member of) => Nina; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nina, r0.namespace: reverb, r0.arg2: the Sand Hill Lutheran Church, r0.rel: was a devoted member of) => Nina; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nina, r0.namespace: reverb, r0.arg2: the Sand Hill Lutheran Church, r0.rel: was a devoted member of) => Nina
What is another word of sand hills?	tidwell	10877.455579487407	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Tidwell, r0.namespace: reverb, r0.arg2: the Sand Hill Baptist Church, r0.rel: had been a member of) => Tidwell; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Tidwell, r0.namespace: reverb, r0.arg2: the Sand Hill Baptist Church, r0.rel: had been a member of) => Tidwell; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Tidwell, r0.namespace: reverb, r0.arg2: the Sand Hill Baptist Church, r0.rel: had been a member of) => Tidwell; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Tidwell, r0.namespace: reverb, r0.arg2: the Sand Hill Baptist Church, r0.rel: had been a member of) => Tidwell
What is another word of sand hills?	nolte	10877.455579487407	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Nolte, r0.namespace: reverb, r0.arg2: the Sand Hill United Methodist Church, r0.rel: was a minister of) => Nolte; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Nolte, r0.namespace: reverb, r0.arg2: the Sand Hill United Methodist Church, r0.rel: was a minister of) => Nolte; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nolte, r0.namespace: reverb, r0.arg2: the Sand Hill United Methodist Church, r0.rel: was a minister of) => Nolte; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: Nolte, r0.namespace: reverb, r0.arg2: the Sand Hill United Methodist Church, r0.rel: was a minister of) => Nolte
What is another word of sand hills?	one way	10877.455579487407	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: one way, r0.namespace: reverb, r0.arg2: the ?mini Sand Hill road, r0.rel: is to take advantage of) => one way; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: one way, r0.namespace: reverb, r0.arg2: the ?mini Sand Hill road, r0.rel: is to take advantage of) => one way; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: one way, r0.namespace: reverb, r0.arg2: the ?mini Sand Hill road, r0.rel: is to take advantage of) => one way; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: one way, r0.namespace: reverb, r0.arg2: the ?mini Sand Hill road, r0.rel: is to take advantage of) => one way
What is another word of sand hills?	main land	10877.429136170262	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The main land, r0.namespace: reverb, r0.arg2: white sand-hills, r0.rel: was full of) => The main land; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The main land, r0.namespace: reverb, r0.arg2: white sand-hills, r0.rel: was full of) => The main land; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The main land, r0.namespace: reverb, r0.arg2: white sand-hills, r0.rel: was full of) => The main land; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The main land, r0.namespace: reverb, r0.arg2: white sand-hills, r0.rel: was full of) => The main land
What is another word of sand hills?	firm	10877.420872633653	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: SandHill.com, r0.rel: is also the publisher of) => The firm; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: SandHill.com, r0.rel: is also the publisher of) => The firm; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: SandHill.com, r0.rel: is also the publisher of) => The firm; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: SandHill.com, r0.rel: is also the publisher of) => The firm
What is another word of sand hills?	rock	10877.409303682403	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: a rock, r0.namespace: reverb, r0.arg2: a particular sand-hill, r0.rel: may be the father of) => a rock; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: a rock, r0.namespace: reverb, r0.arg2: a particular sand-hill, r0.rel: may be the father of) => a rock; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: a rock, r0.namespace: reverb, r0.arg2: a particular sand-hill, r0.rel: may be the father of) => a rock; what be of sand hill ? => $x: ($x, be of, sand hill) => $x: ($x, be of, sand hill) => (r0.arg1: a rock, r0.namespace: reverb, r0.arg2: a particular sand-hill, r0.rel: may be the father of) => a rock
What is another word of sand hills?	hill sand	8707.936241374902	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Hill of sand, r0.namespace: freebase, r0.arg2: Hill of sand, r0.rel: Edition Of) => Hill of sand; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Hill of sand, r0.namespace: freebase, r0.arg2: Hill of sand, r0.rel: Edition Of) => Hill of sand
What is another word of sand hills?	moving hills sand	8707.926600582194	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Moving hills of sand, r0.namespace: freebase, r0.arg2: Moving hills of sand, r0.rel: Edition Of) => Moving hills of sand; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Moving hills of sand, r0.namespace: freebase, r0.arg2: Moving hills of sand, r0.rel: Edition Of) => Moving hills of sand
What is another word of sand hills?	great sand hills: prairie oasis	8707.918887948026	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The Great Sand Hills: a prairie oasis, r0.namespace: freebase, r0.arg2: The Great Sand Hills, r0.rel: Edition Of) => The Great Sand Hills: a prairie oasis; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The Great Sand Hills: a prairie oasis, r0.namespace: freebase, r0.arg2: The Great Sand Hills, r0.rel: Edition Of) => The Great Sand Hills: a prairie oasis
What is another word of sand hills?	green hills golden sands	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Green hills and golden sands, r0.namespace: freebase, r0.arg2: Green hills and golden sands, r0.rel: Edition Of) => Green hills and golden sands; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Green hills and golden sands, r0.namespace: freebase, r0.arg2: Green hills and golden sands, r0.rel: Edition Of) => Green hills and golden sands
What is another word of sand hills?	from sand hill pine: tourist from injianny.	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand hill to pine: A tourist from Injianny., r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand hill to pine: A tourist from Injianny.; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand hill to pine: A tourist from Injianny., r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand hill to pine: A tourist from Injianny.
What is another word of sand hills?	from sand hill pine (the works bret harte - volume 11)	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From Sand Hill to Pine (The Works of Bret Harte - Volume 11), r0.namespace: freebase, r0.arg2: From Sand Hill to Pine, r0.rel: Edition Of) => From Sand Hill to Pine (The Works of Bret Harte - Volume 11); what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From Sand Hill to Pine (The Works of Bret Harte - Volume 11), r0.namespace: freebase, r0.arg2: From Sand Hill to Pine, r0.rel: Edition Of) => From Sand Hill to Pine (The Works of Bret Harte - Volume 11)
What is another word of sand hills?	from sand hill pine: [and] tourist from injianny.	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand hill to pine: [and] A tourist from Injianny., r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand hill to pine: [and] A tourist from Injianny.; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand hill to pine: [and] A tourist from Injianny., r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand hill to pine: [and] A tourist from Injianny.
What is another word of sand hills?	from sand hill pine	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand hill to pine, r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand hill to pine; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand hill to pine, r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand hill to pine
What is another word of sand hills?	flora sand hills nebraska	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Flora of the sand hills of Nebraska, r0.namespace: freebase, r0.arg2: Flora of the sand hills of Nebraska, r0.rel: Edition Of) => Flora of the sand hills of Nebraska; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Flora of the sand hills of Nebraska, r0.namespace: freebase, r0.arg2: Flora of the sand hills of Nebraska, r0.rel: Edition Of) => Flora of the sand hills of Nebraska
What is another word of sand hills?	from sand-hill pine	8707.912577610981	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand-hill to pine, r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand-hill to pine; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: From sand-hill to pine, r0.namespace: freebase, r0.arg2: From sand hill to pine, r0.rel: Edition Of) => From sand-hill to pine
What is another word of sand hills?	investigation bench mark elevation changes sand hill area; report project m - no. aba-1, stanford university sub-contract s-128 under a.e.c. contract at(q4-3)363	8707.892857807712	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Investigation of bench mark elevation changes in the Sand Hill area; report to Project M - no. ABA-1, Stanford University sub-contract S-128 under A.E.C. contract AT(Q4-3)363, r0.namespace: freebase, r0.arg2: Investigation of bench mark elevation changes in the Sand Hill area, r0.rel: Edition Of) => Investigation of bench mark elevation changes in the Sand Hill area; report to Project M - no. ABA-1, Stanford University sub-contract S-128 under A.E.C. contract AT(Q4-3)363; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Investigation of bench mark elevation changes in the Sand Hill area; report to Project M - no. ABA-1, Stanford University sub-contract S-128 under A.E.C. contract AT(Q4-3)363, r0.namespace: freebase, r0.arg2: Investigation of bench mark elevation changes in the Sand Hill area, r0.rel: Edition Of) => Investigation of bench mark elevation changes in the Sand Hill area; report to Project M - no. ABA-1, Stanford University sub-contract S-128 under A.E.C. contract AT(Q4-3)363
What is another word of sand hills?	preliminary geological investigation sand hill felt lake linear accelerator sites, stanford university	8707.884181094274	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Preliminary geological investigation of the Sand Hill and Felt Lake linear accelerator sites, Stanford University, r0.namespace: freebase, r0.arg2: Preliminary geological investigation of the Sand Hill and Felt Lake linear accelerator sites, Stanford University, r0.rel: Edition Of) => Preliminary geological investigation of the Sand Hill and Felt Lake linear accelerator sites, Stanford University; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Preliminary geological investigation of the Sand Hill and Felt Lake linear accelerator sites, Stanford University, r0.namespace: freebase, r0.arg2: Preliminary geological investigation of the Sand Hill and Felt Lake linear accelerator sites, Stanford University, r0.rel: Edition Of) => Preliminary geological investigation of the Sand Hill and Felt Lake linear accelerator sites, Stanford University
What is another word of sand hills?	sand-hills jutland	8707.870508697342	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The sand-hills of Jutland, r0.namespace: freebase, r0.arg2: The Sand-Hills of Jutland, r0.rel: Edition Of) => The sand-hills of Jutland; what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The Sand-Hills of Jutland, r0.namespace: freebase, r0.arg2: The Sand-Hills of Jutland, r0.rel: Edition Of) => The Sand-Hills of Jutland; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The sand-hills of Jutland, r0.namespace: freebase, r0.arg2: The Sand-Hills of Jutland, r0.rel: Edition Of) => The sand-hills of Jutland; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: The Sand-Hills of Jutland, r0.namespace: freebase, r0.arg2: The Sand-Hills of Jutland, r0.rel: Edition Of) => The Sand-Hills of Jutland
What is another word of sand hills?	beach	8704.875706129846	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the beach, r0.namespace: reverb, r0.arg2: sand hills and hollows, r0.rel: consisted of) => the beach; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the beach, r0.namespace: reverb, r0.arg2: sand hills and hollows, r0.rel: consisted of) => the beach
What is another word of sand hills?	ashdod	8704.827326879162	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Ashdod, r0.namespace: reverb, r0.arg2: the sand-hills, r0.rel: skirts the edge of) => Ashdod; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Ashdod, r0.namespace: reverb, r0.arg2: the sand-hills, r0.rel: skirts the edge of) => Ashdod
What is another word of sand hills?	surface	8704.09305955672	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the surface, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: consists of) => the surface; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the surface, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: consists of) => the surface
What is another word of sand hills?	eastern nebraska one	8704.075706129845	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: eastern Nebraska one, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: sees glimpses of) => eastern Nebraska one; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: eastern Nebraska one, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: sees glimpses of) => eastern Nebraska one
What is another word of sand hills?	sophia	8704.075706129845	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Sophia, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: took possession of) => Sophia; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Sophia, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: took possession of) => Sophia
What is another word of sand hills?	amazing bird life--we	8704.0693957928	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: amazing bird life--we, r0.namespace: reverb, r0.arg2: sand hill cranes, r0.rel: saw a pair of) => amazing bird life--we; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: amazing bird life--we, r0.namespace: reverb, r0.arg2: sand hill cranes, r0.rel: saw a pair of) => amazing bird life--we
What is another word of sand hills?	27 pelicans	8704.0693957928	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: 27 pelicans, r0.namespace: reverb, r0.arg2: sand hill cranes, r0.rel: saw a pair of) => 27 pelicans; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: 27 pelicans, r0.namespace: reverb, r0.arg2: sand hill cranes, r0.rel: saw a pair of) => 27 pelicans
What is another word of sand hills?	ozzie	8704.0693957928	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Ozzie, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: grew up south of) => Ozzie; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: Ozzie, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: grew up south of) => Ozzie
What is another word of sand hills?	elkhorn river	8704.064137178593	what be a another word for of sand hill ? => $x: ($x, be a another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the Elkhorn River, r0.namespace: reverb, r0.arg2: the Nebraska Sand Hills, r0.rel: drains a portion of) => the Elkhorn River; what be another word for of sand hill ? => $x: ($x, be another word for of, sand hill) => $x: ($x, of, sand hill) => (r0.arg1: the Elkhorn River, r0.namespace: reverb, r0.arg2: the Nebraska Sand Hills, r0.rel: drains a portion of) => the Elkhorn River
What is another word of sand hills?	habitat	5474.211373126524	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Habitat, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is) => Habitat; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Habitat, r0.namespace: reverb, r0.arg2: sand hills, r0.rel: is) => Habitat
What is another word of sand hills?	palo alto	5474.194846053309	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Palo Alto, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is) => Palo Alto; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Palo Alto, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is) => Palo Alto
What is another word of sand hills?	stanford	5474.194846053309	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Stanford, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is) => Stanford; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: Stanford, r0.namespace: reverb, r0.arg2: Sand Hill Road, r0.rel: is) => Stanford
What is another word of sand hills?	rocks	5474.182450748397	what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the Rocks, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: was at) => the Rocks; what be a word of sand hill ? => $x: ($x, be a word of, sand hill) => $x: ($x, be, sand hill) => (r0.arg1: the Rocks, r0.namespace: reverb, r0.arg2: the sand hills, r0.rel: was at) => the Rocks
What is new south wales slogan?	nsw	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: NSW, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => NSW; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: NSW, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => NSW
What is new south wales slogan?	sydney	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney; what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is in) => Sydney; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney, r0.namespace: openie4, r0.arg2: New South Wales, r0.rel: is in) => Sydney
What is new south wales slogan?	gambling	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: gambling, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => gambling; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: gambling, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => gambling
What is new south wales slogan?	australia	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => Australia; what be new south wale know for ? => $x: (new south wale, be know for, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is) => Australia; what be new south wale know for ? => $x: (new south wale, be know for, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales New South Wales, r0.namespace: reverb, r0.arg2: Australia, r0.rel: is arguably) => Australia; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => Australia
What is new south wales slogan?	sydney film festival	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney Film Festival, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney Film Festival; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Sydney Film Festival, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Sydney Film Festival
What is new south wales slogan?	wollongong	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wollongong, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wollongong; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wollongong, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wollongong
What is new south wales slogan?	wagga wagga	7160.159217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wagga Wagga, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wagga Wagga; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wagga Wagga, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wagga Wagga
What is new south wales slogan?	place	7160.1129415969535	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The place, r0.namespace: reverb, r0.arg2: coastal New South Wales, r0.rel: is) => The place; what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => place; what be new south wale know for ? => $x: (new south wale, be know for, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: a place, r0.rel: is) => a place; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The place, r0.namespace: reverb, r0.arg2: coastal New South Wales, r0.rel: is) => The place; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => place
What is new south wales slogan?	home base	7160.1129415969535	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Home base, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is in) => Home base; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Home base, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is in) => Home base
What is new south wales slogan?	legislation	7160.082091060285	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: New South Wales New South Wales, r0.rel: was necessary in) => legislation; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: New South Wales New South Wales, r0.rel: was necessary in) => legislation
What is new south wales slogan?	workshops	7160.082091060285	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Workshops, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are being held across) => Workshops; what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: workshops, r0.namespace: reverb, r0.arg2: rural New South Wales, r0.rel: is being held across) => workshops; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Workshops, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are being held across) => Workshops; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: workshops, r0.namespace: reverb, r0.arg2: rural New South Wales, r0.rel: is being held across) => workshops
What is new south wales slogan?	ointment	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the ointment, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the ointment; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the ointment, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the ointment
What is new south wales slogan?	country	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the country, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the country; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the country, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the country
What is new south wales slogan?	pbcs	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: PBCs, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => PBCs; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: PBCs, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => PBCs
What is new south wales slogan?	australia holiday	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: an Australia holiday, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => an Australia holiday; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: an Australia holiday, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => an Australia holiday
What is new south wales slogan?	?racing	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: ?Racing, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => ?Racing; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: ?Racing, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => ?Racing
What is new south wales slogan?	hotel	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The hotel, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => The hotel; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The hotel, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => The hotel
What is new south wales slogan?	river	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the river, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the river; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the river, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the river
What is new south wales slogan?	states	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The states
What is new south wales slogan?	australia newcastle	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia Newcastle, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Australia Newcastle; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Australia Newcastle, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Australia Newcastle
What is new south wales slogan?	most populous states	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The most populous states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The most populous states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The most populous states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The most populous states
What is new south wales slogan?	zone	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Zone, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Zone; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Zone, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Zone
What is new south wales slogan?	interstate migration	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: interstate migration, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => interstate migration; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: interstate migration, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => interstate migration
What is new south wales slogan?	hunter valley	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The Hunter Valley, r0.namespace: reverb, r0.arg2: new South Wales, r0.rel: is) => The Hunter Valley; what be new south wale know for ? => $x: (new south wale, be know for, $x) => $x: (new south wale, be, $x) => (r0.arg1: New South Wales, r0.namespace: reverb, r0.arg2: the Hunter Valley, r0.rel: is) => the Hunter Valley; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The Hunter Valley, r0.namespace: reverb, r0.arg2: new South Wales, r0.rel: is) => The Hunter Valley
What is new south wales slogan?	wagga wagga wagga wagga	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wagga Wagga Wagga Wagga, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wagga Wagga Wagga Wagga; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wagga Wagga Wagga Wagga, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wagga Wagga Wagga Wagga
What is new south wales slogan?	mystery	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: MYSTERY, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => MYSTERY; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: MYSTERY, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was) => MYSTERY
What is new south wales slogan?	material	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Material, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the Material; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Material, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the Material
What is new south wales slogan?	original states	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The original states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => The original states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The original states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => The original states
What is new south wales slogan?	6 states	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The 6 states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The 6 states; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The 6 states, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The 6 states
What is new south wales slogan?	five mainland states	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The five mainland States, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The five mainland States; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The five mainland States, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The five mainland States
What is new south wales slogan?	wollemi	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wollemi, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wollemi; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Wollemi, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Wollemi
What is new south wales slogan?	largest total aboriginal population	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the largest total Aboriginal population, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the largest total Aboriginal population; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the largest total Aboriginal population, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the largest total Aboriginal population
What is new south wales slogan?	$ 1 million mark	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the $ 1 million mark, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => the $ 1 million mark; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the $ 1 million mark, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were) => the $ 1 million mark
What is new south wales slogan?	largest indian-born residents	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the largest Indian-born residents, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the largest Indian-born residents; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the largest Indian-born residents, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the largest Indian-born residents
What is new south wales slogan?	largest membership	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the largest membership, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the largest membership; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the largest membership, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the largest membership
What is new south wales slogan?	four australian states territories	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: four Australian states and territories, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => four Australian states and territories; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: four Australian states and territories, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => four Australian states and territories
What is new south wales slogan?	moment	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the moment, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the moment; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the moment, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the moment
What is new south wales slogan?	australian provinces	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The Australian provinces, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The Australian provinces; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The Australian provinces, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => The Australian provinces
What is new south wales slogan?	list	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the list, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the list; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the list, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are) => the list
What is new south wales slogan?	property players	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: property players, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => property players; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: property players, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => property players
What is new south wales slogan?	aussie pet holidays	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Aussie Pet Holidays, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Aussie Pet Holidays; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Aussie Pet Holidays, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => Aussie Pet Holidays
What is new south wales slogan?	destination port	7159.359217401957	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the destination port, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the destination port; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the destination port, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is) => the destination port
What is new south wales slogan?	hmong	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Hmong, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is in) => the Hmong; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the Hmong, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: is in) => the Hmong
What is new south wales slogan?	registrations	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: registrations, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are from) => registrations; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: registrations, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: are from) => registrations
What is new south wales slogan?	northernmost part	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the northernmost part, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was then) => the northernmost part; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the northernmost part, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was then) => the northernmost part
What is new south wales slogan?	nearest town	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Nearest town, r0.namespace: reverb, r0.arg2: Waterfall New South Wales, r0.rel: was) => Nearest town; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: Nearest town, r0.namespace: reverb, r0.arg2: Waterfall New South Wales, r0.rel: was) => Nearest town
What is new south wales slogan?	class 457 visa applicants	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: class 457 visa applicants, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => class 457 visa applicants; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: class 457 visa applicants, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => class 457 visa applicants
What is new south wales slogan?	biggest shortages	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the biggest shortages, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were in) => the biggest shortages; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the biggest shortages, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: were in) => the biggest shortages
What is new south wales slogan?	jurisdiction	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The jurisdiction, r0.namespace: reverb, r0.arg2: either New South Wales, r0.rel: is) => The jurisdiction; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: The jurisdiction, r0.namespace: reverb, r0.arg2: either New South Wales, r0.rel: is) => The jurisdiction
What is new south wales slogan?	occupational health safety laws	7159.312941596953	what be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the occupational health and safety laws, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => the occupational health and safety laws; who be new south wale ? => $x: ($x, be, new south wale) => $x: ($x, be, new south wale) => (r0.arg1: the occupational health and safety laws, r0.namespace: reverb, r0.arg2: New South Wales, r0.rel: was in) => the occupational health and safety laws
What occurs in prokaryotic cells?	ribosomes	7748.095220605525	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Ribosomes, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => Ribosomes
What occurs in prokaryotic cells?	rna	7748.095220605525	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: RNA, r0.namespace: reverb, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: are found in) => RNA
What occurs in prokaryotic cells?	labor	7747.348107239814	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: labor, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is possible in) => labor
What occurs in prokaryotic cells?	precrp	7747.348107239814	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: preCRP, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: is expressed in) => preCRP
What occurs in prokaryotic cells?	eukaryotic dna	7747.317256703146	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: eukaryotic DNA, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: could be propagated in) => eukaryotic DNA
What occurs in prokaryotic cells?	polyribosomes	7746.240057168674	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes; what be in prokaryotic cell ? => $x: ($x, be in, prokaryotic cell) => $x: ($x, be in, prokaryotic cell) => (r0.arg1: Polyribosomes, r0.namespace: openie4, r0.arg2: prokaryotic and eukaryotic cells, r0.rel: can be found in) => Polyribosomes
What occurs in prokaryotic cells?	cytoplasm	7472.831221070405	when do prokaryotic cell occur ? => $x: (prokaryotic cell, occur in, $x) => $x: (prokaryotic cell, occur in, $x) => (r0.arg1: the prokaryotic cells DNA, r0.namespace: reverb, r0.arg2: the cytoplasm, r0.rel: occurs in) => the cytoplasm; where do prokaryotic cell occur ? => $x: (prokaryotic cell, occur in, $x) => $x: (prokaryotic cell, occur in, $x) => (r0.arg1: the prokaryotic cells DNA, r0.namespace: reverb, r0.arg2: the cytoplasm, r0.rel: occurs in) => the cytoplasm
What occurs in prokaryotic cells?	microbiology	6537.986991343785	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Microbiology, r0.namespace: reverb, r0.arg2: prokaryotic cells and organisms, r0.rel: is the study of) => Microbiology; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Microbiology, r0.namespace: reverb, r0.arg2: prokaryotic cells and organisms, r0.rel: is the study of) => Microbiology; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: Microbiology, r0.namespace: reverb, r0.arg2: prokaryotic cells and organisms, r0.rel: is the study of) => Microbiology; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: Microbiology, r0.namespace: reverb, r0.arg2: prokaryotic cells and organisms, r0.rel: is the study of) => Microbiology
What occurs in prokaryotic cells?	students	6537.986991343785	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: will be studying the structures of) => Students; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: will be studying the structures of) => Students; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: will be studying the structures of) => Students; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: will be studying the structures of) => Students
What occurs in prokaryotic cells?	bacteria	6537.961282563228	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: openie4, r0.arg2: prokaryotic cells, r0.rel: are) => bacteria; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The Bacteria, r0.namespace: openie4, r0.arg2: prokaryotic cells, r0.rel: are) => The Bacteria; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Bacteria; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => bacteria; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are still) => Bacteria; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are the common name for) => Bacteria; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is very simple--that of) => bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: openie4, r0.arg2: prokaryotic cells, r0.rel: are) => bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The Bacteria, r0.namespace: openie4, r0.arg2: prokaryotic cells, r0.rel: are) => The Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are still) => Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Bacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are the common name for) => Bacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is very simple--that of) => bacteria; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is very simple--that of) => bacteria; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: bacteria, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is very simple--that of) => bacteria
What occurs in prokaryotic cells?	left	6537.174136953507	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be example of prokaryotic cell ? => $x: ($x, be example of, prokaryotic cell) => $x: ($x, be example of, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be example of prokaryotic cell ? => $x: ($x, be example of, prokaryotic cell) => $x: ($x, be example of, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left; what be the functio of prokaryotic cell ? => $x: ($x, be the functio of, prokaryotic cell) => $x: ($x, be of, prokaryotic cell) => (r0.arg1: the left, r0.namespace: reverb, r0.arg2: prokaryotic cell, r0.rel: are an example of) => the left
What occurs in prokaryotic cells?	cells	6530.58649856971	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: were) => cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: were) => cells
What occurs in prokaryotic cells?	cyanobacteria	6530.58649856971	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Cyanobacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Cyanobacteria; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Cyanobacteria, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Cyanobacteria
What occurs in prokaryotic cells?	lysosome	6530.528653813456	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Lysosome, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is) => Lysosome; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Lysosome, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is) => Lysosome
What occurs in prokaryotic cells?	introns	6530.493946959704	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Introns, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are rare within) => Introns; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Introns, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are rare within) => Introns
What occurs in prokaryotic cells?	aerobic respiration	6530.470809057202	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: aerobic respiration, r0.namespace: reverb, r0.arg2: other prokaryotic cells, r0.rel: were engulfed by) => aerobic respiration; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: aerobic respiration, r0.namespace: reverb, r0.arg2: other prokaryotic cells, r0.rel: were engulfed by) => aerobic respiration
What occurs in prokaryotic cells?	silver	6530.441886679075	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: prokaryotic cells and viruses, r0.rel: is toxic only to) => silver; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: prokaryotic cells and viruses, r0.rel: is toxic only to) => silver
What occurs in prokaryotic cells?	biology	6530.441886679075	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: biology, r0.namespace: reverb, r0.arg2: eukaryotic and prokaryotic cells, r0.rel: is the one between) => biology; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: biology, r0.namespace: reverb, r0.arg2: eukaryotic and prokaryotic cells, r0.rel: is the one between) => biology
What occurs in prokaryotic cells?	eukaryotic cells	6529.78649856971	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are larger than) => Eukaryotic cells; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are more complex than) => Eukaryotic cells; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are generally larger than) => Eukaryotic cells; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: openie4, r0.arg2: more complex than prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: openie4, r0.arg2: generally larger than prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are larger than) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are more complex than) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are generally larger than) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: openie4, r0.arg2: more complex than prokaryotic cells, r0.rel: are) => Eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Eukaryotic cells, r0.namespace: openie4, r0.arg2: generally larger than prokaryotic cells, r0.rel: are) => Eukaryotic cells
What occurs in prokaryotic cells?	most complex being	6529.728653813456	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the most complex being, r0.namespace: reverb, r0.arg2: the prokaryotic cell, r0.rel: was) => the most complex being; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the most complex being, r0.namespace: reverb, r0.arg2: the prokaryotic cell, r0.rel: was) => the most complex being
What occurs in prokaryotic cells?	host cell	6529.728653813456	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the host cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: can be) => the host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: a host cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: is) => a host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: a host cell, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is) => a host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the host cell, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: can be) => the host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: openie4, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: may be) => A host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: openie4, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: can be) => A host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The host cell, r0.namespace: reverb, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: can be) => The host cell; what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: reverb, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: may be) => A host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the host cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: can be) => the host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: a host cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: is) => a host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: a host cell, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is) => a host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the host cell, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: can be) => the host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: openie4, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: may be) => A host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: openie4, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: can be) => A host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The host cell, r0.namespace: reverb, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: can be) => The host cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: A host cell, r0.namespace: reverb, r0.arg2: any prokaryotic or eukaryotic cell, r0.rel: may be) => A host cell
What occurs in prokaryotic cells?	life	6529.728653813456	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: life, r0.namespace: reverb, r0.arg2: simple prokaryotic cells, r0.rel: were) => life; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: life, r0.namespace: reverb, r0.arg2: simple prokaryotic cells, r0.rel: were) => life
What occurs in prokaryotic cells?	pl	6529.693946959704	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: pl, r0.namespace: reverb, r0.arg2: a single prokaryotic cell, r0.rel: is) => pl; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: pl, r0.namespace: reverb, r0.arg2: a single prokaryotic cell, r0.rel: is) => pl
What occurs in prokaryotic cells?	vivo	6529.693946959704	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: vivo and, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: may be) => vivo and; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: vivo and, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: may be) => vivo and
What occurs in prokaryotic cells?	general , eukaryotic cells	6529.693946959704	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: general , eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are larger than) => general , eukaryotic cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: general , eukaryotic cells, r0.namespace: reverb, r0.arg2: prokaryotic cells, r0.rel: are larger than) => general , eukaryotic cells
What occurs in prokaryotic cells?	mammalian cells	6529.670809057202	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: mammalian cells, r0.namespace: reverb, r0.arg2: most prokaryotic cells, r0.rel: is absent from) => mammalian cells; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: mammalian cells, r0.namespace: reverb, r0.arg2: most prokaryotic cells, r0.rel: is absent from) => mammalian cells
What occurs in prokaryotic cells?	23 chromosomes	6529.641886679075	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: 23 chromosomes, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is probably more ours than) => 23 chromosomes; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: 23 chromosomes, r0.namespace: reverb, r0.arg2: a prokaryotic cell, r0.rel: is probably more ours than) => 23 chromosomes
What occurs in prokaryotic cells?	cholesterol	6529.432172693566	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Cholesterol, r0.namespace: openie4, r0.arg2: absent from most prokaryotic cells, r0.rel: is) => Cholesterol; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: Cholesterol, r0.namespace: openie4, r0.arg2: absent from most prokaryotic cells, r0.rel: is) => Cholesterol
What occurs in prokaryotic cells?	cell	6528.69001744982	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: is) => the cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: the cell, r0.namespace: openie4, r0.arg2: a prokaryotic cell, r0.rel: is) => the cell
What occurs in prokaryotic cells?	eukaryotic cell	6528.615645620351	what be true of prokaryotic cell ? => $x: ($x, be true of, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The eukaryotic cell, r0.namespace: openie4, r0.arg2: much larger than the prokaryotic cell, r0.rel: is) => The eukaryotic cell; what be prokaryotic cell ? => $x: ($x, be, prokaryotic cell) => $x: ($x, be, prokaryotic cell) => (r0.arg1: The eukaryotic cell, r0.namespace: openie4, r0.arg2: much larger than the prokaryotic cell, r0.rel: is) => The eukaryotic cell
What celebrities have naked pictures?	television	10587.774789282003	what celebrity have naked picture be on ? => $x: ($x, "type", celebrity) (naked picture, be on, $x) => $x: ($x, "type", celebrity) (naked picture, be on, $x) => (r0.arg1: Television, r1.rel: would be broadcast on, r0.namespace: freebase, r1.arg2: television, r0.arg2: Celebrity Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: their semi-naked pictures) => Television
What celebrities have naked pictures?	metrolink	8005.068004634546	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Metrolink, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: is almost as bad as) => Metrolink
What celebrities have naked pictures?	ch-ai	8005.055609329634	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Ch-Ai, r0.namespace: reverb, r0.arg2: drunk naked pictures, r0.rel: is a far cry from) => Ch-Ai
What celebrities have naked pictures?	tweety	8005.045968536925	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Tweety, r0.namespace: openie4, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Tweety, r0.namespace: reverb, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Tweety, r0.namespace: openie4, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Tweety, r0.namespace: reverb, r0.arg2: my own naked baby picture, r0.rel: had been based "on) => Tweety
What celebrities have naked pictures?	2009	8004.433913725456	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: 2009, r0.namespace: reverb, r0.arg2: my naked picture scandal, r0.rel: was successful with) => 2009
What celebrities have naked pictures?	naked couple	8004.342376464015	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: naked couple, r0.namespace: reverb, r0.arg2: naked picture galleries, r0.rel: be) => naked couple
What celebrities have naked pictures?	14-year old boy	8004.307669610263	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: a 14-year old boy, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was showing off) => a 14-year old boy
What celebrities have naked pictures?	drake	8004.307669610263	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: Naked Pictures, r0.rel: Is Addicted To) => Drake
What celebrities have naked pictures?	heck	8004.307669610263	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: the heck, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: is looking for) => the heck
What celebrities have naked pictures?	strange phone call	8004.307669610263	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: a strange phone call, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was asked for) => a strange phone call
What celebrities have naked pictures?	king	8004.284531707761	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: The king, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was n?t talking about) => The king
What celebrities have naked pictures?	up	8004.284531707761	what person have naked picture ? => $x: ($x, "type", person) ($x, have, naked picture) => $x: ($x, "type", person) ($x, have, naked picture) => (r0.arg1: The Up, r1.rel: is essentially like having, r0.namespace: freebase, r1.arg2: naked pictures, r0.arg2: Person, r0.rel: Type, r1.namespace: reverb, r1.arg1: up) => The Up; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: up, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: is essentially like having) => up; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: up, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: is essentially like having) => up
What celebrities have naked pictures?	investigators	8004.284531707761	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: investigators, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was found to have) => investigators; what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: investigators, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: was found to have) => investigators
What celebrities have naked pictures?	cache	8004.268004634546	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: the cache, r0.namespace: reverb, r0.arg2: that naked kegstand picture, r0.rel: was scrubbed on) => the cache
What celebrities have naked pictures?	hearing	8004.268004634546	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: The hearing, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: was also told about) => The hearing
What celebrities have naked pictures?	teenage boy	8004.255609329633	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: a teenage boy, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: be ridiculed as much for) => a teenage boy
What celebrities have naked pictures?	tsa	8004.245968536925	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: The TSA, r0.namespace: reverb, r0.arg2: naked-equivalent pictures, r0.rel: is looking at) => The TSA
What celebrities have naked pictures?	facebook	8004.016972965997	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: Facebook, r0.namespace: openie4, r0.arg2: a naked picture of my back, r0.rel: is showing) => Facebook
What celebrities have naked pictures?	young men	8003.3037401003785	what be naked picture ? => $x: ($x, be, naked picture) => $x: ($x, be, naked picture) => (r0.arg1: young men, r0.namespace: openie4, r0.arg2: naked pictures, r0.rel: are getting) => young men
What celebrities have naked pictures?	teenagers	6798.773818354619	what person have naked picture ? => $x: ($x, "type", person) ($x, have, naked picture) => $x: ($x, "type", person) ($x, have, naked picture) => (r0.arg1: Teenagers, r1.rel: have texted, r0.namespace: freebase, r1.arg2: naked pictures, r0.arg2: Person, r0.rel: Type, r1.namespace: reverb, r1.arg1: teenagers) => Teenagers; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: teenagers, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: have texted) => teenagers
What celebrities have naked pictures?	woman	6798.715973598365	what person have naked picture ? => $x: ($x, "is a kind of", person) ($x, have, naked picture) => $x: ($x, "is a kind of", person) ($x, have, naked picture) => (r0.arg1: a woman, r1.rel: has over, r0.namespace: reverb, r1.arg2: 20 half naked pictures, r0.arg2: person, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: A woman) => a woman; who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: A woman, r0.namespace: reverb, r0.arg2: 20 half naked pictures, r0.rel: has over) => A woman
What celebrities have naked pictures?	ebay	6798.69944652515	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Ebay, r0.namespace: reverb, r0.arg2: 125 naked ex-girlfriend pictures, r0.rel: has things like) => Ebay
What celebrities have naked pictures?	boy	6797.973818354619	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: The boy, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: had texted) => The boy
What celebrities have naked pictures?	20 %	6797.973818354619	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: 20 %, r0.namespace: reverb, r0.arg2: naked pictures, r0.rel: have sent) => 20 %
What celebrities have naked pictures?	21 percent	6797.915973598365	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: 21 percent, r0.namespace: reverb, r0.arg2: naked pictures or videos, r0.rel: have received) => 21 percent
What celebrities have naked pictures?	trace	6797.89944652515	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: Trace, r0.namespace: reverb, r0.arg2: a little naked bootie picture, r0.rel: has thrown) => Trace
What celebrities have naked pictures?	endorsement	6797.89944652515	who have naked picture ? => $x: ($x, have, naked picture) => $x: ($x, have, naked picture) => (r0.arg1: an endorsement, r0.namespace: reverb, r0.arg2: a naked picture, r0.rel: has more impact than) => an endorsement
Why was the patriot act created?	patriotic	7198.357160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic; what be the patriot act create for ? => $x: (the patriot act, be create for, $x) => $x: (patriot act, be, $x) => (r0.arg1: the Patriot Act, r0.namespace: openie4, r0.arg2: patriotic, r0.rel: is) => patriotic; when be the patriot act create ? => $x: (the patriot act, be create in, $x) => $x: (patriot act, be, $x) => (r0.arg1: the Patriot Act, r0.namespace: openie4, r0.arg2: patriotic, r0.rel: is) => patriotic; when be the patriot act create ? => $x: (the patriot act, be create on, $x) => $x: (patriot act, be, $x) => (r0.arg1: the Patriot Act, r0.namespace: openie4, r0.arg2: patriotic, r0.rel: is) => patriotic; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic; when be the patriot act found ? => $x: (the patriot act, be found on, $x) => $x: (patriot act, be, $x) => (r0.arg1: the Patriot Act, r0.namespace: openie4, r0.arg2: patriotic, r0.rel: is) => patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Rosenblum, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: openie4, r0.arg2: the Patriot Act, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ? Freedom, r0.rel: is) => Patriotic; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Patriotic, r0.namespace: reverb, r0.arg2: the Patriot Act ?, r0.rel: is) => Patriotic
Why was the patriot act created?	terrorism	7198.357160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (patriot act, do, $x) => (r0.arg1: the USA PATRIOT Act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: has nothing to do with) => terrorism; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism; when do the patriot act create ? => $x: (the patriot act, do create in, $x) => $x: (patriot act, do, $x) => (r0.arg1: the USA PATRIOT Act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: has nothing to do with) => terrorism; when do the patriot act create ? => $x: (the patriot act, do create on, $x) => $x: (patriot act, do, $x) => (r0.arg1: the USA PATRIOT Act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: has nothing to do with) => terrorism; what be the patriot act create for ? => $x: (the patriot act, be create for, $x) => $x: (patriot act, be, $x) => (r0.arg1: PATRIOT act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: was to fight) => terrorism; when be the patriot act create ? => $x: (the patriot act, be create in, $x) => $x: (patriot act, be, $x) => (r0.arg1: PATRIOT act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: was to fight) => terrorism; when be the patriot act create ? => $x: (the patriot act, be create on, $x) => $x: (patriot act, be, $x) => (r0.arg1: PATRIOT act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: was to fight) => terrorism; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism; when be the patriot act found ? => $x: (the patriot act, be found on, $x) => $x: (patriot act, be, $x) => (r0.arg1: PATRIOT act, r0.namespace: reverb, r0.arg2: terrorism, r0.rel: was to fight) => terrorism; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terrorism, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terrorism
Why was the patriot act created?	fema	7198.357160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => FEMA; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => FEMA; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => FEMA; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => FEMA; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => FEMA
Why was the patriot act created?	cointelpro	7198.357160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: COINTELPRO, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => COINTELPRO
Why was the patriot act created?	rights	7198.357160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the rights, r0.rel: actually does infringe on) => the rights; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights; when do the patriot act create ? => $x: (the patriot act, do create in, $x) => $x: (patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the rights, r0.rel: actually does infringe on) => the rights; when do the patriot act create ? => $x: (the patriot act, do create on, $x) => $x: (patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the rights, r0.rel: actually does infringe on) => the rights; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Rights, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Rights
Why was the patriot act created?	?fema	7198.357160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: ?FEMA, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => ?FEMA
Why was the patriot act created?	patriot act	7198.310884343276	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: Is) => the Patriot Act
Why was the patriot act created?	critics	7198.310884343276	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: critics, r0.namespace: reverb, r0.arg2: the sweeping Patriot Act, r0.rel: was) => critics; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: critics, r0.namespace: reverb, r0.arg2: the sweeping Patriot Act, r0.rel: was) => critics; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: critics, r0.namespace: reverb, r0.arg2: the sweeping Patriot Act, r0.rel: was) => critics; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: critics, r0.namespace: reverb, r0.arg2: the sweeping Patriot Act, r0.rel: was) => critics; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: critics, r0.namespace: reverb, r0.arg2: the sweeping Patriot Act, r0.rel: was) => critics
Why was the patriot act created?	authoritarianism	7198.310884343276	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: authoritarianism, r0.namespace: reverb, r0.arg2: the disagreeable Patriot Act, r0.rel: is) => authoritarianism
Why was the patriot act created?	democracy	7198.310884343276	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: democracy, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: was) => democracy
Why was the patriot act created?	legislation	7198.310884343276	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => legislation; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => legislation; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => legislation; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => legislation; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: legislation, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => legislation
Why was the patriot act created?	works	7198.310884343276	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the works, r0.namespace: reverb, r0.arg2: the Patriot Act II, r0.rel: is) => the works
Why was the patriot act created?	impediment	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: impediment, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => impediment; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: impediment, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => impediment; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: impediment, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => impediment; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: impediment, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => impediment; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: impediment, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => impediment
Why was the patriot act created?	question	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question; what be the piont of the patriot act ? => $x: ($x, be the piont of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is one section of) => question; what be the piont of the patriot act ? => $x: ($x, be the piont of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is one section of) => question; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question; what be some charcteristic of the patriot act ? => $x: ($x, be some charcteristic of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is one section of) => question; what be some charcteristic of the patriot act ? => $x: ($x, be some charcteristic of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is one section of) => question; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Question, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Question; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: question, r0.namespace: reverb, r0.arg2: the USA PATRIOT act, r0.rel: was) => question
Why was the patriot act created?	past five years	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the past five years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the past five years; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the past five years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the past five years; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the past five years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the past five years; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the past five years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the past five years; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the past five years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the past five years
Why was the patriot act created?	free , searchable database versions	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: free , searchable database versions, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: are) => free , searchable database versions
Why was the patriot act created?	obama?s hypocrisy	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Obama?s hypocrisy, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Obama?s hypocrisy; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Obama?s hypocrisy, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Obama?s hypocrisy; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Obama?s hypocrisy, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Obama?s hypocrisy; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Obama?s hypocrisy, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Obama?s hypocrisy; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Obama?s hypocrisy, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => Obama?s hypocrisy
Why was the patriot act created?	terror	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: as do) => terror; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: terror, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => terror
Why was the patriot act created?	recent years	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => recent years; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => recent years; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => recent years; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => recent years; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recent years, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => recent years
Why was the patriot act created?	least	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: not the least, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => not the least
Why was the patriot act created?	bush	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot acts, r0.rel: did with) => Bush; what do the patriot act ? => $x: ($x, do, the patriot act) => $x: ($x, do, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act question, r0.rel: did a fairly good job with) => Bush; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: were) => Bush; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Bush, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => Bush
Why was the patriot act created?	first	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: First, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => First
Why was the patriot act created?	etc. ? 5	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: etc. ? 5, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => etc. ? 5; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: etc. ? 5, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => etc. ? 5; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: etc. ? 5, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => etc. ? 5; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: etc. ? 5, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => etc. ? 5; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: etc. ? 5, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => etc. ? 5
Why was the patriot act created?	third big picture issue	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: The third big picture issue, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => The third big picture issue; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: The third big picture issue, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => The third big picture issue; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: The third big picture issue, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => The third big picture issue; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: The third big picture issue, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => The third big picture issue; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: The third big picture issue, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => The third big picture issue
Why was the patriot act created?	ndaa	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: NDAA, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => NDAA
Why was the patriot act created?	cheney?s trimester mirabilis	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cheney?s trimester mirabilis, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => Cheney?s trimester mirabilis
Why was the patriot act created?	how patriotic	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: HOW PATRIOTIC, r0.namespace: reverb, r0.arg2: THE PATRIOT ACT, r0.rel: IS) => HOW PATRIOTIC; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: HOW PATRIOTIC, r0.namespace: reverb, r0.arg2: THE PATRIOT ACT, r0.rel: IS) => HOW PATRIOTIC; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: HOW PATRIOTIC, r0.namespace: reverb, r0.arg2: THE PATRIOT ACT, r0.rel: IS) => HOW PATRIOTIC; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: HOW PATRIOTIC, r0.namespace: reverb, r0.arg2: THE PATRIOT ACT, r0.rel: IS) => HOW PATRIOTIC; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: HOW PATRIOTIC, r0.namespace: reverb, r0.arg2: THE PATRIOT ACT, r0.rel: IS) => HOW PATRIOTIC
Why was the patriot act created?	reference	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: reference, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => reference
Why was the patriot act created?	america	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => America
Why was the patriot act created?	globe	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the globe, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the globe
Why was the patriot act created?	same?..uh	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: THE SAME?..uh, r0.namespace: reverb, r0.arg2: the patriot act, r0.rel: was) => THE SAME?..uh
Why was the patriot act created?	9/11	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11; what do the patriot act do ? => $x: (the patriot act, do, $x) => $x: (patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: 9/11, r0.rel: needed to be done after) => 9/11; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11; when do the patriot act create ? => $x: (the patriot act, do create in, $x) => $x: (patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: 9/11, r0.rel: needed to be done after) => 9/11; when do the patriot act create ? => $x: (the patriot act, do create on, $x) => $x: (patriot act, do, $x) => (r0.arg1: the Patriot Act, r0.namespace: reverb, r0.arg2: 9/11, r0.rel: needed to be done after) => 9/11; who lead the patriot act ? => $x: ($x, lead, the patriot act) => $x: ($x, lead, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: led to) => 9/11; what be the piont of the patriot act ? => $x: ($x, be the piont of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are the rigged passage of) => 9/11; what be the piont of the patriot act ? => $x: ($x, be the piont of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are the rigged passage of) => 9/11; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11; what be some charcteristic of the patriot act ? => $x: ($x, be some charcteristic of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are the rigged passage of) => 9/11; what be some charcteristic of the patriot act ? => $x: ($x, be some charcteristic of, the patriot act) => $x: ($x, be of, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are the rigged passage of) => 9/11; what come out of the patriot act ? => $x: ($x, come out of, the patriot act) => $x: ($x, come, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: its pre-written Patriot Act, r0.rel: came along with) => 9/11; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 9/11, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: was) => 9/11
Why was the patriot act created?	financial sector	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the financial sector, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the financial sector; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the financial sector, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the financial sector; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the financial sector, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the financial sector; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the financial sector, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the financial sector; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the financial sector, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the financial sector
Why was the patriot act created?	position	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: position, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => position
Why was the patriot act created?	h.r. 811	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: H.R. 811, r0.namespace: reverb, r0.arg2: The Patriot Act, r0.rel: is) => H.R. 811
Why was the patriot act created?	american people	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => the American people; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the American people, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the American people
Why was the patriot act created?	1918	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918; what year be the patriot act ? => $x: ($x, "is a", year) ($x, be, the patriot act) => $x: ($x, "is a", year) ($x, be, patriot act) => (r0.arg1: 1918, r1.rel: were, r0.namespace: nell, r1.arg2: the Patriot Acts, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: 1918) => 1918; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: 1918, r0.namespace: reverb, r0.arg2: the Patriot Acts, r0.rel: were) => 1918
Why was the patriot act created?	land	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the land, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => the land; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the land, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => the land; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the land, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => the land; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the land, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => the land; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the land, r0.namespace: reverb, r0.arg2: the PATRIOT Act, r0.rel: is) => the land
Why was the patriot act created?	most significant	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the most significant, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: are) => the most significant
Why was the patriot act created?	population	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the population, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: is) => the population
Why was the patriot act created?	stool	7197.557160148279	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the stool, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => the stool; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the stool, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => the stool; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the stool, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => the stool; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the stool, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => the stool; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: the stool, r0.namespace: reverb, r0.arg2: the Patriot Act, r0.rel: were) => the stool
Why was the patriot act created?	founders revolution	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Founders Revolution, r0.namespace: reverb, r0.arg2: the Patriot Act Unpatriotic, r0.rel: Is) => Founders Revolution
Why was the patriot act created?	main issue	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: A main issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: is) => A main issue
Why was the patriot act created?	one law	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: One such law, r0.namespace: reverb, r0.arg2: the USA PATRIOT Act, r0.rel: is) => One such law
Why was the patriot act created?	cloud news	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cloud News, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => Cloud News; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cloud News, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => Cloud News; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cloud News, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => Cloud News; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cloud News, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => Cloud News; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: Cloud News, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => Cloud News
Why was the patriot act created?	related concern	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: related concern, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => related concern
Why was the patriot act created?	cloudcommons 2011	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2011, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2011
Why was the patriot act created?	cloudcommons 2012	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2012, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2012; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2012, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2012; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2012, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2012; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2012, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2012; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: CloudCommons 2012, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: Is) => CloudCommons 2012
Why was the patriot act created?	recently enacted regulations	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: recently enacted regulations, r0.namespace: reverb, r0.arg2: the US Patriot Act, r0.rel: is) => recently enacted regulations
Why was the patriot act created?	issue	7197.510884343275	what be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue; what be so important about the patriot act ? => $x: ($x, be so important about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue; found of the patriot act ? => $x: ($x, be found of, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue; what be different about the patriot act ? => $x: ($x, be different about, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue; who be the patriot act ? => $x: ($x, be, the patriot act) => $x: ($x, be, patriot act) => (r0.arg1: issue, r0.namespace: reverb, r0.arg2: the USA Patriot Act, r0.rel: was) => issue
What kind of music did the romans have?	europe	9742.856698754586	what kind of music do the roman ? => $x: ($x, "type", music) ($x, do, the roman) => $x: ($x, "type", music) ($x, do, roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe; what music do the roman ? => $x: ($x, "type", music) ($x, do, the roman) => $x: ($x, "type", music) ($x, do, roman) => (r0.arg1: Europe, r1.rel: did, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: Europe) => Europe
What kind of music did the romans have?	apollo	7049.073613802475	what be some roman kind of music ? => $x: ($x, be some roman kind of, music) => $x: ($x, be roman of, music) => (r0.arg1: Apollo, r0.namespace: reverb, r0.arg2: music, r0.rel: was the Roman god of) => Apollo; what be some roman kind of music ? => $x: ($x, be some roman kind of, music) => $x: ($x, be roman of, music) => (r0.arg1: Apollo, r0.namespace: reverb, r0.arg2: music, r0.rel: was the Roman god of) => Apollo; what be the roman kind of music ? => $x: ($x, be the roman kind of, music) => $x: ($x, be roman of, music) => (r0.arg1: Apollo, r0.namespace: reverb, r0.arg2: music, r0.rel: was the Roman god of) => Apollo; what be the roman kind of music ? => $x: ($x, be the roman kind of, music) => $x: ($x, be roman of, music) => (r0.arg1: Apollo, r0.namespace: reverb, r0.arg2: music, r0.rel: was the Roman god of) => Apollo
What kind of music did the romans have?	cato	7009.01537843766	what kind of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: Cato, r1.rel: listened to, r0.namespace: freebase, r1.arg2: Cato, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Cato; what type of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: Cato, r1.rel: listened to, r0.namespace: freebase, r1.arg2: Cato, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Cato; what music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: Cato, r1.rel: listened to, r0.namespace: freebase, r1.arg2: Cato, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: the Romans) => Cato
What kind of music did the romans have?	story	7008.938252095988	what kind of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: The Story, r1.rel: listen to, r0.namespace: freebase, r1.arg2: the story, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Mary Roman Catholic Church) => The Story; what type of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: The Story, r1.rel: listen to, r0.namespace: freebase, r1.arg2: the story, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Mary Roman Catholic Church) => The Story; what music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: The Story, r1.rel: listen to, r0.namespace: freebase, r1.arg2: the story, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: St . Mary Roman Catholic Church) => The Story
What kind of music did the romans have?	age	7008.924479534975	what kind of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: No Age, r1.rel: should be content to listen for, r0.namespace: freebase, r1.arg2: age, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: a Roman audience) => No Age; what type of music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: No Age, r1.rel: should be content to listen for, r0.namespace: freebase, r1.arg2: age, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: a Roman audience) => No Age; what music do the roman listen to ? => $x: ($x, "type", music) (the roman, listen to, $x) => $x: ($x, "type", music) (roman, listen to, $x) => (r0.arg1: No Age, r1.rel: should be content to listen for, r0.namespace: freebase, r1.arg2: age, r0.arg2: Film music contributor, r0.rel: Type, r1.namespace: reverb, r1.arg1: a Roman audience) => No Age
What kind of music did the romans have?	pets	6842.598653985141	what kind of music do the roman have like ? => $x: ($x, "type", music) (the roman, have like, $x) => $x: ($x, "type", music) (roman, have like, $x) => (r0.arg1: Pets, r1.rel: liked to have, r0.namespace: freebase, r1.arg2: pets, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: Colonial roman families) => Pets
What kind of music did the romans have?	wave	6832.292246433098	what kind of music do the roman have like ? => $x: ($x, "is a", music) (the roman, have like, $x) => $x: ($x, "is a", music) (roman, like, $x) => (r0.arg1: no wave, r1.rel: were moving like, r0.namespace: nell, r1.arg2: waves, r0.arg2: genre of music, r0.rel: is a, r1.namespace: reverb, r1.arg1: the Romans) => no wave
What kind of music did the romans have?	light	6832.258591302186	what kind of music do the roman have like ? => $x: ($x, "is a", music) (the roman, have like, $x) => $x: ($x, "is a", music) (roman, like, $x) => (r0.arg1: No Light, r1.rel: become like, r0.namespace: nell, r1.arg2: light, r0.arg2: genre of music, r0.rel: is a, r1.namespace: reverb, r1.arg1: Roman Catholicism) => No Light
What kind of music did the romans have?	wednesday?s ruling	5771.648412810384	what be the roman job ? => $x: ($x, be, the roman job) => $x: ($x, be, roman job) => (r0.arg1: Wednesday?s ruling, r0.namespace: reverb, r0.arg2: Roman jobs, r0.rel: was ?good for) => Wednesday?s ruling
What kind of music did the romans have?	history	5771.609849639548	what be the roman job ? => $x: ($x, be, the roman job) => $x: ($x, be, roman job) => (r0.arg1: history, r0.namespace: reverb, r0.arg2: Job and Romans 9, r0.rel: is to be found in) => history
What kind of music did the romans have?	writing	5370.4207601762555	what type of music be from the roman ? => $x: ($x, "is a kind of", music) ($x, be from, the roman) => $x: ($x, "is a kind of", music) ($x, be from, roman) => (r0.arg1: Writing, r1.rel: is derived from, r0.namespace: openie4, r1.arg2: either Roman or Gothic forms, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Our writing) => Writing; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Writing, r1.rel: was in, r0.namespace: openie4, r1.arg2: a Roman jail, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Writing, r1.rel: is in, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: The writing, r1.rel: is in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is a few pictures of, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: was first developed by, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is specifically, r0.namespace: openie4, r1.arg2: Roman Catholic, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: his writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is mostly about, r0.namespace: openie4, r1.arg2: Roman food, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: my writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is limited to, r0.namespace: openie4, r1.arg2: Roman languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: your writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is also heavily focused towards, r0.namespace: openie4, r1.arg2: Roman material, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is, r0.namespace: openie4, r1.arg2: New Roman Cursive probably, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is, r0.namespace: openie4, r1.arg2: the Scripture passage Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: was in, r0.namespace: openie4, r1.arg2: a Roman jail, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is the ancestor of, r0.namespace: openie4, r1.arg2: the modern Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: can either be, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is in, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is inspired by, r0.namespace: openie4, r1.arg2: Romans 8:28, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: your writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is a few pictures of, r0.namespace: openie4, r1.arg2: Romans men and women, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is derived from, r0.namespace: openie4, r1.arg2: either Roman or Gothic forms, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Our writing) => Writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is also heavily focused towards, r0.namespace: reverb, r1.arg2: Roman material, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => The writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is, r0.namespace: reverb, r1.arg2: New Roman Cursive probably, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is, r0.namespace: reverb, r1.arg2: the Scripture passage Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => The writing; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is a few pictures of, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: was first developed by, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is specifically, r0.namespace: openie4, r1.arg2: Roman Catholic, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: his writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is mostly about, r0.namespace: openie4, r1.arg2: Roman food, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: my writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is limited to, r0.namespace: openie4, r1.arg2: Roman languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: your writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is also heavily focused towards, r0.namespace: openie4, r1.arg2: Roman material, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is, r0.namespace: openie4, r1.arg2: New Roman Cursive probably, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is, r0.namespace: openie4, r1.arg2: the Scripture passage Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: was in, r0.namespace: openie4, r1.arg2: a Roman jail, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is the ancestor of, r0.namespace: openie4, r1.arg2: the modern Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: can either be, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is in, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is inspired by, r0.namespace: openie4, r1.arg2: Romans 8:28, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: your writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is a few pictures of, r0.namespace: openie4, r1.arg2: Romans men and women, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is derived from, r0.namespace: openie4, r1.arg2: either Roman or Gothic forms, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Our writing) => Writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is also heavily focused towards, r0.namespace: reverb, r1.arg2: Roman material, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => The writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is, r0.namespace: reverb, r1.arg2: New Roman Cursive probably, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is, r0.namespace: reverb, r1.arg2: the Scripture passage Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => The writing; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Writing, r1.rel: was in, r0.namespace: openie4, r1.arg2: a Roman jail, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Writing, r1.rel: is in, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: The writing, r1.rel: is in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Writing, r1.rel: was in, r0.namespace: openie4, r1.arg2: a Roman jail, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Writing, r1.rel: is in, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: The writing, r1.rel: is in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is a few pictures of, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: was first developed by, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is specifically, r0.namespace: openie4, r1.arg2: Roman Catholic, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: his writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is mostly about, r0.namespace: openie4, r1.arg2: Roman food, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: my writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is limited to, r0.namespace: openie4, r1.arg2: Roman languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: your writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is also heavily focused towards, r0.namespace: openie4, r1.arg2: Roman material, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is, r0.namespace: openie4, r1.arg2: New Roman Cursive probably, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is, r0.namespace: openie4, r1.arg2: the Scripture passage Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: was in, r0.namespace: openie4, r1.arg2: a Roman jail, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is the ancestor of, r0.namespace: openie4, r1.arg2: the modern Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: can either be, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is in, r0.namespace: openie4, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is inspired by, r0.namespace: openie4, r1.arg2: Romans 8:28, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: your writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is a few pictures of, r0.namespace: openie4, r1.arg2: Romans men and women, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Writing, r1.rel: is derived from, r0.namespace: openie4, r1.arg2: either Roman or Gothic forms, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Our writing) => Writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is also heavily focused towards, r0.namespace: reverb, r1.arg2: Roman material, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => The writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is, r0.namespace: reverb, r1.arg2: New Roman Cursive probably, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is, r0.namespace: reverb, r1.arg2: the Scripture passage Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the writing) => The writing; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The writing, r1.rel: is in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The writing) => The writing
What kind of music did the romans have?	poetry	5370.4207601762555	what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: is the language of, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this poetry) => Poetry; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: is the language of, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this poetry) => Poetry; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was inspired by, r0.namespace: reverb, r1.arg2: the ancient Greeks and Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: poetry) => Poetry; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was inspired by, r0.namespace: openie4, r1.arg2: the ancient Greeks and Romans, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: poetry) => Poetry; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was greatly admired by, r0.namespace: reverb, r1.arg2: the best Roman poets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: His poetry) => Poetry; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was greatly admired by, r0.namespace: openie4, r1.arg2: the best Roman poets, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: His poetry) => Poetry; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: is the language of, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this poetry) => Poetry; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: is the language of, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this poetry) => Poetry; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was inspired by, r0.namespace: reverb, r1.arg2: the ancient Greeks and Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: poetry) => Poetry; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was inspired by, r0.namespace: openie4, r1.arg2: the ancient Greeks and Romans, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: poetry) => Poetry; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was greatly admired by, r0.namespace: reverb, r1.arg2: the best Roman poets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: His poetry) => Poetry; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was greatly admired by, r0.namespace: openie4, r1.arg2: the best Roman poets, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: His poetry) => Poetry; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: is the language of, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this poetry) => Poetry; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: is the language of, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this poetry) => Poetry; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was inspired by, r0.namespace: reverb, r1.arg2: the ancient Greeks and Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: poetry) => Poetry; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was inspired by, r0.namespace: openie4, r1.arg2: the ancient Greeks and Romans, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: poetry) => Poetry; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was greatly admired by, r0.namespace: reverb, r1.arg2: the best Roman poets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: His poetry) => Poetry; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Poetry, r1.rel: was greatly admired by, r0.namespace: openie4, r1.arg2: the best Roman poets, r0.arg2: Music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: His poetry) => Poetry
What kind of music did the romans have?	rock	5370.1160114444665	what music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: was first used long before, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Rock) => rock; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: had been utilized by, r0.namespace: reverb, r1.arg2: the actual Roman people, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: rocks) => rock; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: was also called, r0.namespace: reverb, r1.arg2: the Roman Praetorium, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: This rock) => rock; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: was first used long before, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Rock) => rock; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: had been utilized by, r0.namespace: reverb, r1.arg2: the actual Roman people, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: rocks) => rock; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: was also called, r0.namespace: reverb, r1.arg2: the Roman Praetorium, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: This rock) => rock; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what kind of music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what type of music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: was first used long before, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Rock) => rock; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: had been utilized by, r0.namespace: reverb, r1.arg2: the actual Roman people, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: rocks) => rock; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: was also called, r0.namespace: reverb, r1.arg2: the Roman Praetorium, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: This rock) => rock; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: rock, r1.rel: is beautifully sculptured in, r0.namespace: reverb, r1.arg2: the later Roman style, r0.arg2: the local music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The rock) => rock
What kind of music did the romans have?	civilian	5370.085023182188	what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Civilian, r1.rel: was now countenanced by, r0.namespace: reverb, r1.arg2: the Roman Catholic Church, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: civilians) => Civilian; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Civilian, r1.rel: was now countenanced by, r0.namespace: reverb, r1.arg2: the Roman Catholic Church, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: civilians) => Civilian; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Civilian, r1.rel: was now countenanced by, r0.namespace: reverb, r1.arg2: the Roman Catholic Church, r0.arg2: 21st-century folk music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: civilians) => Civilian
What kind of music did the romans have?	language	5369.627070513301	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: reverb, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: seems to have this sort of, r0.namespace: openie4, r1.arg2: language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Romans 4) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: reverb, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: have colored, r0.namespace: openie4, r1.arg2: the language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Roman armies) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: reverb, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: would have formulated, r0.namespace: openie4, r1.arg2: his language, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a classical Roman lawyer) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: reverb, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: Language, r1.rel: has been used in, r0.namespace: openie4, r1.arg2: these languages, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman alphabet) => Language; what type of music be from the roman ? => $x: ($x, "is a kind of", music) ($x, be from, the roman) => $x: ($x, "is a kind of", music) ($x, be from, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: reverb, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be from the roman ? => $x: ($x, "is a kind of", music) ($x, be from, the roman) => $x: ($x, "is a kind of", music) ($x, be from, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: openie4, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: openie4, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: reverb, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: openie4, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: reverb, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: openie4, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: reverb, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: openie4, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: reverb, r1.arg2: Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: openie4, r1.arg2: Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: openie4, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is preserved mostly by, r0.namespace: reverb, r1.arg2: the Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is preserved mostly by, r0.namespace: openie4, r1.arg2: the Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must have been unintelligible to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must have been unintelligible to, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: would be intelligible to, r0.namespace: reverb, r1.arg2: the ordinary Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: would be intelligible to, r0.namespace: openie4, r1.arg2: the ordinary Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: have been transliterated into, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: have been transliterated into, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: reverb, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: openie4, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written with, r0.namespace: reverb, r1.arg2: non-Roman alphabets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written with, r0.namespace: openie4, r1.arg2: non-Roman alphabets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: reverb, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: openie4, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written using, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written using, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are written with, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: other languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are written with, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: other languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: reverb, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: openie4, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must be evaluated by, r0.namespace: reverb, r1.arg2: the Roman Curia, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must be evaluated by, r0.namespace: openie4, r1.arg2: the Roman Curia, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was the lingua franca of, r0.namespace: reverb, r1.arg2: the Roman world, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was the lingua franca of, r0.namespace: openie4, r1.arg2: the Roman world, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: as was easily understandable by, r0.namespace: reverb, r1.arg2: the Roman people, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: such language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: as was easily understandable by, r0.namespace: openie4, r1.arg2: the Roman people, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: such language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the third letter of, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language C) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the third letter of, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language C) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the 12th letter of, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: all languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the 12th letter of, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: all languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was, r0.namespace: reverb, r1.arg2: a standardized Roman script version, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: those languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was, r0.namespace: openie4, r1.arg2: a standardized Roman script version, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: those languages) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: reverb, r1.arg2: a valuable commodity amongst Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: openie4, r1.arg2: a valuable commodity amongst Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: reverb, r1.arg2: the Romans and others, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: openie4, r1.arg2: the Romans and others, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: a non-Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: a non-Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: reverb, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: openie4, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: reverb, r1.arg2: Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: openie4, r1.arg2: Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: openie4, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is preserved mostly by, r0.namespace: reverb, r1.arg2: the Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is preserved mostly by, r0.namespace: openie4, r1.arg2: the Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must have been unintelligible to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must have been unintelligible to, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: would be intelligible to, r0.namespace: reverb, r1.arg2: the ordinary Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: would be intelligible to, r0.namespace: openie4, r1.arg2: the ordinary Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: have been transliterated into, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: have been transliterated into, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: reverb, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: openie4, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written with, r0.namespace: reverb, r1.arg2: non-Roman alphabets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written with, r0.namespace: openie4, r1.arg2: non-Roman alphabets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: reverb, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: openie4, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written using, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written using, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are written with, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: other languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are written with, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: other languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: reverb, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: openie4, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must be evaluated by, r0.namespace: reverb, r1.arg2: the Roman Curia, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must be evaluated by, r0.namespace: openie4, r1.arg2: the Roman Curia, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was the lingua franca of, r0.namespace: reverb, r1.arg2: the Roman world, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was the lingua franca of, r0.namespace: openie4, r1.arg2: the Roman world, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: as was easily understandable by, r0.namespace: reverb, r1.arg2: the Roman people, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: such language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: as was easily understandable by, r0.namespace: openie4, r1.arg2: the Roman people, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: such language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the third letter of, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language C) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the third letter of, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language C) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the 12th letter of, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: all languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the 12th letter of, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: all languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was, r0.namespace: reverb, r1.arg2: a standardized Roman script version, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: those languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was, r0.namespace: openie4, r1.arg2: a standardized Roman script version, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: those languages) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: reverb, r1.arg2: a valuable commodity amongst Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: openie4, r1.arg2: a valuable commodity amongst Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: reverb, r1.arg2: the Romans and others, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: openie4, r1.arg2: the Romans and others, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: a non-Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: a non-Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: reverb, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: openie4, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: openie4, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: reverb, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: openie4, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: reverb, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: openie4, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: reverb, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: openie4, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what kind of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: openie4, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: reverb, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: openie4, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: reverb, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: openie4, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: reverb, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: openie4, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be in the roman ? => $x: ($x, "is a kind of", music) ($x, be in, the roman) => $x: ($x, "is a kind of", music) ($x, be in, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: reverb, r1.arg2: Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: openie4, r1.arg2: Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is picked up in, r0.namespace: openie4, r1.arg2: Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is especially strong in, r0.namespace: openie4, r1.arg2: Romans 1, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is preserved mostly by, r0.namespace: reverb, r1.arg2: the Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is preserved mostly by, r0.namespace: openie4, r1.arg2: the Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must have been unintelligible to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must have been unintelligible to, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: would be intelligible to, r0.namespace: reverb, r1.arg2: the ordinary Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: would be intelligible to, r0.namespace: openie4, r1.arg2: the ordinary Roman, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: have been transliterated into, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: have been transliterated into, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: reverb, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is employed in, r0.namespace: openie4, r1.arg2: Romans 8:9, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: openie4, r1.arg2: the Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is natively written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: these languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written with, r0.namespace: reverb, r1.arg2: non-Roman alphabets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written with, r0.namespace: openie4, r1.arg2: non-Roman alphabets, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is spelt in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: reverb, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is still heard in, r0.namespace: openie4, r1.arg2: Roman Catholic liturgy, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written using, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is written using, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was once prevalent in, r0.namespace: openie4, r1.arg2: the Roman Empire, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: should be written in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are written with, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: other languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are written with, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: other languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: reverb, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: are often written in, r0.namespace: openie4, r1.arg2: non-Roman scripts, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: These languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must be evaluated by, r0.namespace: reverb, r1.arg2: the Roman Curia, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: must be evaluated by, r0.namespace: openie4, r1.arg2: the Roman Curia, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: this language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was the lingua franca of, r0.namespace: reverb, r1.arg2: the Roman world, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was the lingua franca of, r0.namespace: openie4, r1.arg2: the Roman world, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: can be written both in, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: as was easily understandable by, r0.namespace: reverb, r1.arg2: the Roman people, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: such language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: as was easily understandable by, r0.namespace: openie4, r1.arg2: the Roman people, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: such language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the third letter of, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language C) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the third letter of, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: language C) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the 12th letter of, r0.namespace: reverb, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: all languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is the 12th letter of, r0.namespace: openie4, r1.arg2: the Roman alphabet, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: all languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was, r0.namespace: reverb, r1.arg2: a standardized Roman script version, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: those languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was, r0.namespace: openie4, r1.arg2: a standardized Roman script version, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: those languages) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: reverb, r1.arg2: a valuable commodity amongst Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is, r0.namespace: openie4, r1.arg2: a valuable commodity amongst Romans, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: reverb, r1.arg2: the Romans and others, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: was spoken by, r0.namespace: openie4, r1.arg2: the Romans and others, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: an old language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: has been set to, r0.namespace: reverb, r1.arg2: a non-Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: has been set to, r0.namespace: openie4, r1.arg2: a non-Roman script, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: reverb, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: Language, r1.rel: is from, r0.namespace: openie4, r1.arg2: 1 Corinthians 3:10-12 and Romans 9:19-24, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The language) => Language
What kind of music did the romans have?	genre	5369.310001599661	what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: genre, r1.rel: was termed, r0.namespace: reverb, r1.arg2: Roman Noir, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The genre) => genre; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: genre, r1.rel: was termed, r0.namespace: reverb, r1.arg2: Roman Noir, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The genre) => genre; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: genre, r1.rel: was termed, r0.namespace: reverb, r1.arg2: Roman Noir, r0.arg2: music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The genre) => genre
What kind of music did the romans have?	end result	5369.310001599661	what music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The end result, r1.rel: is, r0.namespace: reverb, r1.arg2: Romans 1:23, r0.arg2: avante-dub music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The end result) => The end result; what kind of music be there in the roman ? => $x: ($x, "is a kind of", music) ($x, be there in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The end result, r1.rel: is, r0.namespace: reverb, r1.arg2: Romans 1:23, r0.arg2: avante-dub music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The end result) => The end result; what type of music be popular in the roman ? => $x: ($x, "is a kind of", music) ($x, be popular in, the roman) => $x: ($x, "is a kind of", music) ($x, be, roman) => (r0.arg1: The end result, r1.rel: is, r0.namespace: reverb, r1.arg2: Romans 1:23, r0.arg2: avante-dub music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The end result) => The end result
What kind of music did the romans have?	piece	5369.308383564521	what type of music be from the roman ? => $x: ($x, "is an example of", music) ($x, be from, the roman) => $x: ($x, "is an example of", music) ($x, be from, roman) => (r0.arg1: The piece, r1.rel: were from, r0.namespace: reverb, r1.arg2: Harrell?s new CD Roman Nights, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, roman) => (r0.arg1: The piece, r1.rel: were discovered in, r0.namespace: reverb, r1.arg2: a Roman tomb, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pieces) => The piece; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were likely used by, r0.namespace: reverb, r1.arg2: Roman Legionnaires, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were melted down by, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were discovered in, r0.namespace: reverb, r1.arg2: a Roman tomb, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pieces) => The piece; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: is loosely based on, r0.namespace: reverb, r1.arg2: the ancient Roman myth, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The piece) => The piece; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: is uniquely decorated with, r0.namespace: reverb, r1.arg2: an overlay Roman X design, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the piece) => The piece; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were from, r0.namespace: reverb, r1.arg2: Harrell?s new CD Roman Nights, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were likely used by, r0.namespace: reverb, r1.arg2: Roman Legionnaires, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were melted down by, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were discovered in, r0.namespace: reverb, r1.arg2: a Roman tomb, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pieces) => The piece; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: is loosely based on, r0.namespace: reverb, r1.arg2: the ancient Roman myth, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The piece) => The piece; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: is uniquely decorated with, r0.namespace: reverb, r1.arg2: an overlay Roman X design, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the piece) => The piece; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were from, r0.namespace: reverb, r1.arg2: Harrell?s new CD Roman Nights, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what kind of music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, roman) => (r0.arg1: The piece, r1.rel: were discovered in, r0.namespace: reverb, r1.arg2: a Roman tomb, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pieces) => The piece; what type of music be in the roman ? => $x: ($x, "is an example of", music) ($x, be in, the roman) => $x: ($x, "is an example of", music) ($x, be in, roman) => (r0.arg1: The piece, r1.rel: were discovered in, r0.namespace: reverb, r1.arg2: a Roman tomb, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pieces) => The piece; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were likely used by, r0.namespace: reverb, r1.arg2: Roman Legionnaires, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were melted down by, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were discovered in, r0.namespace: reverb, r1.arg2: a Roman tomb, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The pieces) => The piece; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: is loosely based on, r0.namespace: reverb, r1.arg2: the ancient Roman myth, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The piece) => The piece; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: is uniquely decorated with, r0.namespace: reverb, r1.arg2: an overlay Roman X design, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the piece) => The piece; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: The piece, r1.rel: were from, r0.namespace: reverb, r1.arg2: Harrell?s new CD Roman Nights, r0.arg2: program music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the pieces) => The piece
What kind of music did the romans have?	past	5369.308383564521	What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; What kind of music did the romans have? => $x: ($x, "is an example of", music) (the romans, have, $x) => $x: ($x, "is an example of", music) (romans, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what type of music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what music do the roman have ? => $x: ($x, "is an example of", music) (the roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has had major horses in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have reverence for, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have done in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Romans) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have been discovered in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Roman pottery) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: have spoken in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: some Roman Catholic leaders) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has accomplished over, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what kind of music do roman have ? => $x: ($x, "is an example of", music) (roman, have, $x) => $x: ($x, "is an example of", music) (roman, have, $x) => (r0.arg1: the past, r1.rel: has tried in, r0.namespace: reverb, r1.arg2: the past, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => the past; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: is, r0.namespace: reverb, r1.arg2: Roman Catholic, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: their the past) => the past; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: is credited to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: had been most loyal to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: was, r0.namespace: reverb, r1.arg2: the Roman empire, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: is, r0.namespace: reverb, r1.arg2: Roman Catholic, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: their the past) => the past; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: is credited to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: had been most loyal to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: was, r0.namespace: reverb, r1.arg2: the Roman empire, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: is, r0.namespace: reverb, r1.arg2: Roman Catholic, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: their the past) => the past; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: is credited to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: had been most loyal to, r0.namespace: reverb, r1.arg2: the Romans, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the past, r1.rel: was, r0.namespace: reverb, r1.arg2: the Roman empire, r0.arg2: fresh or ground-breaking music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the past) => the past
What kind of music did the romans have?	background	5369.299484371251	what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the background, r1.rel: is, r0.namespace: reverb, r1.arg2: a Roman statue, r0.arg2: banjo music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the background) => the background; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the background, r1.rel: is, r0.namespace: reverb, r1.arg2: a Roman statue, r0.arg2: banjo music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the background) => the background; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: the background, r1.rel: is, r0.namespace: reverb, r1.arg2: a Roman statue, r0.arg2: banjo music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the background) => the background
What kind of music did the romans have?	?the crucifixion	5369.291771737084	what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: ?The Crucifixion, r1.rel: was carried out by, r0.namespace: reverb, r1.arg2: Roman soldiers, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the crucifixion) => ?The Crucifixion; what music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: ?The Crucifixion, r1.rel: were later killed by, r0.namespace: reverb, r1.arg2: the Jews or Romans, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the crucifixion) => ?The Crucifixion; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: ?The Crucifixion, r1.rel: was carried out by, r0.namespace: reverb, r1.arg2: Roman soldiers, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the crucifixion) => ?The Crucifixion; what kind of music be there in the roman ? => $x: ($x, "is an example of", music) ($x, be there in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: ?The Crucifixion, r1.rel: were later killed by, r0.namespace: reverb, r1.arg2: the Jews or Romans, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the crucifixion) => ?The Crucifixion; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: ?The Crucifixion, r1.rel: was carried out by, r0.namespace: reverb, r1.arg2: Roman soldiers, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the crucifixion) => ?The Crucifixion; what type of music be popular in the roman ? => $x: ($x, "is an example of", music) ($x, be popular in, the roman) => $x: ($x, "is an example of", music) ($x, be, roman) => (r0.arg1: ?The Crucifixion, r1.rel: were later killed by, r0.namespace: reverb, r1.arg2: the Jews or Romans, r0.arg2: the finest church music, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: the crucifixion) => ?The Crucifixion
What kind of music did the romans have?	aspendos	5364.116239870114	what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: was a crucial hub of, r0.namespace: nell, r1.arg2: Roman trade, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: a large Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is best known for, r0.namespace: nell, r1.arg2: its magnificent Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is noted for, r0.namespace: nell, r1.arg2: its Roman ruins, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is an architectural masterpiece of, r0.namespace: nell, r1.arg2: the Roman era, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: the best preserved Roman theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is considered, r0.namespace: nell, r1.arg2: the best preserved Roman Theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is home to, r0.namespace: nell, r1.arg2: the most beautiful Roman theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is noted for, r0.namespace: nell, r1.arg2: its Roman and Byzantine ruins, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: the 2nd century Roman aqueduct, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: its well-preserved and functional Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: was a crucial hub of, r0.namespace: nell, r1.arg2: Roman trade, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: a large Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is best known for, r0.namespace: nell, r1.arg2: its magnificent Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is noted for, r0.namespace: nell, r1.arg2: its Roman ruins, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is an architectural masterpiece of, r0.namespace: nell, r1.arg2: the Roman era, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: the best preserved Roman theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is considered, r0.namespace: nell, r1.arg2: the best preserved Roman Theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is home to, r0.namespace: nell, r1.arg2: the most beautiful Roman theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is noted for, r0.namespace: nell, r1.arg2: its Roman and Byzantine ruins, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: the 2nd century Roman aqueduct, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what kind of music be there in the roman ? => $x: ($x, "is a", music) ($x, be there in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: its well-preserved and functional Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: was a crucial hub of, r0.namespace: nell, r1.arg2: Roman trade, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: a large Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is best known for, r0.namespace: nell, r1.arg2: its magnificent Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is noted for, r0.namespace: nell, r1.arg2: its Roman ruins, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is an architectural masterpiece of, r0.namespace: nell, r1.arg2: the Roman era, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: the best preserved Roman theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is considered, r0.namespace: nell, r1.arg2: the best preserved Roman Theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is home to, r0.namespace: nell, r1.arg2: the most beautiful Roman theatre, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is noted for, r0.namespace: nell, r1.arg2: its Roman and Byzantine ruins, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: the 2nd century Roman aqueduct, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos; what type of music be popular in the roman ? => $x: ($x, "is a", music) ($x, be popular in, the roman) => $x: ($x, "is a", music) ($x, be, roman) => (r0.arg1: aspendos, r1.rel: is, r0.namespace: nell, r1.arg2: its well-preserved and functional Roman theater, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: Aspendos) => aspendos
What kind of music did the romans have?	2 death	5003.005329320162	what music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, roman) => (r0.arg1: 2 The Death, r1.rel: is spoken of in, r0.namespace: freebase, r1.arg2: Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: death) => 2 The Death; what kind of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, roman) => (r0.arg1: 2 The Death, r1.rel: is spoken of in, r0.namespace: freebase, r1.arg2: Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: death) => 2 The Death; what type of music be in the roman ? => $x: ($x, "type", music) ($x, be in, the roman) => $x: ($x, "type", music) ($x, be in, roman) => (r0.arg1: 2 The Death, r1.rel: is spoken of in, r0.namespace: freebase, r1.arg2: Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: death) => 2 The Death
What kind of music did the romans have?	scriptures	4992.691851853465	what music be in the roman ? => $x: ($x, "is a", music) ($x, be in, the roman) => $x: ($x, "is a", music) ($x, be in, roman) => (r0.arg1: the scriptures, r1.rel: is in, r0.namespace: nell, r1.arg2: Romans, r0.arg2: genre of music, r0.rel: is a, r1.namespace: reverb, r1.arg1: scripture) => the scriptures; what kind of music be in the roman ? => $x: ($x, "is a", music) ($x, be in, the roman) => $x: ($x, "is a", music) ($x, be in, roman) => (r0.arg1: the scriptures, r1.rel: is in, r0.namespace: nell, r1.arg2: Romans, r0.arg2: genre of music, r0.rel: is a, r1.namespace: reverb, r1.arg1: scripture) => the scriptures; what type of music be in the roman ? => $x: ($x, "is a", music) ($x, be in, the roman) => $x: ($x, "is a", music) ($x, be in, roman) => (r0.arg1: the scriptures, r1.rel: is in, r0.namespace: nell, r1.arg2: Romans, r0.arg2: genre of music, r0.rel: is a, r1.namespace: reverb, r1.arg1: scripture) => the scriptures
What kind of music did the romans have?	ensemble	4825.552854882837	what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, roman music) => (r0.arg1: The ensemble, r0.namespace: reverb, r0.arg2: Music Director Roman Leontiev, r0.rel: is lead by) => The ensemble
What kind of music did the romans have?	gregorian chant	4825.381704068164	what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman rite, r0.rel: is the music proper to) => Gregorian chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman rite, r0.rel: is the music proper to) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Gregorian chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => Gregorian chant; what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, roman music) => (r0.arg1: Gregorian chant, r0.namespace: openie4, r0.arg2: the music of the Roman Rite, r0.rel: is) => Gregorian chant
What kind of music did the romans have?	chant	4824.581704068164	what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the fundamental music of) => Chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => chant; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the fundamental music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the fundamental music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the music of) => Chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: chant, r0.namespace: openie4, r0.arg2: the Roman Rite, r0.rel: is the music of) => chant; what be the music of the roman ? => $x: ($x, be the music of, the roman) => $x: ($x, be music of, roman) => (r0.arg1: Chant, r0.namespace: reverb, r0.arg2: the Roman Rite, r0.rel: is the fundamental music of) => Chant; what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, roman music) => (r0.arg1: Chant, r0.namespace: openie4, r0.arg2: the music of the Roman Rite, r0.rel: is) => Chant
What kind of music did the romans have?	graduale romanum	4824.559667970543	what be the roman music ? => $x: ($x, be, the roman music) => $x: ($x, be, roman music) => (r0.arg1: the Graduale Romanum, r0.namespace: openie4, r0.arg2: the music book of the Roman Rite, r0.rel: is) => the Graduale Romanum
What kind of music did the romans have?	way	4785.365948050426	what music be there in the roman ? => $x: ($x, "type", music) ($x, be there in, the roman) => $x: ($x, "type", music) ($x, be there in, roman) => (r0.arg1: The Way It Is, r1.rel: there is in, r0.namespace: freebase, r1.arg2: Roman Catholic Christianity, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the way) => The Way It Is; what music be there in the roman ? => $x: ($x, "type", music) ($x, be there in, the roman) => $x: ($x, "type", music) ($x, be there in, roman) => (r0.arg1: The Way I Are, r1.rel: there is in, r0.namespace: freebase, r1.arg2: Roman Catholic Christianity, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the way) => The Way I Are; what music be there in the roman ? => $x: ($x, "type", music) ($x, be there in, the roman) => $x: ($x, "type", music) ($x, be there in, roman) => (r0.arg1: By the Way, r1.rel: there is in, r0.namespace: freebase, r1.arg2: Roman Catholic Christianity, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the way) => By the Way; what kind of music be there in the roman ? => $x: ($x, "type", music) ($x, be there in, the roman) => $x: ($x, "type", music) ($x, be there in, roman) => (r0.arg1: The Way It Is, r1.rel: there is in, r0.namespace: freebase, r1.arg2: Roman Catholic Christianity, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the way) => The Way It Is; what kind of music be there in the roman ? => $x: ($x, "type", music) ($x, be there in, the roman) => $x: ($x, "type", music) ($x, be there in, roman) => (r0.arg1: The Way I Are, r1.rel: there is in, r0.namespace: freebase, r1.arg2: Roman Catholic Christianity, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the way) => The Way I Are; what kind of music be there in the roman ? => $x: ($x, "type", music) ($x, be there in, the roman) => $x: ($x, "type", music) ($x, be there in, roman) => (r0.arg1: By the Way, r1.rel: there is in, r0.namespace: freebase, r1.arg2: Roman Catholic Christianity, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the way) => By the Way
What kind of music did the romans have?	god	4732.971416896094	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: was in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is described in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: are important in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: are listed in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is talking about here in, r0.namespace: reverb, r1.arg2: Romans, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: are revealed in, r0.namespace: reverb, r1.arg2: Romans 1, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is doing in, r0.namespace: reverb, r1.arg2: Romans life, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is showing us in, r0.namespace: reverb, r1.arg2: Romans 5, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: were still functioning in, r0.namespace: reverb, r1.arg2: Roman Europe, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is eternal life in, r0.namespace: reverb, r1.arg2: Christ Romans, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: was worshipped in, r0.namespace: reverb, r1.arg2: Roman Britain, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: a god) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: was participation in, r0.namespace: reverb, r1.arg2: Roman rituals, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the gods) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is sung today even in, r0.namespace: reverb, r1.arg2: Roman Catholicism, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Our God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is in, r0.namespace: reverb, r1.arg2: Romans 2:16, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is speaking of in, r0.namespace: reverb, r1.arg2: Romans 8:29, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is also mentioned in, r0.namespace: reverb, r1.arg2: Romans chapter 6, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is repeated in, r0.namespace: reverb, r1.arg2: Romans 5:9, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is seen in, r0.namespace: reverb, r1.arg2: Romans1:16, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is plain enough in, r0.namespace: reverb, r1.arg2: Romans 3:31, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is defined in, r0.namespace: reverb, r1.arg2: Romans 14:17, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: was present in, r0.namespace: reverb, r1.arg2: the Roman catacombs, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: was far spread in, r0.namespace: reverb, r1.arg2: the Roman world, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the gods) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: were worshipped in, r0.namespace: reverb, r1.arg2: the Roman curia, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the gods) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is emphasized in, r0.namespace: reverb, r1.arg2: Romans 1:18-20, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is summarised in, r0.namespace: reverb, r1.arg2: Romans 12:17-21, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: are used interchangeably in, r0.namespace: reverb, r1.arg2: Romans 3:21-24, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: was often a human slave in, r0.namespace: reverb, r1.arg2: Graeco-Roman times, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the gods) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is able to do this in, r0.namespace: reverb, r1.arg2: Romans 7:18-20, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is IN, r0.namespace: reverb, r1.arg2: Us Romans 8:9-11, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: is in, r0.namespace: reverb, r1.arg2: Christ Jesus ? Romans 8:37-39, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: god, r1.rel: are salvific in, r0.namespace: reverb, r1.arg2: Romans 2:6-7 , 13, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: God) => god
What kind of music did the romans have?	perfectionism	4732.734278918369	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: Perfectionism, r1.rel: is the passage in, r0.namespace: reverb, r1.arg2: Romans 7, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: their perfectionism) => Perfectionism
What kind of music did the romans have?	school	4732.7174513529135	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: school, r1.rel: were big names in, r0.namespace: reverb, r1.arg2: the later Roman Empire, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: schools) => school; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: school, r1.rel: was set in, r0.namespace: reverb, r1.arg2: Times New Roman, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: school) => school; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: school, r1.rel: are the violent events in, r0.namespace: reverb, r1.arg2: the Roman Colosseum, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: school) => school; what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: school, r1.rel: is almost unique in, r0.namespace: reverb, r1.arg2: the Roman Empire, r0.arg2: punishment, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the school) => school
What kind of music did the romans have?	formula	4731.917451352913	what type of punishment be in the roman ? => $x: ($x, "is a kind of", punishment) ($x, be in, the roman) => $x: ($x, "is a kind of", punishment) ($x, be in, roman) => (r0.arg1: the formula, r1.rel: is given in, r0.namespace: reverb, r1.arg2: the Roman Catholic, r0.arg2: punishment function, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The formula) => the formula
What kind of music did the romans have?	article	4731.881392284079	what type of punishment be in the roman ? => $x: ($x, "is an example of", punishment) ($x, be in, the roman) => $x: ($x, "is an example of", punishment) ($x, be in, roman) => (r0.arg1: the article, r1.rel: should be submitted in, r0.namespace: reverb, r1.arg2: the font Times New Roman, r0.arg2: negative punishment, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The article) => the article
What kind of music did the romans have?	steinman	4590.562364014512	what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Steinman, r0.namespace: reverb, r0.arg2: Roman Polanski, r0.rel: will also be providing the music for) => Steinman; what be the music genre in the roman ? => $x: ($x, be the music genre in, the roman) => $x: ($x, be music, roman) => (r0.arg1: Steinman, r0.namespace: reverb, r0.arg2: Roman Polanski, r0.rel: will also be providing the music for) => Steinman
What kind of music did the romans have?	discordia	4554.1755164881315	what type of music be from the roman ? => $x: ($x, "type", music) ($x, be from, the roman) => $x: ($x, "type", music) ($x, be from, roman) => (r0.arg1: Discordia, r1.rel: is derived from, r0.namespace: freebase, r1.arg2: Roman mythology, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: Discordia) => Discordia
What kind of music did the romans have?	planets	4454.585619238153	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: The Planets, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the planet) => The Planets; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: The Planets, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the planet) => The Planets; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: The Planets, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: the planet) => The Planets
What kind of music did the romans have?	fact	4454.585619238153	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: In Fact, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: fact) => In Fact; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: In Fact, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: fact) => In Fact; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: In Fact, r1.rel: comes from, r0.namespace: freebase, r1.arg2: the Romans, r0.arg2: Music Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: fact) => In Fact
What kind of music did the romans have?	faith	4454.5525650917225	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: Faith, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: faith) => Faith; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: Faith, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: faith) => Faith; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: Faith, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Romans, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: faith) => Faith
What kind of music did the romans have?	animal	4454.531906250203	what kind of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: Animal, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Joe Roman, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: animals) => Animal; what type of music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: Animal, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Joe Roman, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: animals) => Animal; what music come from the roman ? => $x: ($x, "type", music) ($x, come from, the roman) => $x: ($x, "type", music) ($x, come from, roman) => (r0.arg1: Animal, r1.rel: comes from, r0.namespace: freebase, r1.arg2: Joe Roman, r0.arg2: Music video, r0.rel: Type, r1.namespace: reverb, r1.arg1: animals) => Animal
What kind of music did the romans have?	champion	4422.563326591223	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: a champion, r1.rel: has been, r0.namespace: reverb, r1.arg2: a champion, r0.arg2: music?dissonant, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the Roman Catholic Church) => a champion
What kind of music did the romans have?	mod	4422.552809362814	What kind of music did the romans have? => $x: ($x, "is a kind of", music) (the romans, have, $x) => $x: ($x, "is a kind of", music) (romans, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what type of music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what music do the roman have ? => $x: ($x, "is a kind of", music) (the roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD; what kind of music do roman have ? => $x: ($x, "is a kind of", music) (roman, have, $x) => $x: ($x, "is a kind of", music) (roman, have, $x) => (r0.arg1: MOD, r1.rel: have done doing, r0.namespace: reverb, r1.arg2: the mods, r0.arg2: true digital music, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: 04/04/12 8:31 PM Hi Romans) => MOD
What kind of music did the romans have?	harvest festival	4417.4090044682125	What kind of music did the romans have? => $x: ($x, "is a", music) (the romans, have, $x) => $x: ($x, "is a", music) (romans, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what type of music do the roman have ? => $x: ($x, "is a", music) (the roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what music do the roman have ? => $x: ($x, "is a", music) (the roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival; what kind of music do roman have ? => $x: ($x, "is a", music) (roman, have, $x) => $x: ($x, "is a", music) (roman, have, $x) => (r0.arg1: Harvest festival, r1.rel: also had, r0.namespace: nell, r1.arg2: a harvest festival, r0.arg2: music festival, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Romans) => Harvest festival
What is the aim and objective for asda?	wednesday	3555.7051310410016	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Wednesday, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is at) => Wednesday; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Wednesday, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is at) => Wednesday
What is the aim and objective for asda?	walmart	3555.554647218427	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Walmart, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => Walmart; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Walmart, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => Walmart
What is the aim and objective for asda?	trustees	3555.554647218427	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: trustees, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is) => trustees; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: trustees, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is) => trustees
What is the aim and objective for asda?	tesco	3555.5488627428017	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Tesco, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is twice the size of) => Tesco; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Tesco, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is twice the size of) => Tesco
What is the aim and objective for asda?	pet food	3555.5282039012823	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: pet food, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were cheaper at) => pet food; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: pet food, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were cheaper at) => pet food
What is the aim and objective for asda?	petrol	3555.5282039012823	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is available at) => Petrol; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Petrol, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is available at) => Petrol
What is the aim and objective for asda?	tin foil	3555.5199403646748	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Tin foil, r0.namespace: reverb, r0.arg2: Asda, r0.rel: can be recycled at) => Tin foil; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Tin foil, r0.namespace: reverb, r0.arg2: Asda, r0.rel: can be recycled at) => Tin foil
What is the aim and objective for asda?	clarins	3555.5135131695356	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Clarins, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is threatening legal action against) => Clarins; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Clarins, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is threatening legal action against) => Clarins
What is the aim and objective for asda?	david cameron	3555.5135131695356	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: David Cameron, r0.namespace: reverb, r0.arg2: Asda, r0.rel: might be spotted shopping in) => David Cameron; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: David Cameron, r0.namespace: reverb, r0.arg2: Asda, r0.rel: might be spotted shopping in) => David Cameron
What is the aim and objective for asda?	1st august 2010	3554.920556309336	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the 1st August 2010, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was) => the 1st August 2010; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the 1st August 2010, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was) => the 1st August 2010
What is the aim and objective for asda?	vouchers	3554.8009230234297	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The vouchers, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are for) => The vouchers; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The vouchers, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are for) => The vouchers
What is the aim and objective for asda?	service	3554.7777851209285	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the service, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is being included for) => the service; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the service, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is being included for) => the service
What is the aim and objective for asda?	best rates	3554.761258047713	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the best rates, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is a first for) => the best rates; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the best rates, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is a first for) => the best rates
What is the aim and objective for asda?	beers	3554.761258047713	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the beers, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: are all brewed for) => the beers; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the beers, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: are all brewed for) => the beers
What is the aim and objective for asda?	katie sowa	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Katie Sowa, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is) => Katie Sowa; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Katie Sowa, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is) => Katie Sowa
What is the aim and objective for asda?	main competitors	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The main competitors, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => The main competitors; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The main competitors, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => The main competitors
What is the aim and objective for asda?	uk wal mart	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the uk Wal mart, r0.namespace: reverb, r0.arg2: asda, r0.rel: is) => the uk Wal mart; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the uk Wal mart, r0.namespace: reverb, r0.arg2: asda, r0.rel: is) => the uk Wal mart
What is the aim and objective for asda?	worst offender	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The worst offender, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: was) => The worst offender; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The worst offender, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: was) => The worst offender
What is the aim and objective for asda?	asda foundation	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The Asda Foundation, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => The Asda Foundation; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The Asda Foundation, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => The Asda Foundation
What is the aim and objective for asda?	highly competitive personal loans sector	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the highly competitive personal loans sector, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => the highly competitive personal loans sector; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the highly competitive personal loans sector, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => the highly competitive personal loans sector
What is the aim and objective for asda?	successful	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: successful, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was) => successful; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: successful, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was) => successful
What is the aim and objective for asda?	year award	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the Year award, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was) => the Year award; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the Year award, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was) => the Year award
What is the aim and objective for asda?	case	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the case, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were) => the case; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the case, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were) => the case
What is the aim and objective for asda?	name	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: name, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => name; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: name, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => name
What is the aim and objective for asda?	best	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: best, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => best; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: best, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => best
What is the aim and objective for asda?	board	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: board, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => board; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: board, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => board
What is the aim and objective for asda?	moment	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the moment, r0.namespace: reverb, r0.arg2: asda, r0.rel: is) => the moment; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the moment, r0.namespace: reverb, r0.arg2: asda, r0.rel: is) => the moment
What is the aim and objective for asda?	more prominent operators	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the more prominent operators, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were) => the more prominent operators; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the more prominent operators, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were) => the more prominent operators
What is the aim and objective for asda?	belly-up	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: belly-up, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => belly-up; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: belly-up, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => belly-up
What is the aim and objective for asda?	farmers spain	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: FARMERS Spain, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => FARMERS Spain; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: FARMERS Spain, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => FARMERS Spain
What is the aim and objective for asda?	cheapest price	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the cheapest price, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => the cheapest price; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the cheapest price, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => the cheapest price
What is the aim and objective for asda?	cheapest physical shop	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The cheapest physical shop, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => The cheapest physical shop; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The cheapest physical shop, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is) => The cheapest physical shop
What is the aim and objective for asda?	retailers	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the retailers, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were) => the retailers; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the retailers, r0.namespace: reverb, r0.arg2: Asda, r0.rel: were) => the retailers
What is the aim and objective for asda?	major ones	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The other major ones, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => The other major ones; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The other major ones, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => The other major ones
What is the aim and objective for asda?	list questions	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: List Of Questions, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => List Of Questions; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: List Of Questions, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are) => List Of Questions
What is the aim and objective for asda?	conference	3554.7546472184267	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the conference, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: was) => the conference; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the conference, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: was) => the conference
What is the aim and objective for asda?	cardi	3554.7392219500925	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The cardi, r0.namespace: reverb, r0.arg2: Asda, r0.rel: Is from) => The cardi; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The cardi, r0.namespace: reverb, r0.arg2: Asda, r0.rel: Is from) => The cardi
What is the aim and objective for asda?	last call	3554.7392219500925	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Last call, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was to) => Last call; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Last call, r0.namespace: reverb, r0.arg2: Asda, r0.rel: was to) => Last call
What is the aim and objective for asda?	uk	3554.7392219500925	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the UK, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is at) => the UK; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: the UK, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is at) => the UK
What is the aim and objective for asda?	revstu	3554.7392219500925	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: RevStu, r0.namespace: reverb, r0.arg2: Asda, r0.rel: Was in) => RevStu; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: RevStu, r0.namespace: reverb, r0.arg2: Asda, r0.rel: Was in) => RevStu
What is the aim and objective for asda?	mum	3554.7392219500925	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: mum, r0.namespace: reverb, r0.arg2: asda, r0.rel: was in) => mum; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: mum, r0.namespace: reverb, r0.arg2: asda, r0.rel: was in) => mum
What is the aim and objective for asda?	campaigning groups	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The campaigning groups, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are calling on) => The campaigning groups; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The campaigning groups, r0.namespace: reverb, r0.arg2: Asda, r0.rel: are calling on) => The campaigning groups
What is the aim and objective for asda?	entries	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: entries, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is given by) => entries; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: entries, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is given by) => entries
What is the aim and objective for asda?	ayub	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Ayub, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is seen wearing) => Ayub; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Ayub, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is seen wearing) => Ayub
What is the aim and objective for asda?	yeo valley?s children?s range	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Yeo Valley?s children?s range, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is available in) => Yeo Valley?s children?s range; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Yeo Valley?s children?s range, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is available in) => Yeo Valley?s children?s range
What is the aim and objective for asda?	'very clever cheese	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: a 'very clever cheese, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is available at) => a 'very clever cheese; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: a 'very clever cheese, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is available at) => a 'very clever cheese
What is the aim and objective for asda?	highbridge	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Highbridge, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is dominated by) => Highbridge; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Highbridge, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is dominated by) => Highbridge
What is the aim and objective for asda?	one won?t	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: one won?t, r0.namespace: reverb, r0.arg2: Asda, r0.rel: be shopping at) => one won?t; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: one won?t, r0.namespace: reverb, r0.arg2: Asda, r0.rel: be shopping at) => one won?t
What is the aim and objective for asda?	cattle section	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The cattle section, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is sponsored by) => The cattle section; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: The cattle section, r0.namespace: reverb, r0.arg2: Asda, r0.rel: is sponsored by) => The cattle section
What is the aim and objective for asda?	zap-it	3554.728203901282	what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Zap-It, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is available in) => Zap-It; what be the aim for asda ? => $x: ($x, be the aim for, asda) => $x: ($x, be, asda) => (r0.arg1: Zap-It, r0.namespace: reverb, r0.arg2: ASDA, r0.rel: is available in) => Zap-It
Why does frogs burp?	yellow tadpole	9030.332129975191	what make frog burp ? => $x: ($x, make, frog burp) => $x: ($x, make, frog burp) => (r0.arg1: Each yellow tadpole, r0.namespace: reverb, r0.arg2: the frog burp, r0.rel: makes) => Each yellow tadpole
Why does frogs burp?	frog	9030.332129975191	what make frog burp ? => $x: ($x, make, frog burp) => $x: ($x, make, frog burp) => (r0.arg1: the frog, r0.namespace: reverb, r0.arg2: the frog burp, r0.rel: made) => the frog
What responsibilities did john jay have?	federalist papers	7063.059529360819	what be john jay be responsible for ? => $x: (john jay, be responsible for, $x) => $x: (john jay, be responsible for, $x) => (r0.arg1: John Jay, r0.namespace: reverb, r0.arg2: the Federalist Papers, r0.rel: were responsible for writing) => the Federalist Papers; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Federalist Papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => the Federalist Papers; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Federalist papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were written by) => The Federalist papers; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Federalist Papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => the Federalist Papers; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Federalist papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were written by) => The Federalist papers; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Federalist Papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => the Federalist Papers; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Federalist papers, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were written by) => The Federalist papers
What responsibilities did john jay have?	throws	7063.059529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Throws, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Throws; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Throws, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Throws; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Throws, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Throws
What responsibilities did john jay have?	new york	7063.059529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: New York, r0.namespace: reverb, r0.arg2: JOHN JAY, r0.rel: is) => New York; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: New York, r0.namespace: reverb, r0.arg2: JOHN JAY, r0.rel: is) => New York; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: New York, r0.namespace: reverb, r0.arg2: JOHN JAY, r0.rel: is) => New York
What responsibilities did john jay have?	columbia university	7062.966977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Columbia University, r0.namespace: reverb, r0.arg2: John Jay Scholars, r0.rel: are designated) => Columbia University; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Columbia University, r0.namespace: reverb, r0.arg2: John Jay Scholars, r0.rel: are designated) => Columbia University; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Columbia University, r0.namespace: reverb, r0.arg2: John Jay Scholars, r0.rel: are designated) => Columbia University
What responsibilities did john jay have?	priests	7062.966977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: priests, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is) => priests; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: priests, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is) => priests; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: priests, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is) => priests
What responsibilities did john jay have?	prayer	7062.966977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: prayer, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was opposed by) => prayer; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: prayer, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was opposed by) => prayer; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: prayer, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was opposed by) => prayer
What responsibilities did john jay have?	obama	7062.966977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Obama, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was anticipated by) => Obama; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Obama, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was anticipated by) => Obama; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Obama, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was anticipated by) => Obama
What responsibilities did john jay have?	southern states	7062.966977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Southern states, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was over whether) => Southern states; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Southern states, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was over whether) => Southern states; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Southern states, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was over whether) => Southern states
What responsibilities did john jay have?	town	7062.966977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is named after) => The town; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is named after) => The town; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The town, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is named after) => The town
What responsibilities did john jay have?	chomsky	7062.943839848312	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Chomsky, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is fond of quoting) => Chomsky; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Chomsky, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is fond of quoting) => Chomsky; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Chomsky, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is fond of quoting) => Chomsky; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Chomsky, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is fond of quoting) => Chomsky; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Chomsky, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is fond of quoting) => Chomsky
What responsibilities did john jay have?	program	7062.943839848312	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the program, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: are held at) => the program; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the program, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: are held at) => the program; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the program, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: are held at) => the program
What responsibilities did john jay have?	wac	7062.943839848312	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: WAC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: has been designed at) => WAC; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: WAC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: has been designed at) => WAC; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: WAC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: has been designed at) => WAC
What responsibilities did john jay have?	george clinton	7062.927312775097	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: George Clinton, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a political opponent of) => George Clinton; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: George Clinton, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a political opponent of) => George Clinton; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: George Clinton, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a political opponent of) => George Clinton; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: George Clinton, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a political opponent of) => George Clinton; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: George Clinton, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a political opponent of) => George Clinton
What responsibilities did john jay have?	thurgood marshall	7062.927312775097	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Thurgood Marshall, r0.namespace: reverb, r0.arg2: John Jays, r0.rel: there have been dozens of) => Thurgood Marshall; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Thurgood Marshall, r0.namespace: reverb, r0.arg2: John Jays, r0.rel: there have been dozens of) => Thurgood Marshall; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Thurgood Marshall, r0.namespace: reverb, r0.arg2: John Jays, r0.rel: there have been dozens of) => Thurgood Marshall; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Thurgood Marshall, r0.namespace: reverb, r0.arg2: John Jays, r0.rel: there have been dozens of) => Thurgood Marshall; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Thurgood Marshall, r0.namespace: reverb, r0.arg2: John Jays, r0.rel: there have been dozens of) => Thurgood Marshall
What responsibilities did john jay have?	friday	7062.332886841723	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Friday, r0.namespace: reverb, r0.arg2: former Jay John Mayberry, r0.rel: was) => Friday; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Friday, r0.namespace: reverb, r0.arg2: former Jay John Mayberry, r0.rel: was) => Friday; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Friday, r0.namespace: reverb, r0.arg2: former Jay John Mayberry, r0.rel: was) => Friday
What responsibilities did john jay have?	conspiracies	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: conspiracies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => conspiracies; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: conspiracies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => conspiracies; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: conspiracies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => conspiracies
What responsibilities did john jay have?	szendro?s home college	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Szendro?s home college, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Szendro?s home college; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Szendro?s home college, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Szendro?s home college; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Szendro?s home college, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => Szendro?s home college
What responsibilities did john jay have?	scholarship service award	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Scholarship and Service Award, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the Scholarship and Service Award; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Scholarship and Service Award, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the Scholarship and Service Award; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Scholarship and Service Award, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the Scholarship and Service Award
What responsibilities did john jay have?	supreme court	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Supreme Court, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the Supreme Court; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Supreme Court, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the Supreme Court; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Supreme Court, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the Supreme Court
What responsibilities did john jay have?	vikings	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Vikings, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => The Vikings; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Vikings, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => The Vikings; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Vikings, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were) => The Vikings
What responsibilities did john jay have?	united states	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the United States; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was organized with) => the United States; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the United States; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was organized with) => the United States; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => the United States; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the United States, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was organized with) => the United States
What responsibilities did john jay have?	show	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the show, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the show; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the show, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the show; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the show, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is) => the show
What responsibilities did john jay have?	first chief justice	7062.259529360819	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: openie4, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay?one, r0.rel: was) => The first chief justice; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: openie4, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay?one, r0.rel: was) => The first chief justice; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: openie4, r0.arg2: John Jay, r0.rel: was) => The first chief justice; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The first chief justice, r0.namespace: reverb, r0.arg2: John Jay?one, r0.rel: was) => The first chief justice
What responsibilities did john jay have?	child	7062.201684604565	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the child, r0.namespace: reverb, r0.arg2: John Jay Melendez, r0.rel: is) => the child; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the child, r0.namespace: reverb, r0.arg2: John Jay Melendez, r0.rel: is) => the child; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the child, r0.namespace: reverb, r0.arg2: John Jay Melendez, r0.rel: is) => the child
What responsibilities did john jay have?	sale	7062.201684604565	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the sale, r0.namespace: reverb, r0.arg2: John Jay Pittman, r0.rel: were) => the sale; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the sale, r0.namespace: reverb, r0.arg2: John Jay Pittman, r0.rel: were) => the sale; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the sale, r0.namespace: reverb, r0.arg2: John Jay Pittman, r0.rel: were) => the sale
What responsibilities did john jay have?	criminologist	7062.201684604565	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the other criminologist, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is) => the other criminologist; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the other criminologist, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is) => the other criminologist; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the other criminologist, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is) => the other criminologist
What responsibilities did john jay have?	work study students	7062.201684604565	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Work Study Students, r0.namespace: reverb, r0.arg2: John Jay students, r0.rel: are) => Work Study Students; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Work Study Students, r0.namespace: reverb, r0.arg2: John Jay students, r0.rel: are) => Work Study Students; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Work Study Students, r0.namespace: reverb, r0.arg2: John Jay students, r0.rel: are) => Work Study Students
What responsibilities did john jay have?	marvelously favorable	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: marvelously favorable, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were set by) => marvelously favorable; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: marvelously favorable, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were set by) => marvelously favorable; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: marvelously favorable, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were set by) => marvelously favorable
What responsibilities did john jay have?	america	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was described by) => America; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was described by) => America; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: America, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was described by) => America
What responsibilities did john jay have?	college	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the college, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: was renamed) => the college; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the college, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: was renamed) => the college; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the college, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: was renamed) => the college
What responsibilities did john jay have?	criminal justice studies	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: criminal justice studies, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is) => criminal justice studies; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: criminal justice studies, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is) => criminal justice studies; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: criminal justice studies, r0.namespace: reverb, r0.arg2: the John Jay College, r0.rel: is) => criminal justice studies
What responsibilities did john jay have?	founders	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Founders, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were Christian like) => the Founders; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Founders, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were Christian like) => the Founders; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Founders, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: were Christian like) => the Founders
What responsibilities did john jay have?	u.s. constitution	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the U.S. Constitution, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was held by) => the U.S. Constitution; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the U.S. Constitution, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was held by) => the U.S. Constitution; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the U.S. Constitution, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was held by) => the U.S. Constitution
What responsibilities did john jay have?	rye	7062.166977750813	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: the places John Jay, r0.rel: is one of) => Rye; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: the places John Jay, r0.rel: is one of) => Rye; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was home to) => Rye; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: the places John Jay, r0.rel: is one of) => Rye; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was home to) => Rye; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: the places John Jay, r0.rel: is one of) => Rye; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was home to) => Rye; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Rye, r0.namespace: reverb, r0.arg2: the places John Jay, r0.rel: is one of) => Rye
What responsibilities did john jay have?	emergency response studies	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Emergency Response Studies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is here at) => Emergency Response Studies; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Emergency Response Studies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is here at) => Emergency Response Studies; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Emergency Response Studies, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is here at) => Emergency Response Studies
What responsibilities did john jay have?	changing times	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the changing times, r0.namespace: reverb, r0.arg2: authors John Jay Harper, r0.rel: are) => the changing times; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the changing times, r0.namespace: reverb, r0.arg2: authors John Jay Harper, r0.rel: are) => the changing times; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the changing times, r0.namespace: reverb, r0.arg2: authors John Jay Harper, r0.rel: are) => the changing times
What responsibilities did john jay have?	institute	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Institute, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was named for) => The Institute; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Institute, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was named for) => The Institute; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The Institute, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was named for) => The Institute
What responsibilities did john jay have?	edmonds	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Edmonds, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is waiting for) => Edmonds; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Edmonds, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is waiting for) => Edmonds; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Edmonds, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is waiting for) => Edmonds
What responsibilities did john jay have?	presentation	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The presentation, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was made by) => The presentation; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The presentation, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was made by) => The presentation; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The presentation, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was made by) => The presentation
What responsibilities did john jay have?	treaty	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The treaty, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was signed by) => The treaty; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: The treaty, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was signed by) => The treaty; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: The treaty, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was signed by) => The treaty
What responsibilities did john jay have?	better teaching seminars	7062.166977750813	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Better Teaching Seminars, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: are knowledgeable about) => the Better Teaching Seminars; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Better Teaching Seminars, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: are knowledgeable about) => the Better Teaching Seminars; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the Better Teaching Seminars, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: are knowledgeable about) => the Better Teaching Seminars
What responsibilities did john jay have?	deal	7062.1438398483115	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the deal, r0.namespace: reverb, r0.arg2: John Jay High School, r0.rel: was with) => the deal; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the deal, r0.namespace: reverb, r0.arg2: John Jay High School, r0.rel: was with) => the deal; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the deal, r0.namespace: reverb, r0.arg2: John Jay High School, r0.rel: was with) => the deal
What responsibilities did john jay have?	foregoing	7062.1438398483115	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the foregoing, r0.namespace: reverb, r0.arg2: John Jay Fossett, r0.rel: was served upon) => the foregoing; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the foregoing, r0.namespace: reverb, r0.arg2: John Jay Fossett, r0.rel: was served upon) => the foregoing; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the foregoing, r0.namespace: reverb, r0.arg2: John Jay Fossett, r0.rel: was served upon) => the foregoing
What responsibilities did john jay have?	abdul-aziz hassan	7062.1438398483115	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Abdul-Aziz Hassan, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is student at) => Abdul-Aziz Hassan; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Abdul-Aziz Hassan, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is student at) => Abdul-Aziz Hassan; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Abdul-Aziz Hassan, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is student at) => Abdul-Aziz Hassan
What responsibilities did john jay have?	new ad hoc	7062.1438398483115	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the new ad hoc, r0.namespace: reverb, r0.arg2: lerner and john jay, r0.rel: is in) => the new ad hoc; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the new ad hoc, r0.namespace: reverb, r0.arg2: lerner and john jay, r0.rel: is in) => the new ad hoc; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the new ad hoc, r0.namespace: reverb, r0.arg2: lerner and john jay, r0.rel: is in) => the new ad hoc
What responsibilities did john jay have?	ralph	7062.1438398483115	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Ralph, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is a resident of) => Ralph; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Ralph, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is a resident of) => Ralph; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Ralph, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is a resident of) => Ralph; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Ralph, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is a resident of) => Ralph; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Ralph, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: is a resident of) => Ralph
What responsibilities did john jay have?	alc	7062.1438398483115	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the ALC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: should be removed from) => the ALC; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: the ALC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: should be removed from) => the ALC; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: the ALC, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: should be removed from) => the ALC
What responsibilities did john jay have?	mr. mahoney	7062.1438398483115	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Mr. Mahoney, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a graduate of) => Mr. Mahoney; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Mr. Mahoney, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a graduate of) => Mr. Mahoney; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Mr. Mahoney, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a graduate of) => Mr. Mahoney; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Mr. Mahoney, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a graduate of) => Mr. Mahoney; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Mr. Mahoney, r0.namespace: reverb, r0.arg2: John Jay, r0.rel: was a graduate of) => Mr. Mahoney
What responsibilities did john jay have?	karthik venkatraj	7062.1438398483115	what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Karthik Venkatraj, r0.namespace: reverb, r0.arg2: a John Jay Fellowship, r0.rel: is completing) => Karthik Venkatraj; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Karthik Venkatraj, r0.namespace: reverb, r0.arg2: a John Jay Fellowship, r0.rel: is completing) => Karthik Venkatraj; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Karthik Venkatraj, r0.namespace: reverb, r0.arg2: a John Jay Fellowship, r0.rel: is completing) => Karthik Venkatraj
What responsibilities did john jay have?	jeremy travis	7062.1438398483115	what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Jeremy Travis, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is president of) => Jeremy Travis; what be the responsability of john jay ? => $x: ($x, be the responsability of, john jay) => $x: ($x, be of, john jay) => (r0.arg1: Jeremy Travis, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is president of) => Jeremy Travis; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Jeremy Travis, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is president of) => Jeremy Travis; what be the responsibilite of john jay ? => $x: ($x, be the responsibilite of, john jay) => $x: ($x, be, john jay) => (r0.arg1: Jeremy Travis, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is president of) => Jeremy Travis; what be john jay ? => $x: ($x, be, john jay) => $x: ($x, be, john jay) => (r0.arg1: Jeremy Travis, r0.namespace: reverb, r0.arg2: John Jay College, r0.rel: is president of) => Jeremy Travis
What are the pros and cons of playing basketball?	sunday	6062.231795236175	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunday, r0.namespace: reverb, r0.arg2: church ? and basketball playing, r0.rel: was mostly) => Sunday
What are the pros and cons of playing basketball?	school	6062.112161950268	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: school, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is) => school; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: School, r0.namespace: reverb, r0.arg2: There Playing Basketball, r0.rel: Were In) => School
What are the pros and cons of playing basketball?	utah	6062.095634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: good basketball plays, r0.rel: were) => Utah
What are the pros and cons of playing basketball?	portable application	6062.095634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Portable application, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: were burning) => Portable application
What are the pros and cons of playing basketball?	boys	6062.095634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the other boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => the other boys; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The boys, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: were) => The boys; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the boys, r0.namespace: reverb, r0.arg2: all playing basketball, r0.rel: were) => the boys
What are the pros and cons of playing basketball?	tod	6062.083239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Tod, r0.namespace: reverb, r0.arg2: church playing basketball, r0.rel: was at) => Tod
What are the pros and cons of playing basketball?	students	6062.083239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: were too) => Students
What are the pros and cons of playing basketball?	nate	6062.073598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Nate, r0.namespace: reverb, r0.arg2: the driveway playing basketball, r0.rel: was in) => Nate
What are the pros and cons of playing basketball?	lili	6062.065886145265	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Lili, r0.namespace: reverb, r0.arg2: the block playing basketball, r0.rel: was already down) => Lili
What are the pros and cons of playing basketball?	sleepers	6062.065886145265	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: sleepers, r0.namespace: reverb, r0.arg2: TV and play basketball, r0.rel: are awake on) => sleepers
What are the pros and cons of playing basketball?	defenders	6062.054317194014	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Defenders, r0.namespace: reverb, r0.arg2: non-basketball plays, r0.rel: are making) => Defenders
What are the pros and cons of playing basketball?	1998	6061.478071041178	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 1998, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is) => 1998
What are the pros and cons of playing basketball?	june weddings	6061.408657333674	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June Weddings, r0.namespace: reverb, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June Weddings; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: June weddings, r0.namespace: openie4, r0.arg2: basketball play-offs, r0.rel: would be scheduled around) => June weddings
What are the pros and cons of playing basketball?	everyday	6061.312161950268	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: everyday, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: are) => everyday
What are the pros and cons of playing basketball?	bluford high	6061.312161950268	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bluford High, r0.namespace: reverb, r0.arg2: play Basketball, r0.rel: is) => Bluford High
What are the pros and cons of playing basketball?	15-year old witness	6061.295634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The 15-year old witness, r0.namespace: reverb, r0.arg2: outside playing basketball, r0.rel: was) => The 15-year old witness
What are the pros and cons of playing basketball?	sam kady	6061.295634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sam and Kady, r0.namespace: reverb, r0.arg2: both playing basketball, r0.rel: are) => Sam and Kady
What are the pros and cons of playing basketball?	help	6061.295634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: help, r0.namespace: reverb, r0.arg2: Apocalypse Basketball Play, r0.rel: Be) => help
What are the pros and cons of playing basketball?	mood	6061.295634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the mood, r0.namespace: reverb, r0.arg2: unattractive play basketball, r0.rel: is) => the mood
What are the pros and cons of playing basketball?	campus	6061.295634877053	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: campus, r0.namespace: reverb, r0.arg2: those playing basketball, r0.rel: were) => campus
What are the pros and cons of playing basketball?	gym	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The gym, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: is open to) => The gym
What are the pros and cons of playing basketball?	bounds play 1	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 1, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 1
What are the pros and cons of playing basketball?	emphasis	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Emphasis, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: will be on) => Emphasis
What are the pros and cons of playing basketball?	basket	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the basket, r0.namespace: reverb, r0.arg2: a good basketball play, r0.rel: is) => the basket
What are the pros and cons of playing basketball?	very kids	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the very kids, r0.namespace: reverb, r0.arg2: humiliated playing basketball, r0.rel: are always) => the very kids
What are the pros and cons of playing basketball?	deviantart details	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: deviantART Details, r0.namespace: reverb, r0.arg2: Tiny playing basketball, r0.rel: Here is) => deviantART Details
What are the pros and cons of playing basketball?	gym?	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketball, r0.rel: is actually) => the gym?; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the gym?, r0.namespace: reverb, r0.arg2: Obama playing basketballs, r0.rel: is one of) => the gym?
What are the pros and cons of playing basketball?	11 eyewitnesses	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: 11 eyewitnesses, r0.namespace: reverb, r0.arg2: Camm playing basketball, r0.rel: were with) => 11 eyewitnesses
What are the pros and cons of playing basketball?	last night andy	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Last night Andy, r0.namespace: reverb, r0.arg2: late playing basketball, r0.rel: was out) => Last night Andy
What are the pros and cons of playing basketball?	bounds play 3	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bounds Play 3, r0.namespace: reverb, r0.arg2: an effective basketball play, r0.rel: is) => Bounds Play 3
What are the pros and cons of playing basketball?	offseason	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the offseason, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: was n?t incurred) => the offseason
What are the pros and cons of playing basketball?	perry jones	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Perry Jones, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is good at) => Perry Jones
What are the pros and cons of playing basketball?	children	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: The children, r0.namespace: reverb, r0.arg2: all playing basketball outside, r0.rel: were) => The children
What are the pros and cons of playing basketball?	daniel	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Daniel, r0.namespace: reverb, r0.arg2: busy playing basketball, r0.rel: has been) => Daniel
What are the pros and cons of playing basketball?	dribble hand offs	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: dribble hand offs, r0.namespace: reverb, r0.arg2: a basic basketball play, r0.rel: are) => dribble hand offs
What are the pros and cons of playing basketball?	greg	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Greg, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Greg
What are the pros and cons of playing basketball?	rose	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Rose, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Rose
What are the pros and cons of playing basketball?	shoes	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the shoes, r0.namespace: reverb, r0.arg2: basketball play, r0.rel: are fit for) => the shoes
What are the pros and cons of playing basketball?	alumni	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: alumni, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => alumni
What are the pros and cons of playing basketball?	kenny	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Kenny, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can be found) => Kenny
What are the pros and cons of playing basketball?	bostic	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Bostic, r0.namespace: reverb, r0.arg2: Japan playing basketball, r0.rel: is in) => Bostic
What are the pros and cons of playing basketball?	church	6061.283239572141	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: a church, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: is similar to) => a church
What are the pros and cons of playing basketball?	said rageah	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Said Rageah, r0.namespace: reverb, r0.arg2: playing basketball, r0.rel: can sometimes be found) => Said Rageah
What are the pros and cons of playing basketball?	duke blue devils	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: the Duke Blue Devils, r0.namespace: reverb, r0.arg2: their basketball plays, r0.rel: is to limit) => the Duke Blue Devils
What are the pros and cons of playing basketball?	poor kids	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Poor kids, r0.namespace: reverb, r0.arg2: rec camp playing basketball, r0.rel: are in) => Poor kids
What are the pros and cons of playing basketball?	crona	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: crona, r0.namespace: reverb, r0.arg2: the basketball court playing, r0.rel: was at) => crona
What are the pros and cons of playing basketball?	vinze	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Vinze, r0.namespace: reverb, r0.arg2: a blast playing basketball, r0.rel: is having) => Vinze
What are the pros and cons of playing basketball?	air jorda retro	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Air jorda retro, r0.namespace: reverb, r0.arg2: play basketball, r0.rel: is very suitable for) => Air jorda retro
What are the pros and cons of playing basketball?	sunnyvale california	6061.273598779432	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Sunnyvale California, r0.namespace: reverb, r0.arg2: Lebron James playing basketball, r0.rel: is like) => Sunnyvale California
What are the pros and cons of playing basketball?	joylin	6061.265886145265	what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin; what be some pro for play basketball ? => $x: ($x, be some pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin; what be the pro on play basketball ? => $x: ($x, be the pro on, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin; what be pro for play basketball ? => $x: ($x, be pro for, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin; what be pro about play basketball ? => $x: ($x, be pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin; what be some pro about play basketball ? => $x: ($x, be some pro about, play basketball) => $x: ($x, be, play basketball) => (r0.arg1: Joylin, r0.namespace: reverb, r0.arg2: a tomboy? playing basketball, r0.rel: has always been) => Joylin
Is a ostrich a vertebrates?	boehner	9986.612383895404	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Boehner, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => Boehner; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Boehner, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => Boehner; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Boehner, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => Boehner
Is a ostrich a vertebrates?	traditional media	9986.612383895404	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: traditional media, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are) => traditional media; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: traditional media, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are) => traditional media; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: traditional media, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are) => traditional media
Is a ostrich a vertebrates?	consumers	9986.612383895404	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: consumers, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => consumers; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: consumers, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => consumers; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: consumers, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => consumers
Is a ostrich a vertebrates?	earth	9986.612383895404	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: earth, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => earth; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: earth, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => earth; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: earth, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => earth
Is a ostrich a vertebrates?	rabbit	9986.573820724569	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Rabbit, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is to) => Rabbit; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Rabbit, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is to) => Rabbit; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Rabbit, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is to) => Rabbit
Is a ostrich a vertebrates?	water	9986.550682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Water, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is necessary for) => Water; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Water, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is necessary for) => Water; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Water, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is necessary for) => Water
Is a ostrich a vertebrates?	oudtshoorn	9986.550682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Oudtshoorn, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is ok for) => Oudtshoorn; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Oudtshoorn, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is ok for) => Oudtshoorn; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Oudtshoorn, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is ok for) => Oudtshoorn
Is a ostrich a vertebrates?	governments	9986.550682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Governments, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are behaving like) => Governments; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Governments, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are behaving like) => Governments; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Governments, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are behaving like) => Governments
Is a ostrich a vertebrates?	windows 7	9986.550682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Windows 7, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: NOW are like) => Windows 7; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Windows 7, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: NOW are like) => Windows 7; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Windows 7, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: NOW are like) => Windows 7
Is a ostrich a vertebrates?	masses	9986.535257553733	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the masses, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: have decided to be) => the masses; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the masses, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: have decided to be) => the masses; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the masses, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: have decided to be) => the masses
Is a ostrich a vertebrates?	avian flu	9986.535257553733	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: avian flu, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: has been detected in) => avian flu; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: avian flu, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: has been detected in) => avian flu; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: avian flu, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: has been detected in) => avian flu
Is a ostrich a vertebrates?	island	9986.535257553733	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: The island, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is impossibly populated by) => The island; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The island, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is impossibly populated by) => The island; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The island, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is impossibly populated by) => The island
Is a ostrich a vertebrates?	leather	9986.535257553733	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: leather, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: can be made in) => leather; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: leather, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: can be made in) => leather; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: leather, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: can be made in) => leather
Is a ostrich a vertebrates?	feed	9986.535257553733	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: feed, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is specially formulated for) => feed; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: feed, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is specially formulated for) => feed; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: feed, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is specially formulated for) => feed
Is a ostrich a vertebrates?	emus	9986.524239504923	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Emus, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are much more docile than) => Emus; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Emus, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are much more docile than) => Emus; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Emus, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are much more docile than) => Emus
Is a ostrich a vertebrates?	love dish	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: a love dish, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: are) => a love dish; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: a love dish, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: are) => a love dish; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: a love dish, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: are) => a love dish
Is a ostrich a vertebrates?	ground	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the ground, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => the ground; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the ground, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => the ground; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the ground, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => the ground
Is a ostrich a vertebrates?	iva?s	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: IVA?s, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is) => IVA?s; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: IVA?s, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is) => IVA?s; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: IVA?s, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is) => IVA?s
Is a ostrich a vertebrates?	seats	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the seats, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: are) => the seats; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the seats, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: are) => the seats; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the seats, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: are) => the seats
Is a ostrich a vertebrates?	4:00 pm	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: 4:00 PM, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => 4:00 PM; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 4:00 PM, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => 4:00 PM; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 4:00 PM, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => 4:00 PM
Is a ostrich a vertebrates?	consensus	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the consensus, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is) => the consensus; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the consensus, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is) => the consensus; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the consensus, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is) => the consensus
Is a ostrich a vertebrates?	12:00 pm	9985.812383895405	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: 12:00 PM, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => 12:00 PM; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 12:00 PM, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => 12:00 PM; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 12:00 PM, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are) => 12:00 PM
Is a ostrich a vertebrates?	nearby farmers	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: nearby farmers, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are raising) => nearby farmers; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: nearby farmers, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are raising) => nearby farmers; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: nearby farmers, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are raising) => nearby farmers
Is a ostrich a vertebrates?	canadians	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Canadians, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are like) => Canadians; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Canadians, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are like) => Canadians; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Canadians, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are like) => Canadians
Is a ostrich a vertebrates?	ladies	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the ladies, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: were like) => the ladies; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the ladies, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: were like) => the ladies; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the ladies, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: were like) => the ladies
Is a ostrich a vertebrates?	seat	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: The seat, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is handcrafted) => The seat; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The seat, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is handcrafted) => The seat; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The seat, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is handcrafted) => The seat
Is a ostrich a vertebrates?	danah	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Danah, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is going) => Danah; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Danah, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is going) => Danah; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Danah, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is going) => Danah
Is a ostrich a vertebrates?	singaporeans	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Singaporeans, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are like) => Singaporeans; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Singaporeans, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are like) => Singaporeans; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Singaporeans, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: are like) => Singaporeans
Is a ostrich a vertebrates?	turn	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: were approximating) => turn; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: were approximating) => turn; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: turn, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: were approximating) => turn
Is a ostrich a vertebrates?	farmer	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: A farmer, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was breeding) => A farmer; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: A farmer, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was breeding) => A farmer; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: A farmer, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was breeding) => A farmer
Is a ostrich a vertebrates?	dems	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Dems, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are like) => Dems; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Dems, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are like) => Dems; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Dems, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are like) => Dems
Is a ostrich a vertebrates?	american ostrich association	9985.77382072457	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the American Ostrich Association, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are raising) => the American Ostrich Association; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the American Ostrich Association, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are raising) => the American Ostrich Association; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the American Ostrich Association, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are raising) => the American Ostrich Association
Is a ostrich a vertebrates?	same	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the same, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was true of) => the same; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the same, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was true of) => the same; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the same, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was true of) => the same
Is a ostrich a vertebrates?	north sewickley	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: North Sewickley, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is home to) => North Sewickley; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: North Sewickley, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is home to) => North Sewickley; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: North Sewickley, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is home to) => North Sewickley
Is a ostrich a vertebrates?	largest	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is related to) => the largest; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is related to) => the largest; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the largest, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is related to) => the largest
Is a ostrich a vertebrates?	500 bird species	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: 500 bird species, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are recorded including) => 500 bird species; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 500 bird species, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are recorded including) => 500 bird species; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 500 bird species, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are recorded including) => 500 bird species
Is a ostrich a vertebrates?	flu	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the flu, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was detected in) => the flu; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the flu, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was detected in) => the flu; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the flu, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: was detected in) => the flu
Is a ostrich a vertebrates?	team	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: The team, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: is back with) => The team; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The team, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: is back with) => The team; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The team, r0.namespace: reverb, r0.arg2: Ostriches, r0.rel: is back with) => The team
Is a ostrich a vertebrates?	feather capital	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the feather capital, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is synonymous with) => the feather capital; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the feather capital, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is synonymous with) => the feather capital; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the feather capital, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is synonymous with) => the feather capital
Is a ostrich a vertebrates?	man	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is bereft of) => a man; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is bereft of) => a man; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: a man, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: is bereft of) => a man
Is a ostrich a vertebrates?	so many people	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: so many people, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are behaving like) => so many people; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: so many people, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are behaving like) => so many people; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: so many people, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: are behaving like) => so many people
Is a ostrich a vertebrates?	only inhabitants	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the only inhabitants, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: seemed to be) => the only inhabitants; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the only inhabitants, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: seemed to be) => the only inhabitants; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the only inhabitants, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: seemed to be) => the only inhabitants
Is a ostrich a vertebrates?	collection	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the collection, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: was heavy on) => the collection; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the collection, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: was heavy on) => the collection; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the collection, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: was heavy on) => the collection
Is a ostrich a vertebrates?	anthelminthics	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: no anthelminthics, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are approved for) => no anthelminthics; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: no anthelminthics, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are approved for) => no anthelminthics; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: no anthelminthics, r0.namespace: reverb, r0.arg2: ostrich, r0.rel: are approved for) => no anthelminthics
Is a ostrich a vertebrates?	two	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Two, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is to go) => Two; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Two, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is to go) => Two; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Two, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is to go) => Two
Is a ostrich a vertebrates?	vitamin mineral premix	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the vitamin and mineral premix, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is designed for) => the vitamin and mineral premix; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the vitamin and mineral premix, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is designed for) => the vitamin and mineral premix; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the vitamin and mineral premix, r0.namespace: reverb, r0.arg2: Ostrich, r0.rel: is designed for) => the vitamin and mineral premix
Is a ostrich a vertebrates?	farm	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: The farm, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is stocked with) => The farm; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The farm, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is stocked with) => The farm; what do a ostrich a have ? => $x: (a ostrich a, have, $x) => $x: (ostrich, have, $x) => (r0.arg1: Ostrich, r0.namespace: openie4, r0.arg2: a farm, r0.rel: Having) => a farm; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: The farm, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is stocked with) => The farm
Is a ostrich a vertebrates?	electrical stunning	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: Electrical stunning, r0.namespace: reverb, r0.arg2: OSTRICH, r0.rel: is accepted for) => Electrical stunning; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Electrical stunning, r0.namespace: reverb, r0.arg2: OSTRICH, r0.rel: is accepted for) => Electrical stunning; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: Electrical stunning, r0.namespace: reverb, r0.arg2: OSTRICH, r0.rel: is accepted for) => Electrical stunning
Is a ostrich a vertebrates?	14 %	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: 14 %, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: appear to be) => 14 %; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 14 %, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: appear to be) => 14 %; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: 14 %, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: appear to be) => 14 %
Is a ostrich a vertebrates?	latest scandal	9985.750682822068	what be a ostrich ? => $x: ($x, be, a ostrich) => $x: ($x, be, ostrich) => (r0.arg1: the latest scandal, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is to fight) => the latest scandal; what be unique about a ostrich a ? => $x: ($x, be unique about, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the latest scandal, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is to fight) => the latest scandal; what be a ostrich a ? => $x: ($x, be, a ostrich a) => $x: ($x, be, ostrich) => (r0.arg1: the latest scandal, r0.namespace: reverb, r0.arg2: ostriches, r0.rel: is to fight) => the latest scandal
Who started the bear flag revolution?	bennett	8632.716018667532	what be the bear flag revolution ? => $x: ($x, be, the bear flag revolution) => $x: ($x, be, bear flag revolution) => (r0.arg1: Bennett, r0.namespace: reverb, r0.arg2: the bear Flag Revolution, r0.rel: was involved in) => Bennett; who be the bear flag revolution ? => $x: ($x, be, the bear flag revolution) => $x: ($x, be, bear flag revolution) => (r0.arg1: Bennett, r0.namespace: reverb, r0.arg2: the bear Flag Revolution, r0.rel: was involved in) => Bennett
How many types of silly bands are there?	relient k	5885.699523249804	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: relient k, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => relient k; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: relient k, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => relient k; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: relient k, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => relient k; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: relient k, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => relient k
How many types of silly bands are there?	duran duran	5885.682169822928	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Duran Duran, r0.namespace: reverb, r0.arg2: a silly pop band, r0.rel: may be) => Duran Duran; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Duran Duran, r0.namespace: reverb, r0.arg2: a silly pop band, r0.rel: may be) => Duran Duran; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Duran Duran, r0.namespace: reverb, r0.arg2: a silly pop band, r0.rel: may be) => Duran Duran; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Duran Duran, r0.namespace: reverb, r0.arg2: a silly pop band, r0.rel: may be) => Duran Duran
How many types of silly bands are there?	orphanage	5885.675859485882	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the orphanage, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: has now been introduced to) => the orphanage; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the orphanage, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: has now been introduced to) => the orphanage; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the orphanage, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: has now been introduced to) => the orphanage; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the orphanage, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: has now been introduced to) => the orphanage
How many types of silly bands are there?	phil cunningham	5884.917928399521	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Phil Cunningham, r0.namespace: reverb, r0.arg2: the band Silly Wizard, r0.rel: was an integral part of) => Phil Cunningham; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Phil Cunningham, r0.namespace: reverb, r0.arg2: the band Silly Wizard, r0.rel: was an integral part of) => Phil Cunningham; all the type of silly band ? => $x: ($x, be all the type of, silly band) => $x: ($x, be of, silly band) => (r0.arg1: Phil Cunningham, r0.namespace: reverb, r0.arg2: the band Silly Wizard, r0.rel: was an integral part of) => Phil Cunningham; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Phil Cunningham, r0.namespace: reverb, r0.arg2: the band Silly Wizard, r0.rel: was an integral part of) => Phil Cunningham; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Phil Cunningham, r0.namespace: reverb, r0.arg2: the band Silly Wizard, r0.rel: was an integral part of) => Phil Cunningham
How many types of silly bands are there?	usa	5884.899523249804	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the USA, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => the USA; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the USA, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => the USA; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the USA, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => the USA; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: the USA, r0.namespace: reverb, r0.arg2: a silly band, r0.rel: is) => the USA
How many types of silly bands are there?	?oh	5884.899523249804	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: ?Oh, r0.namespace: reverb, r0.arg2: those Silly Bands, r0.rel: are) => ?Oh; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: ?Oh, r0.namespace: reverb, r0.arg2: those Silly Bands, r0.rel: are) => ?Oh; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: ?Oh, r0.namespace: reverb, r0.arg2: those Silly Bands, r0.rel: are) => ?Oh; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: ?Oh, r0.namespace: reverb, r0.arg2: those Silly Bands, r0.rel: are) => ?Oh
How many types of silly bands are there?	connor	5884.889882457095	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Connor, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: is obsessed with) => Connor; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Connor, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: is obsessed with) => Connor; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Connor, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: is obsessed with) => Connor; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Connor, r0.namespace: reverb, r0.arg2: Silly Bands, r0.rel: is obsessed with) => Connor
How many types of silly bands are there?	gabe	5884.889882457095	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Gabe, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: is really into) => Gabe; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Gabe, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: is really into) => Gabe; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Gabe, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: is really into) => Gabe; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Gabe, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: is really into) => Gabe
How many types of silly bands are there?	stereolab sammy	5884.889882457095	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Stereolab and Sammy, r0.namespace: reverb, r0.arg2: two silly little bands, r0.rel: are) => Stereolab and Sammy; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Stereolab and Sammy, r0.namespace: reverb, r0.arg2: two silly little bands, r0.rel: are) => Stereolab and Sammy; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Stereolab and Sammy, r0.namespace: reverb, r0.arg2: two silly little bands, r0.rel: are) => Stereolab and Sammy; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Stereolab and Sammy, r0.namespace: reverb, r0.arg2: two silly little bands, r0.rel: are) => Stereolab and Sammy
How many types of silly bands are there?	kids	5884.875859485882	what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Kids, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: everywhere are going wild over) => Kids; what be the best type of silly band ? => $x: ($x, be the best type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Kids, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: everywhere are going wild over) => Kids; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Kids, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: everywhere are going wild over) => Kids; what be the diffrent type of silly band ? => $x: ($x, be the diffrent type of, silly band) => $x: ($x, be, silly band) => (r0.arg1: Kids, r0.namespace: reverb, r0.arg2: silly bands, r0.rel: everywhere are going wild over) => Kids
What are the scopes and limitations of physics?	public	6768.460621088724	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are aware of) => the public
What are the scopes and limitations of physics?	data	6768.398185478801	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: its scope and limitations, r0.rel: thus are subject to) => data
What are the scopes and limitations of physics?	scholars network email	6767.726729381587	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: Scholars Network Email, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is) => Scholars Network Email
What are the scopes and limitations of physics?	subsequent runtime errors	6767.726729381587	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: subsequent runtime errors, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are) => subsequent runtime errors
What are the scopes and limitations of physics?	common good	6767.726729381587	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: the common good, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are) => the common good
What are the scopes and limitations of physics?	critical areas	6767.726729381587	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: The critical areas, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is) => The critical areas
What are the scopes and limitations of physics?	principle	6767.660621088725	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: the principle, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are considered within) => the principle
What are the scopes and limitations of physics?	emphasis	6767.660621088725	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: the emphasis, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is to evaluate) => the emphasis
What are the scopes and limitations of physics?	ftc	6767.660621088725	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: The FTC, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: is familiar with) => The FTC
What are the scopes and limitations of physics?	students	6767.6399622472045	what be the scope and limitation ? => $x: ($x, be, the scope and limitation) => $x: ($x, be, scope and limitation) => (r0.arg1: The students, r0.namespace: reverb, r0.arg2: the scope and limitations, r0.rel: are required to list) => The students
What were the names of famous highwayman?	junk science	6326.690439378387	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: junk science, r0.namespace: reverb, r0.arg2: the highwaymen, r0.rel: are) => junk science
What were the names of famous highwayman?	gabriel	6326.690439378387	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Gabriel, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Gabriel
What were the names of famous highwayman?	william brennan	6326.690439378387	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: William Brennan, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => William Brennan
What were the names of famous highwayman?	erik	6326.690439378387	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Erik, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Erik
What were the names of famous highwayman?	angulimala	6326.690439378387	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Angulimala, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Angulimala
What were the names of famous highwayman?	tutor	6326.651876207551	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a tutor, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was beset by) => a tutor
What were the names of famous highwayman?	governess	6326.62873830505	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: governess, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is kissed by) => governess
What were the names of famous highwayman?	silver	6326.62873830505	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: silver, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were acutely aware of) => silver
What were the names of famous highwayman?	paris	6326.62873830505	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Paris, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was held up by) => Paris
What were the names of famous highwayman?	moonlight ?	6326.62873830505	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moonlight ?, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is a conversation between) => Moonlight ?
What were the names of famous highwayman?	?business	6326.613313036715	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: ?Business, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: has been slow with) => ?Business
What were the names of famous highwayman?	road	6326.613313036715	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the Road, r0.namespace: reverb, r0.arg2: the Highwaymen, r0.rel: is the second documentary on) => the Road
What were the names of famous highwayman?	jul 2008 , 22:04 wow	6326.056348469297	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jul 2008 , 22:04 Wow, r0.namespace: reverb, r0.arg2: this Highwayman, r0.rel: is) => Jul 2008 , 22:04 Wow
What were the names of famous highwayman?	small paddocks	6325.96756572006	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the small paddocks, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: is) => the small paddocks
What were the names of famous highwayman?	song	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: song, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: is) => song
What were the names of famous highwayman?	dennis	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dennis, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dennis
What were the names of famous highwayman?	revealer	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the revealer, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => the revealer
What were the names of famous highwayman?	design	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is) => the design
What were the names of famous highwayman?	walton	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Walton; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Walton, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: had been) => Walton
What were the names of famous highwayman?	class	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the class, r0.namespace: reverb, r0.arg2: potential highwaymen, r0.rel: are) => the class
What were the names of famous highwayman?	moll cutpurse	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Moll Cutpurse, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Moll Cutpurse
What were the names of famous highwayman?	abu dharr	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Abu Dharr, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Abu Dharr
What were the names of famous highwayman?	savior	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a savior, r0.namespace: reverb, r0.arg2: the Highwayman, r0.rel: is) => a savior
What were the names of famous highwayman?	tyburn gallows	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tyburn gallows, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Tyburn gallows
What were the names of famous highwayman?	audio challenge	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: audio challenge i, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => audio challenge i
What were the names of famous highwayman?	kingston	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Kingston, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Kingston
What were the names of famous highwayman?	tories	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The Tories, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are like) => The Tories
What were the names of famous highwayman?	denis moore	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Denis Moore, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => Denis Moore
What were the names of famous highwayman?	dick	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Dick, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: was) => Dick
What were the names of famous highwayman?	mountains defiles	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: mountains and defiles, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: are mostly) => mountains and defiles
What were the names of famous highwayman?	tall fellow next line	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the tall fellow next in line, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is) => the tall fellow next in line
What were the names of famous highwayman?	two riniers	6325.890439378388	who be the famous highwayman ? => $x: ($x, be, the famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be famous famous highwayman ? => $x: ($x, be, famous famous highwayman) => $x: ($x, be, famous famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be the 5 most famous highwayman ? => $x: ($x, be, the 5 most famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be some famous highwayman ? => $x: ($x, be, some famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be some famous highwayman ? => $x: ($x, be, some famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be a famous highwayman ? => $x: ($x, be, a famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be famous highwayman ? => $x: ($x, be, famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be the famous highwayman ? => $x: ($x, be, the famous highwayman) => $x: ($x, be, famous highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The two Riniers, r0.namespace: reverb, r0.arg2: famous highwaymen, r0.rel: were) => The two Riniers
What were the names of famous highwayman?	kid	6325.890439378388	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a kid, r0.namespace: reverb, r0.arg2: The Highwayman, r0.rel: was) => a kid
What were the names of famous highwayman?	knot	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The knot, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was allegedly used by) => The knot; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the knot, r0.namespace: reverb, r0.arg2: the highwayman, r0.rel: is tightened) => the knot
What were the names of famous highwayman?	tus	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Tus, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => Tus
What were the names of famous highwayman?	metropolis	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the metropolis, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: were noted for) => the metropolis
What were the names of famous highwayman?	lone hebrew	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a lone Hebrew, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => a lone Hebrew
What were the names of famous highwayman?	bagshot heath	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Bagshot Heath, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was notorious for) => Bagshot Heath
What were the names of famous highwayman?	modus operandi	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a modus operandi, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was different from) => a modus operandi
What were the names of famous highwayman?	author	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: The author, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was robbed by) => The author
What were the names of famous highwayman?	real groundbreaking measure	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: a real groundbreaking measure, r0.namespace: reverb, r0.arg2: Highwaymen art, r0.rel: was seeing) => a real groundbreaking measure
What were the names of famous highwayman?	clumsy lady	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: openie4, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Clumsy lady, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: is rescued from) => Clumsy lady
What were the names of famous highwayman?	messenger	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the messenger, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: could be) => the messenger
What were the names of famous highwayman?	jack audley	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Jack Audley, r0.namespace: openie4, r0.arg2: a highwayman, r0.rel: has been) => Jack Audley
What were the names of famous highwayman?	father	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Father, r0.namespace: reverb, r0.arg2: highwaymen, r0.rel: was killed by) => Father
What were the names of famous highwayman?	lauren nolen	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Lauren Nolen, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was wonderful as) => Lauren Nolen
What were the names of famous highwayman?	overly friendly/cheerful	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Overly friendly/Cheerful, r0.namespace: reverb, r0.arg2: a Highwayman, r0.rel: has been) => Overly friendly/Cheerful
What were the names of famous highwayman?	charlotte	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: Charlotte, r0.namespace: reverb, r0.arg2: Highwayman, r0.rel: was still on) => Charlotte
What were the names of famous highwayman?	group	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: the group, r0.namespace: reverb, r0.arg2: The Highwaymen, r0.rel: was named) => the group
What were the names of famous highwayman?	tamasic bhakti	6325.851876207552	what be some famouse highwayman ? => $x: ($x, be, some famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be a famouse highwayman ? => $x: ($x, be, a famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be 4 famous highwayman ? => $x: ($x, be, 4 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; what be one famous highwayman ? => $x: ($x, be, one famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be 2 famous highwayman ? => $x: ($x, be, 2 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be 5 famous highwayman ? => $x: ($x, be, 5 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; what be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be two famous highwayman ? => $x: ($x, be, two famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be the most famouse highwayman ? => $x: ($x, be, the most famouse highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be 3 famous highwayman ? => $x: ($x, be, 3 famous highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti; who be highwayman ? => $x: ($x, be, highwayman) => $x: ($x, be, highwayman) => (r0.arg1: tamasic bhakti, r0.namespace: reverb, r0.arg2: a highwayman, r0.rel: is like) => tamasic bhakti
How many diffrent types of televisions are there?	matrix display	5582.655280795206	what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; the type of television ? => $x: ($x, be the type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be the differnt type of television ? => $x: ($x, be the differnt type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be the differnt type of television ? => $x: ($x, be the differnt type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be the difference between the two type of television ? => $x: ($x, be the difference between the two type of, television) => $x: ($x, two type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; three different type of television ? => $x: ($x, be three different type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be some type of television ? => $x: ($x, be some type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be some type of television ? => $x: ($x, be some type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be type of television ? => $x: ($x, be type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be three different type of television ? => $x: ($x, be three different type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be a type of television ? => $x: ($x, be a type of, television) => $x: ($x, be type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be two type of television ? => $x: ($x, be two type of, television) => $x: ($x, be two type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display; what be two type of television ? => $x: ($x, be two type of, television) => $x: ($x, be two type of, television) => (r0.arg1: matrix display, r0.namespace: reverb, r0.arg2: LCD televisions, r0.rel: are the two types of) => matrix display
How many diffrent types of televisions are there?	bound chains; get gator; heli rope transfer	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Bound in Chains; Get the Gator; Heli Rope Transfer, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bound in Chains; Get the Gator; Heli Rope Transfer
How many diffrent types of televisions are there?	barrel rolling; rat transfer; car pond	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: Barrel Rolling; Rat Transfer; Car into Pond, r0.rel: Competitions of this type) => Barrel Rolling; Rat Transfer; Car into Pond; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Barrel Rolling; Rat Transfer; Car into Pond, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Barrel Rolling; Rat Transfer; Car into Pond
How many diffrent types of televisions are there?	i'm celebrity...get out here! (uk series 4)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 4), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 4)
How many diffrent types of televisions are there?	new york 100th episode	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: New York 100th Episode, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => New York 100th Episode
How many diffrent types of televisions are there?	biggest loser (au) - season 2	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: The Biggest Loser (AU) - Season 2, r0.rel: Competitions of this type) => The Biggest Loser (AU) - Season 2; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 2
How many diffrent types of televisions are there?	biggest loser (au) - season 1	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: The Biggest Loser (AU) - Season 1, r0.rel: Competitions of this type) => The Biggest Loser (AU) - Season 1; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 1
How many diffrent types of televisions are there?	teams #2	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Teams #2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Teams #2
How many diffrent types of televisions are there?	america's funniest home videos - season 1	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 1, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 1
How many diffrent types of televisions are there?	flatbed flatbed; worm coffin; tumbler	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Flatbed to Flatbed; Worm Coffin; Tumbler, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Flatbed to Flatbed; Worm Coffin; Tumbler
How many diffrent types of televisions are there?	old vs. young	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Old vs. Young, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Old vs. Young
How many diffrent types of televisions are there?	big brother (uk) - season 7	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: Big Brother (UK) - Season 7, r0.rel: Competitions of this type) => Big Brother (UK) - Season 7; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 7, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 7
How many diffrent types of televisions are there?	challenge: rivals	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Challenge: Rivals, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Challenge: Rivals
How many diffrent types of televisions are there?	wwe tough enough - revival (season 5)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: WWE Tough Enough - Revival (Season 5), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => WWE Tough Enough - Revival (Season 5)
How many diffrent types of televisions are there?	amazing race - season 5	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 5
How many diffrent types of televisions are there?	scorpion tales	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Scorpion Tales, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Scorpion Tales
How many diffrent types of televisions are there?	bachelorette - season 8	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 8
How many diffrent types of televisions are there?	big brother (uk) - season 5	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: Big Brother (UK) - Season 5, r0.rel: Competitions of this type) => Big Brother (UK) - Season 5; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother (UK) - Season 5, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother (UK) - Season 5
How many diffrent types of televisions are there?	big break vi: trump national	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break VI: Trump National, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break VI: Trump National
How many diffrent types of televisions are there?	helicopter fire drill; eat rectum; ledge walk	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.rel: Competitions of this type) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Fire Drill; Eat Rectum; Ledge Walk, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Fire Drill; Eat Rectum; Ledge Walk
How many diffrent types of televisions are there?	big brother - season 4	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 4
How many diffrent types of televisions are there?	bobbing blood; tomato hornworms; skunk tunnel (gross-out edition)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Bobbing in Blood; Tomato Hornworms; Skunk Tunnel (Gross-Out Edition)
How many diffrent types of televisions are there?	dancing stars - season 9	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 9, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 9
How many diffrent types of televisions are there?	amazing race - season 14	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: The Amazing Race - Season 14, r0.rel: Competitions of this type) => The Amazing Race - Season 14; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 14
How many diffrent types of televisions are there?	miss usa edition #3	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Miss USA Edition #3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Miss USA Edition #3
How many diffrent types of televisions are there?	big brother - season 8	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 8
How many diffrent types of televisions are there?	i'm celebrity...get out here! (uk series 10)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: I'm a Celebrity...Get Me Out of Here! (UK series 10), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => I'm a Celebrity...Get Me Out of Here! (UK series 10)
How many diffrent types of televisions are there?	biggest loser - season 13	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser - Season 13, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser - Season 13
How many diffrent types of televisions are there?	dancing stars - season 11	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Dancing with the Stars - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Dancing with the Stars - Season 11
How many diffrent types of televisions are there?	triple beam walk; glass walking; magnetic car drop	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Triple Beam Walk; Glass Walking; Magnetic Car Drop, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Triple Beam Walk; Glass Walking; Magnetic Car Drop
How many diffrent types of televisions are there?	mtv roadies - season 3	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: MTV Roadies - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => MTV Roadies - Season 3
How many diffrent types of televisions are there?	america's funniest home videos - season 11	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: America's Funniest Home Videos - Season 11, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => America's Funniest Home Videos - Season 11
How many diffrent types of televisions are there?	biggest loser (au) - season 3	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Biggest Loser (AU) - Season 3, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Biggest Loser (AU) - Season 3
How many diffrent types of televisions are there?	helicopter climb; blender fear; pole hopper (wwf edition)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Helicopter Climb; Blender of Fear; Pole Hopper (WWF Edition)
How many diffrent types of televisions are there?	block - season 2	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Block - Season 2, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Block - Season 2
How many diffrent types of televisions are there?	four stunt episode #4	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Four Stunt Episode #4, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Four Stunt Episode #4
How many diffrent types of televisions are there?	championship, part ii	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part II, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part II
How many diffrent types of televisions are there?	next food network star - season 8	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Next Food Network Star - Season 8, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Next Food Network Star - Season 8
How many diffrent types of televisions are there?	amazing race - season 19	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Amazing Race - Season 19, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Amazing Race - Season 19
How many diffrent types of televisions are there?	big break xi: prince edward island (season 11)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: The Big Break XI: Prince Edward Island (Season 11), r0.rel: Competitions of this type) => The Big Break XI: Prince Edward Island (Season 11); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Big Break XI: Prince Edward Island (Season 11), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Big Break XI: Prince Edward Island (Season 11)
How many diffrent types of televisions are there?	big break dominican republic (season 14)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Break Dominican Republic (Season 14), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Break Dominican Republic (Season 14)
How many diffrent types of televisions are there?	boat jump; swimming fishes; flag snag	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: Boat Jump; Swimming with the Fishes; Flag Snag, r0.rel: Competitions of this type) => Boat Jump; Swimming with the Fishes; Flag Snag; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat Jump; Swimming with the Fishes; Flag Snag, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat Jump; Swimming with the Fishes; Flag Snag
How many diffrent types of televisions are there?	real world/road rules challenge	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Real World/Road Rules Challenge, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Real World/Road Rules Challenge
How many diffrent types of televisions are there?	big brother - season 14	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; what be the three type of television ? => $x: (television, have three type of, $x) => $x: (television, type of, $x) => (r0.arg1: Reality television, r0.namespace: freebase, r0.arg2: Big Brother - Season 14, r0.rel: Competitions of this type) => Big Brother - Season 14; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Big Brother - Season 14, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Big Brother - Season 14
How many diffrent types of televisions are there?	survivor - season 10	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Survivor - Season 10, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Survivor - Season 10
How many diffrent types of televisions are there?	championship, part	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Championship, Part I, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Championship, Part I
How many diffrent types of televisions are there?	boat boat; worm wine; matrix truck straddle	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Boat to Boat; Worm Wine; Matrix Truck Straddle, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Boat to Boat; Worm Wine; Matrix Truck Straddle
How many diffrent types of televisions are there?	jet ski leap; beetle bowl; rope crawl	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Jet Ski Leap; Beetle Bowl; Rope Crawl, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Jet Ski Leap; Beetle Bowl; Rope Crawl
How many diffrent types of televisions are there?	sky surfing; fear factor billards; container jump (twins edition)	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition); what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition), r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => Sky Surfing; Fear Factor Billards; Container Jump (Twins Edition)
How many diffrent types of televisions are there?	bachelorette - season 6	5534.58417256832	the five type of television ? => $x: ($x, be the five type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; what be the seven type of television ? => $x: ($x, be the seven type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; 4 type of television ? => $x: ($x, be 4 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; 2 type of television ? => $x: ($x, be 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; what be the 2 type of television ? => $x: ($x, be the 2 type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6; what be four type of television ? => $x: ($x, be four type of, television) => $x: ($x, type of, television) => (r0.arg1: The Bachelorette - Season 6, r0.namespace: freebase, r0.arg2: Reality television, r0.rel: Type of competition) => The Bachelorette - Season 6
What kind of plants did the ancient Mayans have?	maize	3800.0954103852428	what type of plant do the mayan have ? => $x: ($x, "type", plant) (the mayan, have, $x) => $x: ($x, "type", plant) (mayan, have, $x) => (r0.arg1: Maize, r1.rel: had, r0.namespace: freebase, r1.arg2: maize, r0.arg2: Garden Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Mayans) => Maize; what plant do the mayan have ? => $x: ($x, "type", plant) (the mayan, have, $x) => $x: ($x, "type", plant) (mayan, have, $x) => (r0.arg1: Maize, r1.rel: had, r0.namespace: freebase, r1.arg2: maize, r0.arg2: Garden Plant, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Mayans) => Maize
What kind of plants did the ancient Mayans have?	curanderos	3551.868405977543	plant for mayan man ? => $x: ($x, be plant for, mayan man) => $x: ($x, be, mayan man) => (r0.arg1: Curanderos, r0.namespace: reverb, r0.arg2: Mayan medicine man, r0.rel: are a sort of) => Curanderos
What kind of plants did the ancient Mayans have?	lol	3551.0606933433755	plant for mayan man ? => $x: ($x, be plant for, mayan man) => $x: ($x, be, mayan man) => (r0.arg1: LOL, r0.namespace: reverb, r0.arg2: our Solar Mayan Elder Hunbatz Men, r0.rel: BE with) => LOL
What kind of plants did the ancient Mayans have?	kokopelli	2903.7931361078877	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Kokopelli, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was once the god of) => Kokopelli; plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Kokopelli, r0.namespace: openie4, r0.arg2: the god of the Mayan people, r0.rel: was) => Kokopelli
What kind of plants did the ancient Mayans have?	moon	2903.751359339482	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the Moon, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was also recorded by) => the Moon
What kind of plants did the ancient Mayans have?	chichen itza	2903.741075827259	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was a major city for) => Chichen Itza
What kind of plants did the ancient Mayans have?	izamal	2903.7326620445315	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Izamal, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was once a religious center for) => Izamal
What kind of plants did the ancient Mayans have?	god	2903.7179379247577	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: God, r0.namespace: reverb, r0.arg2: Mayan people groups, r0.rel: has been moving among) => God
What kind of plants did the ancient Mayans have?	south america?these	2903.0137949494065	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: South America?these, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: are the roots of) => South America?these
What kind of plants did the ancient Mayans have?	popul vuh	2903.0137949494065	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The Popul Vuh, r0.namespace: reverb, r0.arg2: the Mayan peoples, r0.rel: is the Bible of) => The Popul Vuh
What kind of plants did the ancient Mayans have?	yucatan peninsula	2903.0137949494065	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The Yucatan Peninsula, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: is the homeland of) => The Yucatan Peninsula; plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The Yucatan Peninsula, r0.namespace: openie4, r0.arg2: the Mayan people, r0.rel: is the homeland of) => The Yucatan Peninsula
What kind of plants did the ancient Mayans have?	south america?these	2903.0137949494065	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: South America?these, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: are the roots of) => South America?these
What kind of plants did the ancient Mayans have?	adopt-a-village	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Adopt-a-Village, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: is to empower) => Adopt-a-Village
What kind of plants did the ancient Mayans have?	?which	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: ?which, r0.namespace: reverb, r0.arg2: the Mayan People, r0.rel: was inhabited by) => ?which
What kind of plants did the ancient Mayans have?	private island	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: private The island, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was used by) => private The island
What kind of plants did the ancient Mayans have?	victims	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the victims, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: were) => the victims
What kind of plants did the ancient Mayans have?	action	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Action, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: are) => Action
What kind of plants did the ancient Mayans have?	12/21/12 alignment	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The 12/21/12 alignment, r0.namespace: reverb, r0.arg2: the Mayan peoples, r0.rel: is significant for) => The 12/21/12 alignment
What kind of plants did the ancient Mayans have?	truly marvelous temple	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: a truly marvelous temple, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was built by) => a truly marvelous temple
What kind of plants did the ancient Mayans have?	caves	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the caves, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: were sacred to) => the caves
What kind of plants did the ancient Mayans have?	lowri gilbert honduras	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Lowri Gilbert Honduras, r0.namespace: reverb, r0.arg2: the Mayan People, r0.rel: was home to) => Lowri Gilbert Honduras
What kind of plants did the ancient Mayans have?	spokane diocese priest	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the Spokane Diocese priest, r0.namespace: reverb, r0.arg2: the Mayan Indian people, r0.rel: is serving) => the Spokane Diocese priest
What kind of plants did the ancient Mayans have?	large fire	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: a large fire, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: be built before) => a large fire
What kind of plants did the ancient Mayans have?	guatemalans	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Guatemalans, r0.namespace: reverb, r0.arg2: indigenous Mayan peoples, r0.rel: are descendants of) => Guatemalans
What kind of plants did the ancient Mayans have?	gospel	2902.9642137297606	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the gospel, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was taken to) => the gospel
What kind of plants did the ancient Mayans have?	stingless honey bees	2902.9513593394818	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: stingless honey bees, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: have been revered by) => stingless honey bees
What kind of plants did the ancient Mayans have?	catherine	2902.9513593394818	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Catherine, r0.namespace: reverb, r0.arg2: the beautiful Mayan people, r0.rel: is enraptured by) => Catherine
What kind of plants did the ancient Mayans have?	radio xepet	2902.9513593394818	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Radio Xepet, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: has been broadcasting to) => Radio Xepet
What kind of plants did the ancient Mayans have?	yucat?n	2902.9513593394818	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the Yucat?n, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was originally populated by) => the Yucat?n
What kind of plants did the ancient Mayans have?	san lucas toliman	2902.9513593394818	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: San Lucas Toliman, r0.namespace: reverb, r0.arg2: indigenous Mayan people, r0.rel: is a community of) => San Lucas Toliman
What kind of plants did the ancient Mayans have?	design	2902.9513593394818	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The design, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: is an homage to) => The design
What kind of plants did the ancient Mayans have?	latin america	2902.947686656545	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: Latin America, r0.namespace: reverb, r0.arg2: indigenous Mayan people, r0.rel: are) => Latin America
What kind of plants did the ancient Mayans have?	discriminates	2902.941075827259	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: discriminates, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: is imposes its will upon) => discriminates
What kind of plants did the ancient Mayans have?	location	2902.9352913516336	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: a location, r0.namespace: openie4, r0.arg2: Mayan people, r0.rel: was named by) => a location; plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: a location, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: was named by) => a location
What kind of plants did the ancient Mayans have?	city	2902.9352913516336	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The city, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: was occupied by) => The city; plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The city, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: was once a religious center for) => The city
What kind of plants did the ancient Mayans have?	film	2902.9352913516336	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the film, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: were filled by) => the film
What kind of plants did the ancient Mayans have?	hammocks	2902.9352913516336	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The hammocks, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: are special to) => The hammocks
What kind of plants did the ancient Mayans have?	organization	2902.9352913516336	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: an organization, r0.namespace: reverb, r0.arg2: Mayan people, r0.rel: is to help) => an organization
What kind of plants did the ancient Mayans have?	visitors	2902.9326620445313	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: visitors, r0.namespace: reverb, r0.arg2: the Mayan people, r0.rel: are able to communicate clearly with) => visitors
What kind of plants did the ancient Mayans have?	term	2902.9256505589246	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: A term, r0.namespace: reverb, r0.arg2: the non-Mayan people, r0.rel: is used for) => A term
What kind of plants did the ancient Mayans have?	lake	2902.9179379247576	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: The lake, r0.namespace: reverb, r0.arg2: two distinct Mayan peoples, r0.rel: is home to) => The lake; plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: the Lake, r0.namespace: reverb, r0.arg2: two distinct Mayan peoples, r0.rel: are inhabited by) => the Lake
What kind of plants did the ancient Mayans have?	excellent touch	2902.9179379247576	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: an excellent touch, r0.namespace: reverb, r0.arg2: a worthy fashion boots people Mayans, r0.rel: is) => an excellent touch
What kind of plants did the ancient Mayans have?	83 %	2902.9179379247576	plant of the mayan people ? => $x: ($x, be plant of, the mayan people) => $x: ($x, be, mayan people) => (r0.arg1: 83 %, r0.namespace: reverb, r0.arg2: indigenous , Mayan people, r0.rel: were identified as) => 83 %
Is water a raw ingredient?	oil paint	9754.247800346715	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: oil paint, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: are) => oil paint
Is water a raw ingredient?	cholesterol	9754.213093492963	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: cholesterol, r0.namespace: reverb, r0.arg2: the raw ingredient, r0.rel: is) => cholesterol
Is water a raw ingredient?	data	9754.213093492963	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: The data, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is provided for) => The data; what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: data, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: are) => data
Is water a raw ingredient?	gallo	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: gallo, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is made with) => gallo
Is water a raw ingredient?	barley	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: barley, r0.namespace: reverb, r0.arg2: the principal raw ingredient, r0.rel: is) => barley
Is water a raw ingredient?	singapore	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Singapore, r0.namespace: reverb, r0.arg2: Raw Ingredients & Supply, r0.rel: is) => Singapore
Is water a raw ingredient?	sauces	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: sauces, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: are made with) => sauces
Is water a raw ingredient?	cooking	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: cooking, r0.namespace: reverb, r0.arg2: any raw ingredient, r0.rel: is for) => cooking; what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: cooking, r0.namespace: reverb, r0.arg2: fresh , raw ingredients, r0.rel: is taking) => cooking
Is water a raw ingredient?	corporate america	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Corporate America, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: is selling) => Corporate America
Is water a raw ingredient?	gallo ?	9754.189955590462	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: gallo ?, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is made with) => gallo ?
Is water a raw ingredient?	paper	9754.173428517246	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: The paper, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is made from selected) => The paper
Is water a raw ingredient?	money	9754.173428517246	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: money, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is used to buy) => money
Is water a raw ingredient?	stand	9754.173428517246	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the stand, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is made of entirely) => the stand
Is water a raw ingredient?	nitrogen oxide	9754.173428517246	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Nitrogen oxide, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: is one of) => Nitrogen oxide
Is water a raw ingredient?	gross profit	9754.161033212335	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: gross profit, r0.namespace: reverb, r0.arg2: lower raw ingredient costs, r0.rel: was attributed to) => gross profit; what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: gross profit, r0.namespace: reverb, r0.arg2: favorable raw ingredient costs, r0.rel: was attributed to) => gross profit
Is water a raw ingredient?	exempt	9753.447800346716	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: exempt, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: are) => exempt
Is water a raw ingredient?	amazon web services ? aws ?	9753.428518761299	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Amazon Web Services ? AWS ?, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is a bunch of) => Amazon Web Services ? AWS ?
Is water a raw ingredient?	real difference maker	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the real difference maker, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: is) => the real difference maker
Is water a raw ingredient?	team	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Each team, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: was given) => Each team
Is water a raw ingredient?	opium poppy	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: The opium poppy, r0.namespace: reverb, r0.arg2: the raw ingredient, r0.rel: is) => The opium poppy
Is water a raw ingredient?	budget salon shampoos	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: budget and salon shampoos, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: are) => budget and salon shampoos
Is water a raw ingredient?	tfg	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: TFG, r0.namespace: reverb, r0.arg2: raw food ingredients, r0.rel: are) => TFG
Is water a raw ingredient?	emphasis	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: The emphasis, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is on) => The emphasis
Is water a raw ingredient?	salt	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: salt, r0.namespace: reverb, r0.arg2: the raw ingredient, r0.rel: is) => salt
Is water a raw ingredient?	credit report	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: The credit report, r0.namespace: reverb, r0.arg2: your raw ingredients, r0.rel: is) => The credit report
Is water a raw ingredient?	atypical waltz beat	9753.413093492964	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: an atypical waltz beat, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: are) => an atypical waltz beat
Is water a raw ingredient?	brand	9753.406482663679	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: A brand, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: was initially a wrapper of) => A brand
Is water a raw ingredient?	primary food market	9753.406482663679	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the primary food market, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is mostly a market for) => the primary food market
Is water a raw ingredient?	same	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: The same, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is true for) => The same
Is water a raw ingredient?	meat seafood	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: meat and seafood, r0.namespace: reverb, r0.arg2: the main raw ingredients, r0.rel: are) => meat and seafood
Is water a raw ingredient?	americans	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Americans, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: are opting for) => Americans
Is water a raw ingredient?	bintani	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Bintani, r0.namespace: reverb, r0.arg2: all raw ingredients, r0.rel: is supplying) => Bintani
Is water a raw ingredient?	wet foods	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Wet foods, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: are made from) => Wet foods
Is water a raw ingredient?	quality	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: quality, r0.namespace: reverb, r0.arg2: every raw ingredient, r0.rel: is having) => quality
Is water a raw ingredient?	buffet line	9753.389955590463	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the buffet line, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: was full of) => the buffet line
Is water a raw ingredient?	quality , freshness taste	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: quality , freshness and taste, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: are found in) => quality , freshness and taste
Is water a raw ingredient?	touches	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: touches, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is used to transform) => touches
Is water a raw ingredient?	steam	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: STEAM, r0.namespace: reverb, r0.arg2: the raw ingredient, r0.rel: is defined as) => STEAM
Is water a raw ingredient?	formulas	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Formulas, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: may be administered as) => Formulas
Is water a raw ingredient?	mattress	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the mattress, r0.namespace: reverb, r0.arg2: natural raw ingredients, r0.rel: is produced from) => the mattress
Is water a raw ingredient?	unsavoury ideas	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: such unsavoury ideas, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: is one of) => such unsavoury ideas
Is water a raw ingredient?	meal	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: each meal, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is lovingly cooked from) => each meal
Is water a raw ingredient?	design	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the design, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: are now procuring) => the design
Is water a raw ingredient?	35 pence	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: 35 pence, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: is the cost of) => 35 pence
Is water a raw ingredient?	lot numbers	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: lot numbers, r0.namespace: reverb, r0.arg2: all raw ingredients, r0.rel: are assigned to) => lot numbers
Is water a raw ingredient?	restaurant	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: the restaurant, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: was the cost of) => the restaurant
Is water a raw ingredient?	natural paints	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Natural paints, r0.namespace: reverb, r0.arg2: natural raw ingredients, r0.rel: are made from) => Natural paints
Is water a raw ingredient?	food craft food craft	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Food Craft Food craft, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: is the transformation of) => Food Craft Food craft
Is water a raw ingredient?	more processing	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: more processing, r0.namespace: reverb, r0.arg2: the raw ingredients, r0.rel: is done to) => more processing
Is water a raw ingredient?	raw component blends	9753.373428517247	what be a raw ingredient ? => $x: ($x, be, a raw ingredient) => $x: ($x, be, raw ingredient) => (r0.arg1: Raw component blends, r0.namespace: reverb, r0.arg2: raw ingredients, r0.rel: are those composed of) => Raw component blends
How long does it take to complete a dental program?	successful model	11104.950326511867	when be a dental program build ? => $x: (a dental program, build on, $x) => $x: (dental program, build on, $x) => (r0.arg1: The Rutland school dental program, r0.namespace: reverb, r0.arg2: a successful model, r0.rel: builds on) => a successful model
How long does it take to complete a dental program?	families	11104.950326511867	when be a dental program build ? => $x: (a dental program, build on, $x) => $x: (dental program, build on, $x) => (r0.arg1: The new mobile dental program, r0.namespace: reverb, r0.arg2: Families, r0.rel: builds on) => Families
How long did a gold license last for?	program	8266.695560118285	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => The program; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: The program, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => The program
How long did a gold license last for?	external caterers	8265.947620398914	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: External caterers, r0.namespace: reverb, r0.arg2: Gold Licensed, r0.rel: must be) => External caterers; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: External caterers, r0.namespace: reverb, r0.arg2: Gold Licensed, r0.rel: must be) => External caterers
How long did a gold license last for?	software	8265.90134459391	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: the software, r0.namespace: reverb, r0.arg2: GoldSim licensed, r0.rel: is) => the software; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: the software, r0.namespace: reverb, r0.arg2: GoldSim licensed, r0.rel: is) => the software
How long did a gold license last for?	virtualpayments	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: VirtualPayments, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => VirtualPayments; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: VirtualPayments, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => VirtualPayments
How long did a gold license last for?	lucremaker	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: LucreMaker, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => LucreMaker; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: LucreMaker, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => LucreMaker
How long did a gold license last for?	roliteincome	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: RoliteIncome, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => RoliteIncome; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: RoliteIncome, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => RoliteIncome
How long did a gold license last for?	exceptionalfunds	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: ExceptionalFunds, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => ExceptionalFunds; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: ExceptionalFunds, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => ExceptionalFunds
How long did a gold license last for?	imakemoneynow	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: IMakeMoneyNow, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => IMakeMoneyNow; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: IMakeMoneyNow, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => IMakeMoneyNow
How long did a gold license last for?	bruyetteinvestment	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: BruyetteInvestment, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => BruyetteInvestment; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: BruyetteInvestment, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => BruyetteInvestment
How long did a gold license last for?	cfdonline	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: CFDonline, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => CFDonline; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: CFDonline, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => CFDonline
How long did a gold license last for?	vacationprofit	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: VacationProfit, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => VacationProfit; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: VacationProfit, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => VacationProfit
How long did a gold license last for?	verifonds	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: Verifonds, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => Verifonds; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: Verifonds, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => Verifonds
How long did a gold license last for?	dedicated server	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: a dedicated server, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => a dedicated server; what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: a dedicated server, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => a dedicated server; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: a dedicated server, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => a dedicated server; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: a dedicated server, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => a dedicated server
How long did a gold license last for?	site	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => The site; what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a modified licensed GoldCoders script, r0.rel: is run off) => The site; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a licensed GoldCoders script, r0.rel: is running off) => The site; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: The site, r0.namespace: reverb, r0.arg2: a modified licensed GoldCoders script, r0.rel: is run off) => The site
How long did a gold license last for?	email system	8265.895560118286	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: The email system, r0.namespace: reverb, r0.arg2: most Invisible Gold licenses, r0.rel: is available in) => The email system; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: The email system, r0.namespace: reverb, r0.arg2: most Invisible Gold licenses, r0.rel: is available in) => The email system
How long did a gold license last for?	guarantee	8265.87820669141	what be a gold license duration ? => $x: ($x, be, a gold license duration) => $x: ($x, be, gold license) => (r0.arg1: guarantee, r0.namespace: reverb, r0.arg2: the Gold license and ten days, r0.rel: is seven days for) => guarantee; what be a gold license ? => $x: ($x, be, a gold license) => $x: ($x, be, gold license) => (r0.arg1: guarantee, r0.namespace: reverb, r0.arg2: the Gold license and ten days, r0.rel: is seven days for) => guarantee
What is the major cities of romania?	bucharest	4353.25057313181	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be romanias city ? => $x: ($x, be, romanias city) => $x: ($x, be, romanias city) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania?s main city, r0.rel: is) => Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be the 3 largest city in romanium ? => $x: ($x, be the 3 largest city in, romanium) => $x: ($x, largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the 3 largest city in romanium ? => $x: ($x, be the 3 largest city in, romanium) => $x: ($x, largest city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital and largest city of) => Bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is the capital city of the country) => bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the only city in) => Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the most developed city in) => Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the most prosperous city in) => Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bucharest, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => bucharest
What is the major cities of romania?	sibiu	4353.23771874153	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Sibiu, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is hands-down the best city in) => Sibiu
What is the major cities of romania?	cluj-napoca	4353.227435229308	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Cluj-Napoca; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the fourth most populous city in) => Cluj-Napoca
What is the major cities of romania?	buscata	4352.4671002050245	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city in) => Buscata; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buscata, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is a city in) => Buscata
What is the major cities of romania?	romania bucharest	4352.4505731318095	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be the 3 largest city in romanium ? => $x: ($x, be the 3 largest city in, romanium) => $x: ($x, largest city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Romania Bucharest; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the largest city in) => Romania Bucharest
What is the major cities of romania?	1st century	4352.4505731318095	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: the 1st century, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest city in) => the 1st century
What is the major cities of romania?	cluj-napoca cluj-napoca	4352.43771874153	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the 3 largest city in romanium ? => $x: ($x, be the 3 largest city in, romanium) => $x: ($x, largest city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Cluj-Napoca Cluj-Napoca, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the fourth largest city in) => Cluj-Napoca Cluj-Napoca
What is the major cities of romania?	romania constan?a	4352.43771874153	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Romania Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Romania Constan?a
What is the major cities of romania?	constan?a	4352.43771874153	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Constan?a, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the oldest extant city in) => Constan?a
What is the major cities of romania?	population	4352.43771874153	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the 3 largest city in romanium ? => $x: ($x, be the 3 largest city in, romanium) => $x: ($x, largest city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: a population, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the 7th largest city in) => a population
What is the major cities of romania?	easy smart search engine	4348.415298314417	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: the easy and smart search engine, r0.namespace: reverb, r0.arg2: Romania, r0.rel: choose the city in) => the easy and smart search engine
What is the major cities of romania?	constanta	4345.941071592943	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Constanta, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Constanta; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: CONSTANTA, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => CONSTANTA
What is the major cities of romania?	resita	4345.941071592943	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Resita, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Resita
What is the major cities of romania?	bacau	4345.941071592943	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: bacau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => bacau
What is the major cities of romania?	buzau	4345.941071592943	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Buzau, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Buzau
What is the major cities of romania?	braila	4345.941071592943	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: Braila, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the country) => Braila
What is the major cities of romania?	arad	4345.9326578102155	what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the main city in romanium ? => $x: ($x, be the main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be some other important city in romanium ? => $x: ($x, be some other important city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be some major city in romanium ? => $x: ($x, be some major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be a major city in romanium ? => $x: ($x, be a major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; major city in romanium ? => $x: ($x, be major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the 6 major city in romanium ? => $x: ($x, be the 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be two major city in romanium ? => $x: ($x, be two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; the five major city in romanium ? => $x: ($x, be the five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; other major city in romanium ? => $x: ($x, be other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; the major city in romanium ? => $x: ($x, be the major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the two major city in romanium ? => $x: ($x, be the two major city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the city in romanium ? => $x: ($x, be the city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the other major city in romanium ? => $x: ($x, be the other major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be 6 major city in romanium ? => $x: ($x, be 6 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; the 5 major city in romanium ? => $x: ($x, be the 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; all the major city in romanium ? => $x: ($x, be all the major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be the two main city in romanium ? => $x: ($x, be the two main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; city in romanium ? => $x: ($x, be city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; what be five major city in romanium ? => $x: ($x, be five major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; main city in romanium ? => $x: ($x, be main city in, romanium) => $x: ($x, city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad; 5 major city in romanium ? => $x: ($x, be 5 major city in, romanium) => $x: ($x, be city in, romanium) => (r0.arg1: arad, r0.namespace: nell, r0.arg2: ROMANIA, r0.rel: is a city located in the geopolitical location) => arad
What is the major cities of romania?	pite?ti	4336.499939611118	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => Pite?ti
What is the major cities of romania?	rel=shortlink pite?ti	4336.499939611118	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: rel=shortlink Pite?ti, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is a city of) => rel=shortlink Pite?ti
What is the major cities of romania?	bucharest bucharest	4336.483412537903	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be five major city of romanium ? => $x: ($x, be five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the 5 major city of romanium ? => $x: ($x, be the 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; the five major city of romanium ? => $x: ($x, be the five major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be the other major city of romanium ? => $x: ($x, be the other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; what be other major city of romanium ? => $x: ($x, be other major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: openie4, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest; 5 major city of romanium ? => $x: ($x, be 5 major city of, romanium) => $x: ($x, be city of, romanium) => (r0.arg1: Bucharest Bucharest, r0.namespace: reverb, r0.arg2: Romania, r0.rel: is the capital city of) => Bucharest Bucharest
What is the major cities of romania?	many	4216.842574898705	What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; What is the major cities of romania? => $x: ($x, is the major cities of, romania) => $x: ($x, cities of, romania) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; the major city of romanium ? => $x: ($x, be the major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; major city of romanium ? => $x: ($x, be major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be some major city of romanium ? => $x: ($x, be some major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be two major city of romanium ? => $x: ($x, be two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be a major city of romanium ? => $x: ($x, be a major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many; what be the two major city of romanium ? => $x: ($x, be the two major city of, romanium) => $x: ($x, city of, romanium) => (r0.arg1: a many, r0.namespace: reverb, r0.arg2: Romania, r0.rel: visited city of) => a many
What is the major cities of romania?	venice	2895.1425646164184	what be the major city of italy ? => $x: ($x, be the major city of, italy) => $x: ($x, be major city of, italy) => (r0.arg1: Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a major city of) => Venice; what be the major city of italy ? => $x: ($x, be the major city of, italy) => $x: ($x, be major city of, italy) => (r0.arg1: Venice, r0.namespace: reverb, r0.arg2: Italy, r0.rel: is a major city of) => Venice
What is Bonnie Wrights age?	yts/1.19.8 2005 david	7572.6466511213475	what be wrong with bonnie wright ? => $x: ($x, be wrong with, bonnie wright) => $x: ($x, be, bonnie wright) => (r0.arg1: YTS/1.19.8 2005 David, r0.namespace: reverb, r0.arg2: Bonnie Wright, r0.rel: will be starring in) => YTS/1.19.8 2005 David
What is Bonnie Wrights age?	weasley siblings	7572.49313733535	what be wrong with bonnie wright ? => $x: ($x, be wrong with, bonnie wright) => $x: ($x, be, bonnie wright) => (r0.arg1: the Weasley siblings, r0.namespace: reverb, r0.arg2: Bonnie Wright, r0.rel: were portrayed by) => the Weasley siblings
What is Bonnie Wrights age?	scenes ginny	7572.471101237729	what be wrong with bonnie wright ? => $x: ($x, be wrong with, bonnie wright) => $x: ($x, be, bonnie wright) => (r0.arg1: the scenes Ginny, r0.namespace: reverb, r0.arg2: British actress Bonnie Wright, r0.rel: is portrayed by) => the scenes Ginny
What is Bonnie Wrights age?	david	7572.471101237729	what be wrong with bonnie wright ? => $x: ($x, be wrong with, bonnie wright) => $x: ($x, be, bonnie wright) => (r0.arg1: David, r0.namespace: reverb, r0.arg2: actress Bonnie Wright, r0.rel: will be starring in) => David
What is Bonnie Wrights age?	asam	7389.4245749253705	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: Asam, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: loved) => Asam
What is Bonnie Wrights age?	tricky	7389.4245749253705	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: Tricky, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: loves) => Tricky
What is Bonnie Wrights age?	dolly	7389.362873852033	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: Dolly, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: loved playing with) => Dolly
What is Bonnie Wrights age?	pauline kael	7389.362873852033	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: Pauline Kael, r0.namespace: reverb, r0.arg2: Bonnie and Clyde, r0.rel: loved) => Pauline Kael
What is Bonnie Wrights age?	students	7389.303376388458	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: Students, r0.namespace: reverb, r0.arg2: Bonnie?s Painted Face, r0.rel: love taking) => Students
What is Bonnie Wrights age?	i?m sure clyde	7388.62457492537	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: I?m sure Clyde, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: loved) => I?m sure Clyde
What is Bonnie Wrights age?	opportunity	7388.62457492537	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: the opportunity, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: Love) => the opportunity
What is Bonnie Wrights age?	lions	7388.586011754534	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: the lions, r0.namespace: reverb, r0.arg2: Sandra Bonnie, r0.rel: love) => the lions
What is Bonnie Wrights age?	about 12 ponytails	7388.586011754534	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: about 12 ponytails, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: really love) => about 12 ponytails
What is Bonnie Wrights age?	6677en rats	7388.586011754534	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: 6677EN Rats, r0.namespace: reverb, r0.arg2: Bonnie Pryor, r0.rel: Love) => 6677EN Rats
What is Bonnie Wrights age?	kids	7388.562873852033	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: the kids, r0.namespace: reverb, r0.arg2: Bonnie Springs, r0.rel: will love) => the kids
What is Bonnie Wrights age?	great	7388.5474485836985	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: Great, r0.namespace: reverb, r0.arg2: the Bonnie Bleu boots, r0.rel: love) => Great
What is Bonnie Wrights age?	game developer	7388.5364305348885	who love bonnie wright ? => $x: ($x, love, bonnie wright) => $x: ($x, love, bonnie) => (r0.arg1: the game developer, r0.namespace: reverb, r0.arg2: this bonnie wee land, r0.rel: love around) => the game developer
What is Bonnie Wrights age?	attached	7283.490552316975	picture of bonnie wright ? => $x: ($x, be picture of, bonnie wright) => $x: ($x, be picture of, bonnie) => (r0.arg1: Attached, r0.namespace: reverb, r0.arg2: Bonnie, r0.rel: is a picture of) => Attached
Who wins the WWE title?	mark henry	7492.800012694824	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Mark Henry, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mark Henry) => Mark Henry; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Mark Henry, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mark Henry) => Mark Henry; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Mark Henry, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Mark Henry
Who wins the WWE title?	undertaker	7492.800012694824	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Undertaker, r1.rel: won, r0.namespace: freebase, r1.arg2: his first WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Undertaker) => The Undertaker; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Undertaker, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Undertaker) => The Undertaker; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Undertaker, r1.rel: won, r0.namespace: freebase, r1.arg2: his first WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Undertaker) => The Undertaker; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Undertaker, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Undertaker) => The Undertaker; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Undertaker, r0.namespace: reverb, r0.arg2: his first WWE title, r0.rel: won) => Undertaker; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: The Undertaker, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Undertaker
Who wins the WWE title?	triple h	7492.800012694824	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; which team have the wwe title ? => $x: ($x, "type", team) ($x, have, the wwe title) => $x: ($x, "type", team) ($x, have, wwe title) => (r0.arg1: Triple H, r1.rel: has held, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Triple H) => Triple H; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Triple H, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Triple H) => Triple H; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Triple H, r1.rel: win, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Triple H) => Triple H; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has held) => Triple H; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Triple H, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: win) => Triple H
Who wins the WWE title?	rob van dam	7492.800012694824	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rob Van Dam) => Rob Van Dam; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Rob Van Dam) => Rob Van Dam; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Rob Van Dam, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Rob Van Dam
Who wins the WWE title?	edge	7492.800012694824	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Edge) => Edge; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Edge, r1.rel: would later win, r0.namespace: freebase, r1.arg2: the WWE Tag Team Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Edge, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Edge) => Edge; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Edge, r1.rel: would later win, r0.namespace: freebase, r1.arg2: the WWE Tag Team Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Edge) => Edge; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Edge; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Edge, r0.namespace: reverb, r0.arg2: the WWE Tag Team Titles, r0.rel: would later win) => Edge
Who wins the WWE title?	cm punk	7492.800012694824	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; which team have the wwe title ? => $x: ($x, "type", team) ($x, have, the wwe title) => $x: ($x, "type", team) ($x, have, wwe title) => (r0.arg1: CM Punk, r1.rel: have taken, r0.namespace: freebase, r1.arg2: their WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: CM Punk) => CM Punk; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: CM Punk, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: CM Punk) => CM Punk; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: CM Punk, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: CM Punk) => CM Punk; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: their WWE Title, r0.rel: have taken) => CM Punk; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: CM Punk, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => CM Punk
Who wins the WWE title?	eddie guerrero	7492.769162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; which team have the wwe title ? => $x: ($x, "type", team) ($x, have, the wwe title) => $x: ($x, "type", team) ($x, have, wwe title) => (r0.arg1: Eddie Guerrero, r1.rel: had made, r0.namespace: freebase, r1.arg2: a successful WWE title defense, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Eddie Guerrero) => Eddie Guerrero; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Eddie Guerrero) => Eddie Guerrero; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Eddie Guerrero) => Eddie Guerrero; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: a successful WWE title defense, r0.rel: had made) => Eddie Guerrero; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Eddie Guerrero, r0.namespace: reverb, r0.arg2: the WWE Tag Titles, r0.rel: won) => Eddie Guerrero
Who wins the WWE title?	tony atlas	7492.769162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Tony Atlas, r1.rel: won, r0.namespace: freebase, r1.arg2: the Wwe Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Tony Atlas) => Tony Atlas; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Tony Atlas, r1.rel: won, r0.namespace: freebase, r1.arg2: the Wwe Tag Titles, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Tony Atlas) => Tony Atlas; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Tony Atlas, r0.namespace: reverb, r0.arg2: the Wwe Tag Titles, r0.rel: won) => Tony Atlas
Who wins the WWE title?	john cena	7492.769162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: John Cena, r1.rel: won, r0.namespace: freebase, r1.arg2: a WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Cena) => John Cena; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: John Cena, r1.rel: just won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Cena) => John Cena; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: John Cena, r1.rel: won, r0.namespace: freebase, r1.arg2: a WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Cena) => John Cena; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: John Cena, r1.rel: just won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: John Cena) => John Cena; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who have the wwe title win ? => $x: (the wwe title, win, $x) => $x: (wwe title, win, $x) => (r0.arg1: his WWE Title, r0.namespace: reverb, r0.arg2: John Cena, r0.rel: win over) => John Cena; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: a WWE Title, r0.rel: won) => John Cena; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: John Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: just won) => John Cena
Who wins the WWE title?	beth phoenix	7492.769162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Divas title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Beth Phoenix) => Beth Phoenix; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Divas title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Beth Phoenix) => Beth Phoenix; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Beth Phoenix, r0.namespace: reverb, r0.arg2: the WWE Divas title, r0.rel: won) => Beth Phoenix
Who wins the WWE title?	bob backlund	7492.769162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Bob Backlund, r1.rel: wins, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Bob Backlund) => Bob Backlund; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Bob Backlund, r1.rel: wins, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Bob Backlund) => Bob Backlund; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Bob Backlund, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: wins) => Bob Backlund
Who wins the WWE title?	monday	7492.730598987319	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Monday, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: is looking to win) => Monday
Who wins the WWE title?	lex luger	7492.717744597041	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Lex Luger, r1.rel: was going to win, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Lex Luger) => Lex Luger; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Lex Luger, r1.rel: was going to win, r0.namespace: freebase, r1.arg2: the WWE World Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Lex Luger) => Lex Luger; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Lex Luger, r0.namespace: reverb, r0.arg2: the WWE World Title, r0.rel: was going to win) => Lex Luger
Who wins the WWE title?	christian	7492.701676609192	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Christian, r1.rel: finally wins, r0.namespace: freebase, r1.arg2: a major WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Christian) => Christian; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Christian, r1.rel: finally wins, r0.namespace: freebase, r1.arg2: a major WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Christian) => Christian; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Christian, r0.namespace: reverb, r0.arg2: a major WWE title, r0.rel: finally wins) => Christian
Who wins the WWE title?	miz	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Miz) => The Miz; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Miz) => The Miz; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Miz, r1.rel: then went on to win, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Miz) => The Miz; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: openie4, r1.arg1: Miz) => The Miz; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Miz, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: The Miz) => The Miz; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: The Miz, r1.rel: then went on to win, r0.namespace: freebase, r1.arg2: the WWE Title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Miz) => The Miz; who win on the wwe title ? => $x: ($x, win on, the wwe title) => $x: ($x, win on, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win on the wwe title ? => $x: ($x, win on, the wwe title) => $x: ($x, win on, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Miz; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: The Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => The Miz; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Miz, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: then went on to win) => Miz
Who wins the WWE title?	sheamus	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: his WWE US Championship title, r0.rel: has to defend) => Sheamus; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Sheamus, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Sheamus
Who wins the WWE title?	eddie	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Eddie; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Eddie, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Eddie
Who wins the WWE title?	wade barrett	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; which team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Wade Barrett, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wade Barrett) => Wade Barrett; what team win the wwe title ? => $x: ($x, "type", team) ($x, win, the wwe title) => $x: ($x, "type", team) ($x, win, wwe title) => (r0.arg1: Wade Barrett, r1.rel: won, r0.namespace: freebase, r1.arg2: the WWE title, r0.arg2: Solo Wrestler or Team, r0.rel: Type, r1.namespace: reverb, r1.arg1: Wade Barrett) => Wade Barrett; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Wade Barrett, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Wade Barrett
Who wins the WWE title?	jeff	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Jeff, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => Jeff
Who wins the WWE title?	orton	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: had) => Orton; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Orton, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Orton
Who wins the WWE title?	hhh	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: HHH, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: won) => HHH
Who wins the WWE title?	batista	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Batista, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: won) => Batista
Who wins the WWE title?	cena	7492.000012694823	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win at the wwe title ? => $x: ($x, win at, the wwe title) => $x: ($x, win at, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who win at the wwe title ? => $x: ($x, win at, the wwe title) => $x: ($x, win at, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena; who get the wwe title ? => $x: ($x, get, the wwe title) => $x: ($x, get, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: gets) => Cena; who get the wwe title ? => $x: ($x, get, the wwe title) => $x: ($x, get, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: gets) => Cena; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE Title, r0.rel: wins) => Cena; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Cena; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Cena, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: was unsuccessful at winning) => Cena
Who wins the WWE title?	emotional big show	7491.969162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: An emotional Big Show, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => An emotional Big Show
Who wins the WWE title?	samoan bulldozer	7491.969162158155	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: the Samoan Bulldozer, r0.namespace: reverb, r0.arg2: the WWE Intercontinental title, r0.rel: won) => the Samoan Bulldozer
Who wins the WWE title?	punk	7491.953736889821	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who have the wwe title ? => $x: ($x, have, the wwe title) => $x: ($x, have, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: the WWE title, r0.rel: has hoisted up) => Punk; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: reverb, r0.arg2: WWE title, r0.rel: wins) => Punk; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Punk, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: won) => Punk
Who wins the WWE title?	jan 2011	7491.947126060534	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Jan 2011, r0.namespace: reverb, r0.arg2: the wwe title, r0.rel: think will win) => Jan 2011
Who wins the WWE title?	barrett	7490.961376331187	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Barrett, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Barrett
Who wins the WWE title?	jericho	7490.961376331187	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Jericho, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Jericho
Who wins the WWE title?	taker	7490.961376331187	Who wins the WWE title? => $x: ($x, wins, the WWE title) => $x: ($x, wins, WWE title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who realy win the wwe title ? => $x: ($x, realy win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; what win the wwe title ? => $x: ($x, win, the wwe title) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe title overall ? => $x: ($x, win, the wwe title overall) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe title 7 ? => $x: ($x, win, the wwe title 7) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe title 15 ? => $x: ($x, win, the wwe title 15) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker; who win the wwe title 1 ? => $x: ($x, win, the wwe title 1) => $x: ($x, win, wwe title) => (r0.arg1: Taker, r0.namespace: openie4, r0.arg2: the WWE title, r0.rel: win) => Taker
Who wins the WWE title?	sunday	6980.673670019811	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Divas Title, r0.namespace: reverb, r0.arg2: Sunday, r0.rel: was announced for) => Sunday; who have the wwe title win ? => $x: (the wwe title, win, $x) => $x: (wwe title, win, $x) => (r0.arg1: his big WWE Title, r0.namespace: reverb, r0.arg2: Sunday, r0.rel: win on) => Sunday
Who wins the WWE title?	hardcore holly	6980.661274714898	who have the wwe title win ? => $x: (the wwe title, win, $x) => $x: (wwe title, win, $x) => (r0.arg1: their WWE Tag Team Title, r0.namespace: reverb, r0.arg2: Hardcore Holly, r0.rel: win with) => Hardcore Holly
Who wins the WWE title?	sunday btw.	6979.890197093026	who have the wwe title win ? => $x: (the wwe title, win, $x) => $x: (wwe title, win, $x) => (r0.arg1: a @CMPunk WWE title, r0.namespace: reverb, r0.arg2: Sunday BTW., r0.rel: win) => Sunday BTW.
Who wins the WWE title?	line	6979.861274714898	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: The WWE title, r0.namespace: openie4, r0.arg2: the line, r0.rel: was on) => the line; who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: The WWE title, r0.namespace: reverb, r0.arg2: the line, r0.rel: was on) => the line; who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: every WWE title, r0.namespace: reverb, r0.arg2: the line, r0.rel: is on) => the line; who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: WWE World Tag Team Title, r0.namespace: reverb, r0.arg2: the line, r0.rel: was also on) => the line; who have the wwe title win ? => $x: (the wwe title, win, $x) => $x: (wwe title, win, $x) => (r0.arg1: Mick Foley ?s WWE Title, r0.namespace: reverb, r0.arg2: the line, r0.rel: win with) => the line
Who wins the WWE title?	end	6979.843921288022	who have the wwe title win ? => $x: (the wwe title, win, $x) => $x: (wwe title, win, $x) => (r0.arg1: a WWE Championship Spinner Replica Title Belt, r0.namespace: reverb, r0.arg2: the end, r0.rel: won in) => the end
Who wins the WWE title?	wwe	6255.37756804332	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: The WWE Title, r0.namespace: reverb, r0.arg2: WWE, r0.rel: is the centerpiece of) => WWE
Who wins the WWE title?	hell	6255.364713653042	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Titles, r0.namespace: reverb, r0.arg2: Hell, r0.rel: will be defended in) => Hell
Who wins the WWE title?	grabs	6255.331292238317	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: every WWE Title, r0.namespace: reverb, r0.arg2: grabs, r0.rel: will be up for) => grabs
Who wins the WWE title?	awesome match	6254.616131214156	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Title, r0.namespace: reverb, r0.arg2: an awesome match, r0.rel: was) => an awesome match
Who wins the WWE title?	raw brand	6254.594095116535	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: The WWE Title, r0.namespace: reverb, r0.arg2: the Raw brand, r0.rel: is on) => the Raw brand
Who wins the WWE title?	35 days	6254.594095116535	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Title, r0.namespace: reverb, r0.arg2: 35 days, r0.rel: was just) => 35 days
Who wins the WWE title?	rock understudying	6254.57756804332	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: WWE Title, r0.namespace: reverb, r0.arg2: Rock understudying, r0.rel: Was) => Rock understudying
Who wins the WWE title?	extreme rules	6254.57756804332	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Title, r0.namespace: reverb, r0.arg2: the Extreme Rules, r0.rel: was announced for) => the Extreme Rules
Who wins the WWE title?	box-office draw	6254.57756804332	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: The Giant WWE title match, r0.namespace: reverb, r0.arg2: the box-office draw, r0.rel: was) => the box-office draw
Who wins the WWE title?	filler role	6254.57756804332	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE title, r0.namespace: reverb, r0.arg2: a filler role, r0.rel: is used in) => a filler role
Who wins the WWE title?	world heavyweight title	6254.5647136530415	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Title and SD, r0.namespace: reverb, r0.arg2: the World Heavyweight Title, r0.rel: is with) => the World Heavyweight Title
Who wins the WWE title?	different brands	6254.5647136530415	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE title, r0.namespace: reverb, r0.arg2: different brands, r0.rel: has been moved to) => different brands
Who wins the WWE title?	unifyed	6254.561040970105	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: wwe titles, r0.namespace: reverb, r0.arg2: unifyed, r0.rel: are getting) => unifyed
Who wins the WWE title?	tonight?s show	6254.554430140818	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE United States Title, r0.namespace: reverb, r0.arg2: tonight?s show, r0.rel: is set for) => tonight?s show
Who wins the WWE title?	may	6254.554430140818	who be the wwe title win by ? => $x: (the wwe title, be win by, $x) => $x: (wwe title, be, $x) => (r0.arg1: the WWE Tag Team Titles, r0.namespace: reverb, r0.arg2: the May, r0.rel: is being advertised for) => the May
Who was the first credit card issued to?	businesses	2.9935978275372213	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (first credit card, was issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (first credit card, issued to, $x) => (r0.arg1: The first security bank credit card, r0.namespace: reverb, r0.arg2: businesses, r0.rel: is issued to) => businesses
Who was the first credit card issued to?	new customers	2.216093010524828	Who was the first credit card issued to? => $x: (the first credit card, was issued to, $x) => $x: (first credit card, was issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers; Who was the first credit card issued to? => $x: (the first credit card, issued to, $x) => $x: (first credit card, issued to, $x) => (r0.arg1: The first 100,000 credit cards, r0.namespace: reverb, r0.arg2: new customers, r0.rel: were issued to) => new customers
What is a tortoises habitat like?	management	7779.664906999453	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: habitat and tortoises, r0.namespace: reverb, r0.arg2: management, r0.rel: can be used for) => management
What is a tortoises habitat like?	grasses bromus rubens	7778.911182804456	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: the grasses Bromus rubens, r0.rel: were) => the grasses Bromus rubens
What is a tortoises habitat like?	private corporate ownership	7778.882260426329	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat, r0.namespace: reverb, r0.arg2: private or corporate ownership, r0.rel: is in) => private or corporate ownership
What is a tortoises habitat like?	development	7778.87261963362	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: tortoise habitat, r0.namespace: reverb, r0.arg2: development, r0.rel: have been cleared for) => development
What is a tortoises habitat like?	number	7778.87261963362	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: Gopher tortoise habitat, r0.namespace: reverb, r0.arg2: a number, r0.rel: is impacted by) => a number
What is a tortoises habitat like?	positions	7778.864906999453	what be a tortoise habitat look like ? => $x: (a tortoise habitat, be look like, $x) => $x: (tortoise habitat, be, $x) => (r0.arg1: gopher tortoise habitat area, r0.namespace: reverb, r0.arg2: the positions, r0.rel: was estimated from) => the positions
What is a tortoises habitat like?	grazing	6299.794919518068	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: Grazing, r0.namespace: reverb, r0.arg2: important desert tortoise habitat, r0.rel: is even permitted on) => Grazing; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: Grazing, r0.namespace: reverb, r0.arg2: important desert tortoise habitat, r0.rel: is even permitted on) => Grazing
What is a tortoises habitat like?	good faith belief	6299.024668249856	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: a good faith belief, r0.namespace: reverb, r0.arg2: desert tortoise habitat, r0.rel: there was) => a good faith belief; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: a good faith belief, r0.namespace: reverb, r0.arg2: desert tortoise habitat, r0.rel: there was) => a good faith belief
What is a tortoises habitat like?	first trial	6299.012272944944	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: The first trial, r0.namespace: reverb, r0.arg2: gopher tortoise habitat, r0.rel: is focused on) => The first trial; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: The first trial, r0.namespace: reverb, r0.arg2: gopher tortoise habitat, r0.rel: is focused on) => The first trial
What is a tortoises habitat like?	shivwits	6299.012272944944	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: the Shivwits, r0.namespace: reverb, r0.arg2: desert tortoise habitat, r0.rel: is managed as) => the Shivwits; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: the Shivwits, r0.namespace: reverb, r0.arg2: desert tortoise habitat, r0.rel: is managed as) => the Shivwits
What is a tortoises habitat like?	millers sez	6299.0026321522355	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: the Millers SEZ, r0.namespace: reverb, r0.arg2: desert tortoise habitat, r0.rel: are all southwest of) => the Millers SEZ; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: the Millers SEZ, r0.namespace: reverb, r0.arg2: desert tortoise habitat, r0.rel: are all southwest of) => the Millers SEZ
What is a tortoises habitat like?	four times	6299.0026321522355	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: four times, r0.namespace: reverb, r0.arg2: key desert tortoise habitat, r0.rel: is located on) => four times; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: four times, r0.namespace: reverb, r0.arg2: key desert tortoise habitat, r0.rel: is located on) => four times
What is a tortoises habitat like?	money	6298.749972817386	what be a tortoise habitat ? => $x: ($x, be, a tortoise habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: money, r0.namespace: openie4, r0.arg2: buy and protect tortoise habitat elsewhere, r0.rel: was used to) => money; what be a tortoise natual habitat ? => $x: ($x, be, a tortoise natual habitat) => $x: ($x, be, tortoise habitat) => (r0.arg1: money, r0.namespace: openie4, r0.arg2: buy and protect tortoise habitat elsewhere, r0.rel: was used to) => money
What is a tortoises habitat like?	europe	6239.226536168327	what habitat do a tortoise need ? => $x: ($x, "type", habitat) (a tortoise, need, $x) => $x: ($x, "type", habitat) (tortoise, need, $x) => (r0.arg1: Europe, r1.rel: need special care in, r0.namespace: freebase, r1.arg2: Europe, r0.arg2: Habitat, r0.rel: Type, r1.namespace: reverb, r1.arg1: these tortoises) => Europe
What is a tortoises habitat like?	time	6171.986000678765	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: the time, r0.rel: lived in) => the time
What is a tortoises habitat like?	hoan kiem lake	6171.928155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: the tortoises, r0.namespace: reverb, r0.arg2: Hoan Kiem Lake, r0.rel: still live in) => Hoan Kiem Lake
What is a tortoises habitat like?	slow motion	6171.899233544384	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: the tortoise, r0.namespace: reverb, r0.arg2: slow motion, r0.rel: is content to live in) => slow motion
What is a tortoises habitat like?	tank	6171.243845435019	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: a tortoise, r0.namespace: reverb, r0.arg2: a tank, r0.rel: lived in) => a tank; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: openie4, r0.arg2: a tank, r0.rel: lived in) => a tank; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: any tortoise, r0.namespace: reverb, r0.arg2: a tank, r0.rel: should ever live in) => a tank
What is a tortoises habitat like?	side garden	6171.243845435019	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: the side garden, r0.rel: lived in) => the side garden
What is a tortoises habitat like?	group	6171.197569630015	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: a group, r0.rel: can live in) => a group
What is a tortoises habitat like?	park	6171.186000678765	what type of habitat do a tortoise live ? => $x: ($x, "type", habitat) (a tortoise, live, $x) => $x: ($x, "type", habitat) (tortoise, live, $x) => (r0.arg1: Park, r1.rel: live in, r0.namespace: freebase, r1.arg2: the park, r0.arg2: Habitat, r0.rel: Type, r1.namespace: reverb, r1.arg1: tortoises) => Park; what habitat do a tortoise live ? => $x: ($x, "type", habitat) (a tortoise, live, $x) => $x: ($x, "type", habitat) (tortoise, live, $x) => (r0.arg1: Park, r1.rel: live in, r0.namespace: freebase, r1.arg2: the park, r0.arg2: Habitat, r0.rel: Type, r1.namespace: reverb, r1.arg1: tortoises) => Park; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: the park, r0.rel: live in) => the park
What is a tortoises habitat like?	nature preserve	6171.186000678765	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: the nature preserve, r0.rel: live in) => the nature preserve
What is a tortoises habitat like?	lake today	6171.166719093347	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: a gigantic tortoise, r0.namespace: reverb, r0.arg2: the lake today, r0.rel: still live in) => the lake today
What is a tortoises habitat like?	marshes	6171.166719093347	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: the marshes, r0.rel: lived on in) => the marshes; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: A tortoise, r0.namespace: reverb, r0.arg2: the marshes, r0.rel: had lived contentedly in) => the marshes
What is a tortoises habitat like?	mojave colorado deserts	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: These tortoises, r0.namespace: reverb, r0.arg2: the Mojave and Colorado deserts, r0.rel: live in) => the Mojave and Colorado deserts
What is a tortoises habitat like?	savannah grassland areas	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Leopard tortoises, r0.namespace: reverb, r0.arg2: savannah and grassland areas, r0.rel: live in) => savannah and grassland areas
What is a tortoises habitat like?	newspaper-lined bureau drawers	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Little tortoises, r0.namespace: reverb, r0.arg2: newspaper-lined bureau drawers, r0.rel: lived in) => newspaper-lined bureau drawers
What is a tortoises habitat like?	sandy areas	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: the tortoises, r0.namespace: reverb, r0.arg2: sandy areas, r0.rel: live in) => sandy areas
What is a tortoises habitat like?	certain deep water hole	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: tortoises, r0.namespace: reverb, r0.arg2: a certain deep water hole, r0.rel: continually lived in) => a certain deep water hole
What is a tortoises habitat like?	arid habitats	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: arid habitats, r0.rel: usually live in) => arid habitats
What is a tortoises habitat like?	places	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: some tortoises, r0.namespace: reverb, r0.arg2: places, r0.rel: live in) => places
What is a tortoises habitat like?	different habitats	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Desert tortoises, r0.namespace: reverb, r0.arg2: different habitats, r0.rel: live in) => different habitats
What is a tortoises habitat like?	burrows	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Gopher tortoises, r0.namespace: reverb, r0.arg2: burrows, r0.rel: live in) => burrows; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Gopher tortoises, r0.namespace: openie4, r0.arg2: burrows, r0.rel: live in) => burrows; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Gopher Tortoises, r0.namespace: reverb, r0.arg2: burrows, r0.rel: live in) => burrows
What is a tortoises habitat like?	excess	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: excess, r0.rel: can live in) => excess
What is a tortoises habitat like?	southern south carolina	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Gopher tortoises, r0.namespace: reverb, r0.arg2: southern South Carolina, r0.rel: live in) => southern South Carolina
What is a tortoises habitat like?	dry , arid places	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: dry , arid places, r0.rel: typically live in) => dry , arid places
What is a tortoises habitat like?	holes	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: These tortoises, r0.namespace: reverb, r0.arg2: holes, r0.rel: lived in) => holes
What is a tortoises habitat like?	pond	6171.1512938250125	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: The tortoise, r0.namespace: reverb, r0.arg2: a pond, r0.rel: lived in) => a pond; where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: the Great Tortoise, r0.namespace: reverb, r0.arg2: a pond, r0.rel: lived in) => a pond
What is a tortoises habitat like?	man-made environments	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: man-made environments, r0.rel: can also live in) => man-made environments
What is a tortoises habitat like?	indian ocean	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: giant tortoises, r0.namespace: reverb, r0.arg2: the Indian Ocean, r0.rel: once lived in) => the Indian Ocean
What is a tortoises habitat like?	hot , dry desert	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: That tortoise, r0.namespace: reverb, r0.arg2: the hot , dry desert, r0.rel: is living in) => the hot , dry desert
What is a tortoises habitat like?	outdoor enclosures	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Russian Tortoises, r0.namespace: reverb, r0.arg2: outdoor enclosures, r0.rel: can live in) => outdoor enclosures
What is a tortoises habitat like?	arctic	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: tortoises and alligators, r0.namespace: reverb, r0.arg2: the Arctic, r0.rel: lived in) => the Arctic
What is a tortoises habitat like?	ancient pyramid	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: the tortoises, r0.namespace: reverb, r0.arg2: an ancient pyramid, r0.rel: had lived in) => an ancient pyramid
What is a tortoises habitat like?	wgbh studios	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: the WGBH studios, r0.rel: has performed live in) => the WGBH studios
What is a tortoises habitat like?	hot dry desert environments	6171.128155922511	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: some tortoises, r0.namespace: reverb, r0.arg2: hot and dry desert environments, r0.rel: live in very) => hot and dry desert environments
What is a tortoises habitat like?	areas	6171.111628849296	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: areas, r0.rel: are able to live in) => areas
What is a tortoises habitat like?	deserts	6171.111628849296	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Arizona Desert tortoises, r0.namespace: reverb, r0.arg2: the deserts, r0.rel: have lived in) => the deserts
What is a tortoises habitat like?	tower	6171.111628849296	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: their nearly 180-year-old tortoise, r0.namespace: reverb, r0.arg2: the Tower, r0.rel: live in) => the Tower
What is a tortoises habitat like?	yard	6171.111628849296	where do a tortoise live ? => $x: (a tortoise, live in, $x) => $x: (tortoise, live in, $x) => (r0.arg1: Tortoises, r0.namespace: reverb, r0.arg2: a yard, r0.rel: have been living freely in) => a yard
What is Utah's most famous food?	utah	5054.8545689393195	what be utah s food ? => $x: ($x, be, utah s food) => $x: ($x, be, utah s food) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: a Utah ?s Own food store, r0.rel: may be qualified as) => Utah; what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: Utah, r0.namespace: reverb, r0.arg2: a Utah ?s Own food store, r0.rel: may be qualified as) => Utah
What is Utah's most famous food?	main food bank back home	5054.095886622358	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: The main food bank back home, r0.namespace: reverb, r0.arg2: the Utah Food Bank, r0.rel: is) => The main food bank back home
What is Utah's most famous food?	spread	5054.083491317446	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: The spread, r0.namespace: reverb, r0.arg2: two Utah food bloggers, r0.rel: There are) => The spread
What is Utah's most famous food?	utah ? conference	5054.073850524737	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: Utah ? conference, r0.namespace: reverb, r0.arg2: Utah Food Bank Services, r0.rel: was sponsored by) => Utah ? conference
What is Utah's most famous food?	kits	5054.06613789057	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: The kits, r0.namespace: reverb, r0.arg2: the Utah Food Bank, r0.rel: will be donated to) => The kits
What is Utah's most famous food?	5,500 meals	5054.06613789057	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: 5,500 meals, r0.namespace: reverb, r0.arg2: the Utah Food Bank, r0.rel: ? was donated to) => 5,500 meals
What is Utah's most famous food?	auction	5054.06613789057	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: the auction, r0.namespace: reverb, r0.arg2: the Utah Food Bank, r0.rel: will be split between) => the auction
What is Utah's most famous food?	industrial food	5054.059827553524	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: Industrial Food, r0.namespace: reverb, r0.arg2: the Slow Food Utah Books section, r0.rel: is listed in) => Industrial Food
What is Utah's most famous food?	jell-o	5053.835214161101	what be utah most famouse food ? => $x: ($x, be, utah most famouse food) => $x: ($x, be, utah food) => (r0.arg1: Jell-O, r0.namespace: openie4, r0.arg2: the official snack food of Utah, r0.rel: is) => Jell-O
What is Utah's most famous food?	canada	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => Canada; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => Canada; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => Canada; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Canada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => Canada
What is Utah's most famous food?	children	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: children, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => children; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: children, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => children; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: children, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => children; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: children, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => children
What is Utah's most famous food?	slavery	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: slavery, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => slavery; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: slavery, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => slavery; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: slavery, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => slavery; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: slavery, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => slavery
What is Utah's most famous food?	universal health care	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: universal health care, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => universal health care; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: universal health care, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => universal health care; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: universal health care, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => universal health care; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: universal health care, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => universal health care
What is Utah's most famous food?	pupil	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: pupil, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => pupil; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: pupil, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => pupil; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: pupil, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => pupil; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: pupil, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => pupil
What is Utah's most famous food?	bankruptcies	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: bankruptcies, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => bankruptcies; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: bankruptcies, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => bankruptcies; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: bankruptcies, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => bankruptcies; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: bankruptcies, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => bankruptcies
What is Utah's most famous food?	tooele county	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Tooele County, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Tooele County; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Tooele County, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Tooele County; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Tooele County, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Tooele County; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Tooele County, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Tooele County
What is Utah's most famous food?	nevada	4881.199291131369	what food be famous from utah ? => $x: ($x, "type", food) ($x, be famous from, utah) => $x: ($x, "type", food) ($x, be, utah) => (r0.arg1: Nevada, r1.rel: were, r0.namespace: freebase, r1.arg2: Utah, r0.arg2: Food producing region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nevada) => Nevada; what kind of food be most famous in utah ? => $x: ($x, "type", food) ($x, be most famous in, utah) => $x: ($x, "type", food) ($x, be, utah) => (r0.arg1: Nevada, r1.rel: were, r0.namespace: freebase, r1.arg2: Utah, r0.arg2: Food producing region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nevada) => Nevada; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Nevada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => Nevada; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Nevada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => Nevada; what food be famous in utah ? => $x: ($x, "type", food) ($x, be famous in, utah) => $x: ($x, "type", food) ($x, be, utah) => (r0.arg1: Nevada, r1.rel: were, r0.namespace: freebase, r1.arg2: Utah, r0.arg2: Food producing region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nevada) => Nevada; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Nevada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => Nevada; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Nevada, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => Nevada
What is Utah's most famous food?	marriage	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: marriage, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => marriage; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: marriage, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => marriage; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: marriage, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => marriage; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: marriage, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => marriage
What is Utah's most famous food?	temple square	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Temple Square, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Temple Square; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Temple Square, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Temple Square; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Temple Square, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Temple Square; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Temple Square, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Temple Square
What is Utah's most famous food?	dead horse point state park	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Dead Horse Point State Park, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Dead Horse Point State Park; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Dead Horse Point State Park, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Dead Horse Point State Park; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Dead Horse Point State Park, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Dead Horse Point State Park; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Dead Horse Point State Park, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Dead Horse Point State Park
What is Utah's most famous food?	fine arts	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Fine Arts, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Fine Arts; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Fine Arts, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Fine Arts; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Fine Arts, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Fine Arts; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Fine Arts, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Fine Arts
What is Utah's most famous food?	zion	4881.199291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Zion, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Zion; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Zion, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Zion; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Zion, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Zion; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Zion, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Zion
What is Utah's most famous food?	1999	4880.565200222279	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: 1999, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => 1999; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: 1999, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => 1999; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: 1999, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => 1999; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: 1999, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => 1999
What is Utah's most famous food?	april 27 , 2010	4880.565200222279	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: April 27 , 2010, r0.namespace: reverb, r0.arg2: Utah, r0.rel: Is) => April 27 , 2010; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: April 27 , 2010, r0.namespace: reverb, r0.arg2: Utah, r0.rel: Is) => April 27 , 2010; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: April 27 , 2010, r0.namespace: reverb, r0.arg2: Utah, r0.rel: Is) => April 27 , 2010; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: April 27 , 2010, r0.namespace: reverb, r0.arg2: Utah, r0.rel: Is) => April 27 , 2010
What is Utah's most famous food?	trax	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: TRAX, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => TRAX; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: TRAX, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => TRAX; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: TRAX, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => TRAX; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: TRAX, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => TRAX
What is Utah's most famous food?	kilpack , 13	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Kilpack , 13, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Kilpack , 13; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Kilpack , 13, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Kilpack , 13; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Kilpack , 13, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Kilpack , 13; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Kilpack , 13, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Kilpack , 13
What is Utah's most famous food?	rowe	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Rowe, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Rowe; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Rowe, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Rowe; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Rowe, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Rowe; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Rowe, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Rowe
What is Utah's most famous food?	new report	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the new report, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => the new report; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the new report, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => the new report; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the new report, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => the new report; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the new report, r0.namespace: reverb, r0.arg2: Utah, r0.rel: were) => the new report
What is Utah's most famous food?	vegas project	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the Vegas project, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the Vegas project; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the Vegas project, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the Vegas project; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the Vegas project, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the Vegas project; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the Vegas project, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the Vegas project
What is Utah's most famous food?	maynard	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Maynard, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Maynard; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Maynard, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Maynard; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Maynard, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Maynard; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Maynard, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Maynard
What is Utah's most famous food?	colorado plateau	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: The Colorado Plateau, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => The Colorado Plateau; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: The Colorado Plateau, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => The Colorado Plateau; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: The Colorado Plateau, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => The Colorado Plateau; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: The Colorado Plateau, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => The Colorado Plateau
What is Utah's most famous food?	mr. rampton	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Mr. Rampton, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Mr. Rampton; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Mr. Rampton, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Mr. Rampton; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Mr. Rampton, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Mr. Rampton; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Mr. Rampton, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Mr. Rampton
What is Utah's most famous food?	utah business magazine utah business magazine	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Utah Business Magazine Utah Business magazine, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Utah Business Magazine Utah Business magazine; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Utah Business Magazine Utah Business magazine, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Utah Business Magazine Utah Business magazine; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Utah Business Magazine Utah Business magazine, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Utah Business Magazine Utah Business magazine; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Utah Business Magazine Utah Business magazine, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Utah Business Magazine Utah Business magazine
What is Utah's most famous food?	biggest gainer	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the biggest gainer, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => the biggest gainer; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the biggest gainer, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => the biggest gainer; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the biggest gainer, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => the biggest gainer; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the biggest gainer, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => the biggest gainer
What is Utah's most famous food?	secretary leavitt	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Secretary Leavitt, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Secretary Leavitt; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Secretary Leavitt, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Secretary Leavitt; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Secretary Leavitt, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Secretary Leavitt; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Secretary Leavitt, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Secretary Leavitt
What is Utah's most famous food?	hines	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Hines, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Hines; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Hines, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Hines; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Hines, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Hines; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Hines, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Hines
What is Utah's most famous food?	divorce	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the divorce, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the divorce; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the divorce, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the divorce; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the divorce, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the divorce; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the divorce, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the divorce
What is Utah's most famous food?	credit profile salt lake city	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: CREDIT PROFILE Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => CREDIT PROFILE Salt Lake City; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: CREDIT PROFILE Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => CREDIT PROFILE Salt Lake City; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: CREDIT PROFILE Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => CREDIT PROFILE Salt Lake City; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: CREDIT PROFILE Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => CREDIT PROFILE Salt Lake City
What is Utah's most famous food?	point	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the point, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => the point; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the point, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => the point; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the point, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => the point; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the point, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => the point
What is Utah's most famous food?	northern utah mountains	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the northern Utah mountains, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the northern Utah mountains; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: the northern Utah mountains, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the northern Utah mountains; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the northern Utah mountains, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the northern Utah mountains; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: the northern Utah mountains, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => the northern Utah mountains
What is Utah's most famous food?	attire location salt lake city	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Attire Location Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Attire Location Salt Lake City; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Attire Location Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Attire Location Salt Lake City; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Attire Location Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Attire Location Salt Lake City; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Attire Location Salt Lake City, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => Attire Location Salt Lake City
What is Utah's most famous food?	place	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => place; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => place; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => place; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: place, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => place
What is Utah's most famous food?	devonte christopher	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: DeVonte Christopher, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => DeVonte Christopher; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: DeVonte Christopher, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => DeVonte Christopher; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: DeVonte Christopher, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => DeVonte Christopher; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: DeVonte Christopher, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => DeVonte Christopher
What is Utah's most famous food?	ben davis	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Ben Davis, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Ben Davis; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Ben Davis, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Ben Davis; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Ben Davis, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Ben Davis; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Ben Davis, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Ben Davis
What is Utah's most famous food?	one exception	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: one exception, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => one exception; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: one exception, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => one exception; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: one exception, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => one exception; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: one exception, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => one exception
What is Utah's most famous food?	one recent example	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: One recent example, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => One recent example; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: One recent example, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => One recent example; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: One recent example, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => One recent example; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: One recent example, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => One recent example
What is Utah's most famous food?	brown	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Brown, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Brown; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: Brown, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Brown; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Brown, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Brown; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: Brown, r0.namespace: reverb, r0.arg2: Utah, r0.rel: was) => Brown
What is Utah's most famous food?	usc	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: USC, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => USC; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: USC, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => USC; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: USC, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => USC; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: USC, r0.namespace: reverb, r0.arg2: Utah, r0.rel: are) => USC
What is Utah's most famous food?	i?ve	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: I?ve, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => I?ve; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: I?ve, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => I?ve; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: I?ve, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => I?ve; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: I?ve, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => I?ve
What is Utah's most famous food?	common knowledge	4880.399291131369	what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: common knowledge, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => common knowledge; what be the food from utah ? => $x: ($x, be the food from, utah) => $x: ($x, be, utah) => (r0.arg1: common knowledge, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => common knowledge; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: common knowledge, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => common knowledge; what be some food from utah ? => $x: ($x, be some food from, utah) => $x: ($x, be, utah) => (r0.arg1: common knowledge, r0.namespace: reverb, r0.arg2: Utah, r0.rel: is) => common knowledge
What do fairy tales have in common?	adults	8189.576148763679	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: adults, r0.rel: were meant for) => adults; what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: this fairy tale, r0.namespace: reverb, r0.arg2: adults, r0.rel: meant for) => adults; what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy-tales, r0.namespace: reverb, r0.arg2: adults, r0.rel: were meant for) => adults
What do fairy tales have in common?	children	8189.553010861177	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: children, r0.rel: have always attracted) => children; what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: all fairy tales, r0.namespace: reverb, r0.arg2: children, r0.rel: are meant for) => children
What do fairy tales have in common?	sleeping	8189.52408848305	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: a fairy tale And dreams, r0.namespace: reverb, r0.arg2: sleeping, r0.rel: were meant for) => sleeping
What do fairy tales have in common?	grown-ups	8188.810855617431	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: grown-ups, r0.rel: meant for) => grown-ups
What do fairy tales have in common?	word vegetable	8188.753010861177	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: the word vegetable, r0.rel: gives new meaning to) => the word vegetable
What do fairy tales have in common?	readers	8188.753010861177	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: these fairy tales, r0.namespace: reverb, r0.arg2: readers, r0.rel: meant to entertain) => readers
What do fairy tales have in common?	lesson	8188.753010861177	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: a lesson, r0.rel: are meant to teach) => a lesson
What do fairy tales have in common?	satiric jabs	8188.736483787962	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: The fairy tales, r0.namespace: reverb, r0.arg2: satiric jabs, r0.rel: were originally meant as) => satiric jabs
What do fairy tales have in common?	sweet bedtime stories	8188.736483787962	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: Not all fairy tales, r0.namespace: reverb, r0.arg2: sweet bedtime stories, r0.rel: are meant to be) => sweet bedtime stories
What do fairy tales have in common?	mass appeal	8188.485452119414	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: a simplistic fairy tale comedy, r0.namespace: openie4, r0.arg2: mass appeal, r0.rel: is meant for) => mass appeal
What do fairy tales have in common?	someone else	8187.772219253795	what do fairy tale mean ? => $x: (fairy tale, mean, $x) => $x: (fairy tale, mean, $x) => (r0.arg1: fairy tales, r0.namespace: openie4, r0.arg2: someone else, r0.rel: Meant for) => someone else
What do fairy tales have in common?	top	7516.289941524084	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: the top, r0.namespace: reverb, r0.arg2: a true fairy tale castle, r0.rel: is) => the top
What do fairy tales have in common?	international film legend	7515.489941524083	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: an international film legend, r0.namespace: reverb, r0.arg2: a true modern-day fairy tale, r0.rel: was) => an international film legend
What do fairy tales have in common?	original	7515.473414450868	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: The original, r0.namespace: reverb, r0.arg2: a true fairy tale, r0.rel: was a short tale with) => The original
What do fairy tales have in common?	hanna titania?s life	7515.46056006059	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: Hanna Titania?s life, r0.namespace: reverb, r0.arg2: a true fairy tale, r0.rel: has been lived as) => Hanna Titania?s life
What do fairy tales have in common?	kettler happy trike princess	7515.456887377653	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: The KETTLER Happy Trike Princess, r0.namespace: reverb, r0.arg2: a true fairy tale-perfect, r0.rel: is) => The KETTLER Happy Trike Princess
What do fairy tales have in common?	austria trips/ austria	7515.4155696946145	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: Austria Trips/ Austria, r0.namespace: reverb, r0.arg2: a true fairy-tale, r0.rel: can be) => Austria Trips/ Austria
What do fairy tales have in common?	city	7515.4155696946145	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: The city, r0.namespace: reverb, r0.arg2: a true fairy-tale destination, r0.rel: is) => The city
What do fairy tales have in common?	jen faulconer?s livelihood	7515.390779084792	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: Jen Faulconer?s livelihood, r0.namespace: reverb, r0.arg2: a fairy-tale-come-true, r0.rel: is) => Jen Faulconer?s livelihood
What do fairy tales have in common?	offers	7514.421923696954	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: Offers, r0.namespace: openie4, r0.arg2: make fairy tale come true, r0.rel: are designed to) => Offers
What do fairy tales have in common?	quince - offers	7514.421923696954	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: Quince - Offers, r0.namespace: openie4, r0.arg2: make fairy tale come true, r0.rel: are designed to) => Quince - Offers
What do fairy tales have in common?	eucatastrophic tale	7514.370506135839	what be true about fairy tale ? => $x: ($x, be, true about fairy tale) => $x: ($x, be, true fairy tale) => (r0.arg1: The eucatastrophic tale, r0.namespace: openie4, r0.arg2: the true form of fairy-tale, r0.rel: is) => The eucatastrophic tale
What do fairy tales have in common?	ravello	7494.40176028119	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Ravello, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is like being a part of) => Ravello; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Ravello, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is like being a part of) => Ravello
What do fairy tales have in common?	?morality ?	7494.40176028119	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: ?morality ?, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is just part of) => ?morality ?; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: ?morality ?, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is just part of) => ?morality ?
What do fairy tales have in common?	charles de lint	7494.34804729324	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Charles de Lint, r0.namespace: reverb, r0.arg2: Windling?s Fairy Tales Series, r0.rel: is part of) => Charles de Lint; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Charles de Lint, r0.namespace: reverb, r0.arg2: Windling?s Fairy Tales Series, r0.rel: is part of) => Charles de Lint
What do fairy tales have in common?	mass media	7494.3319793053915	what be a part of fairy tale ? => $x: (fairy tale, have part of, $x) => $x: (fairy tale, have part of, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: mass media, r0.rel: have become this much a part of) => mass media
What do fairy tales have in common?	dragon*con 2009	7493.742878762277	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Dragon*Con 2009, r0.namespace: reverb, r0.arg2: a SteamPunk Fairy Tales group, r0.rel: is part of) => Dragon*Con 2009; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Dragon*Con 2009, r0.namespace: reverb, r0.arg2: a SteamPunk Fairy Tales group, r0.rel: is part of) => Dragon*Con 2009
What do fairy tales have in common?	spells	7493.63481442762	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Spells, r0.namespace: reverb, r0.arg2: Fairy Tales, r0.rel: are a part of) => Spells; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Spells, r0.namespace: reverb, r0.arg2: Fairy Tales, r0.rel: are a part of) => Spells
What do fairy tales have in common?	ritz	7493.601760281189	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: the Ritz, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is like being part of) => the Ritz; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: the Ritz, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: is like being part of) => the Ritz
What do fairy tales have in common?	life	7493.596251256784	what be a part of fairy tale ? => $x: (fairy tale, have part of, $x) => $x: (fairy tale, have part of, $x) => (r0.arg1: Fairy tales, r0.namespace: reverb, r0.arg2: life, r0.rel: have been part of) => life
What do fairy tales have in common?	childhood	7493.596251256784	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: childhood, r0.rel: have followed) => childhood; what be a part of fairy tale ? => $x: (fairy tale, have part of, $x) => $x: (fairy tale, have part of, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: childhood, r0.rel: have become part of) => childhood
What do fairy tales have in common?	ducks	7493.576969671366	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: the ducks, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: appear to be part of) => the ducks; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: the ducks, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: appear to be part of) => the ducks
What do fairy tales have in common?	first few days	7493.576969671366	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: The first few days, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: seemed to be part of) => The first few days; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: The first few days, r0.namespace: reverb, r0.arg2: a fairy tale, r0.rel: seemed to be part of) => The first few days
What do fairy tales have in common?	glass slippers	7493.557688085948	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: glass slippers, r0.namespace: reverb, r0.arg2: your fairy tale, r0.rel: can still be a part of) => glass slippers; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: glass slippers, r0.namespace: reverb, r0.arg2: your fairy tale, r0.rel: can still be a part of) => glass slippers
What do fairy tales have in common?	lovely princess?all	7493.548047293239	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: a lovely princess?all, r0.namespace: reverb, r0.arg2: this classic fairy tale, r0.rel: are part of) => a lovely princess?all; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: a lovely princess?all, r0.namespace: reverb, r0.arg2: this classic fairy tale, r0.rel: are part of) => a lovely princess?all
What do fairy tales have in common?	dwarves elves	7493.548047293239	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Dwarves and elves, r0.namespace: reverb, r0.arg2: fairy tales and myths, r0.rel: were part of) => Dwarves and elves; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Dwarves and elves, r0.namespace: reverb, r0.arg2: fairy tales and myths, r0.rel: were part of) => Dwarves and elves
What do fairy tales have in common?	boothouse	7493.53197930539	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Boothouse, r0.namespace: reverb, r0.arg2: our fairy tale folklore .Reminds, r0.rel: is part of) => Boothouse; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Boothouse, r0.namespace: reverb, r0.arg2: our fairy tale folklore .Reminds, r0.rel: is part of) => Boothouse
What do fairy tales have in common?	nid de paradis collection	7493.480561744276	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: the Nid de Paradis collection, r0.namespace: reverb, r0.arg2: the fairy-tale world, r0.rel: is part of) => the Nid de Paradis collection; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: the Nid de Paradis collection, r0.namespace: reverb, r0.arg2: the fairy-tale world, r0.rel: is part of) => the Nid de Paradis collection
What do fairy tales have in common?	ginny	7493.472849110109	what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Ginny, r0.namespace: reverb, r0.arg2: that fairy-tale he?d, r0.rel: was just part of) => Ginny; what be a part of fairy tale ? => $x: ($x, be a part of, fairy tale) => $x: ($x, be part of, fairy tale) => (r0.arg1: Ginny, r0.namespace: reverb, r0.arg2: that fairy-tale he?d, r0.rel: was just part of) => Ginny
What do fairy tales have in common?	genre	7360.071233254521	what be the definition of fairy tale ? => $x: (fairy tale, have definition of, $x) => $x: (fairy tale, definition of, $x) => (r0.arg1: fairy tales, r0.namespace: reverb, r0.arg2: the genre, r0.rel: became an instant definition of) => the genre
What do fairy tales have in common?	truth	7296.750113873068	what do fairy tale have ? => $x: (fairy tale, have, $x) => $x: (fairy tale, have, $x) => (r0.arg1: fairy tale, r0.namespace: reverb, r0.arg2: truth, r0.rel: has a grain of) => truth; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: truth, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is) => truth
What do fairy tales have in common?	parenting	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: PARENTING, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: Are) => PARENTING
What do fairy tales have in common?	bedtime stories	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: bedtime stories, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: were) => bedtime stories
What do fairy tales have in common?	india ?	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: India ?, r0.namespace: reverb, r0.arg2: Fairy Tale, r0.rel: is) => India ?
What do fairy tales have in common?	murals	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: murals, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: were) => murals
What do fairy tales have in common?	tolkien?s	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: Tolkien?s, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: were) => Tolkien?s
What do fairy tales have in common?	violent	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: violent, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => violent
What do fairy tales have in common?	fabrics	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: fabrics, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => fabrics
What do fairy tales have in common?	trade	7296.750113873068	what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: trade, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: is) => trade
What do fairy tales have in common?	wall	7296.750113873068	which feature be common to fairy tale ? => $x: ($x, "type", feature) ($x, be common to, fairy tale) => $x: ($x, "type", feature) ($x, be, fairy tale) => (r0.arg1: The Wall, r1.rel: are, r0.namespace: freebase, r1.arg2: fairy tales, r0.arg2: Geographical Feature, r0.rel: Type, r1.namespace: reverb, r1.arg1: the wall) => The Wall; what be fairy tale ? => $x: ($x, be, fairy tale) => $x: ($x, be, fairy tale) => (r0.arg1: the wall, r0.namespace: reverb, r0.arg2: fairy tales, r0.rel: are) => the wall
What kind of experiments did pavlov do?	target response	3157.604754264787	what be pavlov s experiment ? => $x: ($x, be, pavlov s experiment) => $x: ($x, be, pavlov s experiment) => (r0.arg1: the target response, r0.namespace: reverb, r0.arg2: Pavlov?s experiment, r0.rel: was the tone in) => the target response
Which is the highest playground in india?	first image	6709.717721464919	playground in indium ? => $x: ($x, be playground in, indium) => $x: ($x, be playground in, indium) => (r0.arg1: The first image, r0.namespace: reverb, r0.arg2: India, r0.rel: is a playground in) => The first image
When was Drake born?	new jersey	6698.319434230937	what be drake bear ? => $x: ($x, be, drake bear) => $x: ($x, be, drake bear) => (r0.arg1: New Jersey, r0.namespace: reverb, r0.arg2: the explorer Sir Francis Drake born ??, r0.rel: was) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: State, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: US State, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: U.S. state, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: States and provinces, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what state be drake bear ? => $x: ($x, "type", state) ($x, be, drake bear) => $x: ($x, "type", state) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: States I've been to, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey; what date be drake bear ? => $x: ($x, "type", date) ($x, be, drake bear) => $x: ($x, "type", date) ($x, be, drake bear) => (r0.arg1: New Jersey, r1.rel: was, r0.namespace: freebase, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: Dated location, r0.rel: Type, r1.namespace: reverb, r1.arg1: New Jersey) => New Jersey
When was Drake born?	1961	6518.441684900015	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Nick Drake, r0.namespace: reverb, r0.arg2: 1961, r0.rel: was born in) => 1961; what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: 1961, r1.rel: was born in, r0.namespace: freebase, r1.arg2: 1961, r0.arg2: years, r0.rel: Type, r1.namespace: reverb, r1.arg1: Nick Drake) => 1961
When was Drake born?	august 26	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 26, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 26
When was Drake born?	august 30	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 30, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 30
When was Drake born?	august 7	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 7, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 7
When was Drake born?	august 12	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 12, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 12
When was Drake born?	august 15	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 15, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 15
When was Drake born?	august 14	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 14, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 14
When was Drake born?	august 8	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 8, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 8
When was Drake born?	august 5	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 5, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 5
When was Drake born?	august 3	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 3, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 3
When was Drake born?	august 23	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 23, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 23
When was Drake born?	august 20	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 20, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 20
When was Drake born?	august 24	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 24, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 24
When was Drake born?	august 9	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 9, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 9
When was Drake born?	august 27	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 27, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 27
When was Drake born?	august 19	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 19, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 19
When was Drake born?	august 17	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 17, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 17
When was Drake born?	august 6	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 6, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 6
When was Drake born?	august 25	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 25, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 25
When was Drake born?	august 13	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 13, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 13
When was Drake born?	august 29	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 29, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 29
When was Drake born?	august 18	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 18, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 18
When was Drake born?	august 2	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 2, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 2
When was Drake born?	august 31	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 31, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 31
When was Drake born?	august 22	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 22, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 22
When was Drake born?	august 4	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 4, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 4
When was Drake born?	august 28	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 28, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 28
When was Drake born?	august 10	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 10, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 10
When was Drake born?	august 11	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 11, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 11
When was Drake born?	august 16	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 16, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 16
When was Drake born?	august 21	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 21, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 21
When was Drake born?	august 1	6518.3976127047745	what year be drake be bear in ? => $x: ($x, "type", year) (drake, be bear in, $x) => $x: ($x, "type", year) (drake, be bear in, $x) => (r0.arg1: August 1, r1.rel: was born in, r0.namespace: freebase, r1.arg2: August, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: Drake Fisher) => August 1
When was Drake born?	1540	6508.145193591901	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: reverb, r0.arg2: 1540, r0.rel: was born in) => 1540; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Drake, r0.namespace: openie4, r0.arg2: 1540, r0.rel: was born in) => 1540; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1540, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1540, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Drake) => 1540; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1540, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1540, r0.arg2: year, r0.rel: is a, r1.namespace: openie4, r1.arg1: Drake) => 1540
When was Drake born?	c 1811	6508.11213944547	what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: c 1811, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1811, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: William Drake) => c 1811
When was Drake born?	c 1819	6508.11213944547	what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: c 1819, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1819, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Edwin Drake) => c 1819
When was Drake born?	1819	6508.11213944547	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: Edwin Drake, r0.namespace: reverb, r0.arg2: 1819, r0.rel: was born in) => 1819; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1819, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1819, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: Edwin Drake) => 1819
When was Drake born?	1811	6508.11213944547	When was Drake born? => $x: (Drake, was born in, $x) => $x: (Drake, was born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; When was Drake born? => $x: (Drake, born in, $x) => $x: (Drake, born in, $x) => (r0.arg1: William Drake, r0.namespace: reverb, r0.arg2: 1811, r0.rel: was born in) => 1811; what year be drake be bear in ? => $x: ($x, "is a", year) (drake, be bear in, $x) => $x: ($x, "is a", year) (drake, be bear in, $x) => (r0.arg1: 1811, r1.rel: was born in, r0.namespace: nell, r1.arg2: 1811, r0.arg2: year, r0.rel: is a, r1.namespace: reverb, r1.arg1: William Drake) => 1811
When was Drake born?	october 25	6435.589376429703	what be drake s birthday ? => $x: ($x, be, drake s birthday) => $x: ($x, be, drake s birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25; what be drake birthday ? => $x: ($x, be, drake birthday) => $x: ($x, be, drake birthday) => (r0.arg1: October 25, r0.namespace: reverb, r0.arg2: Drake?s 25 birthday, r0.rel: is) => October 25; what day be drake birthday ? => $x: ($x, "type", day) ($x, be, drake birthday) => $x: ($x, "type", day) ($x, be, drake birthday) => (r0.arg1: October 25, r1.rel: is, r0.namespace: freebase, r1.arg2: Drake?s 25 birthday, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: October 25) => October 25; what year be drake birthday ? => $x: ($x, "type", year) ($x, be, drake birthday) => $x: ($x, "type", year) ($x, be, drake birthday) => (r0.arg1: October 25, r1.rel: is, r0.namespace: freebase, r1.arg2: Drake?s 25 birthday, r0.arg2: Day Of Year, r0.rel: Type, r1.namespace: reverb, r1.arg1: October 25) => October 25
When was Drake born?	selena gomez?s age mike	6374.576185004901	what be drake s age ? => $x: ($x, be, drake s age) => $x: ($x, be, drake s age) => (r0.arg1: Selena Gomez?s age and Mike, r0.namespace: reverb, r0.arg2: Drake?s age, r0.rel: was) => Selena Gomez?s age and Mike
When was Drake born?	blade	6374.541478151149	what be drake s age ? => $x: ($x, be, drake s age) => $x: ($x, be, drake s age) => (r0.arg1: Blade, r0.namespace: reverb, r0.arg2: Drake?s age, r0.rel: was suddenly conscious of) => Blade
When was Drake born?	us-new jersey	6311.367008851296	what country be drake bear ? => $x: ($x, "is a", country) ($x, be, drake bear) => $x: ($x, "is a", country) ($x, be, drake bear) => (r0.arg1: US-New Jersey, r1.rel: was, r0.namespace: nell, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Jersey) => US-New Jersey
When was Drake born?	new_jersey	6174.530454824316	what state be drake bear ? => $x: ($x, "is a", state) ($x, be, drake bear) => $x: ($x, "is a", state) ($x, be, drake bear) => (r0.arg1: New_Jersey, r1.rel: was, r0.namespace: nell, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Jersey) => New_Jersey
When was Drake born?	newjersey	6174.530454824316	what state be drake bear ? => $x: ($x, "is a", state) ($x, be, drake bear) => $x: ($x, "is a", state) ($x, be, drake bear) => (r0.arg1: newJersey, r1.rel: was, r0.namespace: nell, r1.arg2: the explorer Sir Francis Drake born ??, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: New Jersey) => newJersey
When was Drake born?	1555	5856.262426975945	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: 1555, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was attacked by) => 1555
When was Drake born?	zihuatanejo	5855.411180823107	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: Zihuatanejo, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: were) => Zihuatanejo
When was Drake born?	public	5855.376473969355	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: well were) => the public
When was Drake born?	panama	5855.353336066853	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: Panama, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was headed by) => Panama
When was Drake born?	latitude	5855.353336066853	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: latitude, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: was discovered by) => latitude
When was Drake born?	drake passage	5855.353336066853	who be sir drake ? => $x: ($x, be, sir drake) => $x: ($x, be, sir drake) => (r0.arg1: Drake Passage, r0.namespace: reverb, r0.arg2: Sir Francis Drake, r0.rel: is named after) => Drake Passage
What is kentucky best at?	ted	7882.746947034311	what be the major best at of kentucky ? => $x: ($x, be the major best at of, kentucky) => $x: ($x, be major of, kentucky) => (r0.arg1: Ted, r0.namespace: reverb, r0.arg2: the Kentucky Hemp Museum, r0.rel: is also a major funder of) => Ted
What is kentucky best at?	asphalt	7882.708383863475	what be the major best at of kentucky ? => $x: ($x, be the major best at of, kentucky) => $x: ($x, be major of, kentucky) => (r0.arg1: asphalt, r0.namespace: reverb, r0.arg2: Kentucky?s successful strategy, r0.rel: is a major part of) => asphalt
What is kentucky best at?	daniel boone	7457.262446164753	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Daniel Boone, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now the state of) => Daniel Boone
What is kentucky best at?	cardinal	7457.262446164753	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Cardinal, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is official State bird of) => Cardinal; what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: the Cardinal, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the state bird of) => the Cardinal; what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: the Cardinal, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is the state bird of) => the Cardinal; what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: The cardinal, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the official state bird of) => The cardinal
What is kentucky best at?	cincinnati	7457.262446164753	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Cincinnati, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now the State of) => Cincinnati
What is kentucky best at?	goldenrod	7457.233523786626	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Goldenrod, r0.namespace: openie4, r0.arg2: Kentucky and Nebraska, r0.rel: is the state flower of) => Goldenrod; what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Goldenrod, r0.namespace: reverb, r0.arg2: Kentucky and Nebraska, r0.rel: is the state flower of) => Goldenrod
What is kentucky best at?	produce	7457.233523786626	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: produce, r0.namespace: reverb, r0.arg2: North Carolina and Kentucky, r0.rel: are the states of) => produce
What is kentucky best at?	most egregious examples	7456.483105006272	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: the most egregious examples, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the state of) => the most egregious examples
What is kentucky best at?	east central part	7456.483105006272	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: the east central part, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the State of) => the east central part
What is kentucky best at?	territory	7456.483105006272	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: The territory, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the state of) => The territory
What is kentucky best at?	kchip	7456.483105006272	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: KCHIP, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the state of) => KCHIP
What is kentucky best at?	biggest hold	7456.462446164753	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: The biggest hold, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: up is the state of) => The biggest hold
What is kentucky best at?	course	7456.462446164753	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: course, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the Blue-grass state of) => course
What is kentucky best at?	tulip poplar	7456.462446164753	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: tulip poplar, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the state tree of) => tulip poplar
What is kentucky best at?	kentucky coffee tree	7456.446378176905	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: The Kentucky coffee tree, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was once the state tree of) => The Kentucky coffee tree
What is kentucky best at?	native redbird	7456.446378176905	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: The native redbird, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is the official state bird of) => The native redbird
What is kentucky best at?	red river	7456.446378176905	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Red River, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is now called the state of) => Red River
What is kentucky best at?	appalachian mountains	7456.446378176905	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: the Appalachian Mountains, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: had once been the state of) => the Appalachian Mountains
What is kentucky best at?	city	7456.446378176905	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: The city, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is also the state capital of) => The city
What is kentucky best at?	work	7456.433523786626	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: the work, r0.namespace: reverb, r0.arg2: Kentucky Division, r0.rel: underway is available the State of) => the work
What is kentucky best at?	poplar	7456.414242201208	what be the state best at of kentucky ? => $x: ($x, be the state best at of, kentucky) => $x: ($x, be state of, kentucky) => (r0.arg1: Poplar, r0.namespace: reverb, r0.arg2: Indiana , Kentucky and Tennessee, r0.rel: is the state tree of) => Poplar
What is kentucky best at?	blue grass	6899.890407499276	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: The blue grass, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is for) => The blue grass
What is kentucky best at?	kfc	6899.890407499276	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: KFC, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is for) => KFC
What is kentucky best at?	tony delk	6899.890407499276	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Tony Delk, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was for) => Tony Delk
What is kentucky best at?	crowd	6899.867269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the crowd, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was rooting for) => the crowd
What is kentucky best at?	cylinder heads	6899.867269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: cylinder heads, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was headed for) => cylinder heads
What is kentucky best at?	indiana	6899.850742523559	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Indiana, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is an obstacle for) => Indiana
What is kentucky best at?	championship	6899.850742523559	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: The championship, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was the eighth for) => The championship
What is kentucky best at?	louisville	6899.850742523559	what be best at in kentucky ? => $x: ($x, be best at in, kentucky) => $x: ($x, be in, kentucky) => (r0.arg1: Louisville, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is in) => Louisville; what be best at of kentucky ? => $x: ($x, be best at of, kentucky) => $x: ($x, be of, kentucky) => (r0.arg1: Louisville, r0.namespace: nell, r0.arg2: KENTUCKY, r0.rel: is a subpart of) => Louisville; what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Louisville, r0.namespace: nell, r0.arg2: KENTUCKY, r0.rel: is a proxy for) => Louisville; what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be rooting for) => Louisville
What is kentucky best at?	?louisville	6899.850742523559	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: ?Louisville, r0.namespace: reverb, r0.arg2: Kentucky ?, r0.rel: will be rooting for) => ?Louisville; what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: ?Louisville, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: will be rooting for) => ?Louisville
What is kentucky best at?	standpoint	6899.136683304278	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the standpoint, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is best for) => the standpoint
What is kentucky best at?	whole	6899.136683304278	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: a whole, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is best for) => a whole
What is kentucky best at?	state lawmakers	6899.136683304278	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: state lawmakers, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is best for) => state lawmakers
What is kentucky best at?	rating	6899.090407499276	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Rating, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is for) => Rating
What is kentucky best at?	502	6899.090407499276	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: 502, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is for) => 502
What is kentucky best at?	kentucky straight bourbon whiskey	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Kentucky Straight Bourbon Whiskey, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is named for) => Kentucky Straight Bourbon Whiskey
What is kentucky best at?	rep. flood	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Rep. Flood, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: are pushing for) => Rep. Flood
What is kentucky best at?	george	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: George, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is bound for) => George
What is kentucky best at?	dream scenario	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: The dream scenario, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: would be for) => The dream scenario
What is kentucky best at?	7-footer	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the 7-footer, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: be bound for) => the 7-footer
What is kentucky best at?	early 1900s	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the early 1900s, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is unusual for) => the early 1900s
What is kentucky best at?	more fossil fuel dependence	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: more fossil fuel dependence, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is wrong for) => more fossil fuel dependence
What is kentucky best at?	vanderbilt coach kevin stallings	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Vanderbilt coach Kevin Stallings, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is calling for) => Vanderbilt coach Kevin Stallings
What is kentucky best at?	crt portion	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the CRT portion, r0.namespace: openie4, r0.arg2: Kentucky, r0.rel: is customized for) => the CRT portion; what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the CRT portion, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is customized for) => the CRT portion
What is kentucky best at?	high-tech jobs	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: high-tech jobs, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is important for) => high-tech jobs
What is kentucky best at?	skills test waiver	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: The skills test waiver, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is available for) => The skills test waiver
What is kentucky best at?	exceptional exotic plant list	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: an exceptional exotic plant list, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was established for) => an exceptional exotic plant list
What is kentucky best at?	davis	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: Davis, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: has been for) => Davis
What is kentucky best at?	e-filing	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: e-Filing, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: is available for) => e-Filing
What is kentucky best at?	plan	6899.067269596774	what be best at for kentucky ? => $x: ($x, be best at for, kentucky) => $x: ($x, be for, kentucky) => (r0.arg1: the plan, r0.namespace: reverb, r0.arg2: Kentucky, r0.rel: was necessary for) => the plan
What are the leading producers of WHEAT?	iran	3009.2084506267133	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: openie4, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Iran, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the 12th leading producer of) => Iran; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: openie4, r1.arg1: Iran) => Iran; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be lead producer of, wheat) => (r0.arg1: Iran, r1.rel: is the 12th leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Iran) => Iran
What are the leading producers of WHEAT?	china	3009.2084506267133	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: China, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is the world?s leading producer of) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: CHina, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: China) => CHina; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: CHina, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: China) => CHina; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: China) => China; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: China, r1.rel: is the world 's largest producer of, r0.namespace: reverb, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: China) => China; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be lead producer of, wheat) => (r0.arg1: China, r1.rel: is the world?s leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be lead producer of, wheat) => (r0.arg1: China, r1.rel: is the world?s leading producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: United Nations member state, r0.rel: Type, r1.namespace: reverb, r1.arg1: China) => China
What are the leading producers of WHEAT?	italy	3009.1776000900445	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Italy, r0.namespace: reverb, r0.arg2: durum wheat, r0.rel: is the world 's leading producer of) => Italy; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be lead producer of, wheat) => (r0.arg1: Italy, r1.rel: is the world 's leading producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Sovereign state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Italy) => Italy
What are the leading producers of WHEAT?	sonora	3009.1776000900445	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r0.namespace: reverb, r0.arg2: cotton and wheat, r0.rel: is the nation?s leading producer of) => Sonora; which state be the lead producer of wheat ? => $x: ($x, "type", state) ($x, be the lead producer of, wheat) => $x: ($x, "type", state) ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r1.rel: is the nation?s leading producer of, r0.namespace: freebase, r1.arg2: cotton and wheat, r0.arg2: Mexican state, r0.rel: Type, r1.namespace: reverb, r1.arg1: Sonora) => Sonora; which state be the lead producer of wheat ? => $x: ($x, "is a", state) ($x, be the lead producer of, wheat) => $x: ($x, "is a", state) ($x, be lead producer of, wheat) => (r0.arg1: Sonora, r1.rel: is the nation?s leading producer of, r0.namespace: nell, r1.arg2: cotton and wheat, r0.arg2: state or a province, r0.rel: is a, r1.namespace: reverb, r1.arg1: Sonora) => Sonora
What are the leading producers of WHEAT?	india	2992.2194458959725	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: wheat and rice, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: rice and wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: wheat and rice, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: reverb, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: wheat and rice, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: India) => India; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: India, r1.rel: is the second largest producer of, r0.namespace: openie4, r1.arg2: rice and wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: India) => India
What are the leading producers of WHEAT?	australia	2992.2194458959725	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the seventh largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: was once the second largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Australia, r1.rel: is the 5th largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Australia) => Australia
What are the leading producers of WHEAT?	france	2992.2194458959725	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Dragon-using country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: freebase, r1.arg2: wheat, r0.arg2: Country of origin, r0.rel: Type, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: France) => France; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: France, r1.rel: is the fourth largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: France) => France
What are the leading producers of WHEAT?	morocco	2992.198878871527	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Morocco, r1.rel: is the second largest producer of, r0.namespace: freebase, r1.arg2: durum wheat, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Morocco) => Morocco
What are the leading producers of WHEAT?	canada	2992.198878871527	which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Sport Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Athletics country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Yacht-racing Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada; which country be the largest producer of wheat ? => $x: ($x, "type", country) ($x, be the largest producer of, wheat) => $x: ($x, "type", country) ($x, be largest producer of, wheat) => (r0.arg1: Canada, r1.rel: is the sixth largest producer of, r0.namespace: freebase, r1.arg2: wheat worldwide, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Canada) => Canada
What are the leading producers of WHEAT?	united states	2988.121267581072	which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: the United States, r1.rel: is the third largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => the United States; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: The United States, r1.rel: is the third largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: The United States) => The United States; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: the United States, r1.rel: is the third largest producer of, r0.namespace: openie4, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The United States) => the United States; which country be the largest producer of wheat ? => $x: ($x, "is an example of", country) ($x, be the largest producer of, wheat) => $x: ($x, "is an example of", country) ($x, be largest producer of, wheat) => (r0.arg1: The United States, r1.rel: is the third largest producer of, r0.namespace: reverb, r1.arg2: wheat, r0.arg2: a country, r0.rel: is an example of, r1.namespace: openie4, r1.arg1: The United States) => The United States
What are the leading producers of WHEAT?	 china	2981.9156092219846	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1:   china, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: China) =>   china; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1:   china, r1.rel: is the largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: China) =>   china
What are the leading producers of WHEAT?	india-2	2981.889900441427	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => india-2; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => india-2; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => india-2; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: india-2, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: India) => india-2
What are the leading producers of WHEAT?	india /	2981.889900441427	which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India /; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India /; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: wheat and rice, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: India) => India /; which country be the largest producer of wheat ? => $x: ($x, "is a", country) ($x, be the largest producer of, wheat) => $x: ($x, "is a", country) ($x, be largest producer of, wheat) => (r0.arg1: India /, r1.rel: is the second largest producer of, r0.namespace: nell, r1.arg2: rice and wheat, r0.arg2: country, r0.rel: is a, r1.namespace: openie4, r1.arg1: India) => India /
What are the leading producers of WHEAT?	state	2719.9606154245635	What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; What are the leading producers of WHEAT? => $x: ($x, are the leading producers of, WHEAT) => $x: ($x, are leading producers of, WHEAT) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; who be the lead producer of wheat ? => $x: ($x, be the lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: wheat, r0.rel: is a leading producer of) => The state; lead producer of wheat ? => $x: ($x, be lead producer of, wheat) => $x: ($x, be lead producer of, wheat) => (r0.arg1: The state, r0.namespace: reverb, r0.arg2: hard red spring wheat, r0.rel: is the leading producer of) => The state
What is related to a common jellyfish?	jellyfish	7952.634407667706	what be a common jellyfish ? => $x: ($x, be, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: Jellyfish, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: are one of) => Jellyfish
What is related to a common jellyfish?	35 cm	7951.863330045833	what be a common jellyfish ? => $x: ($x, be, a common jellyfish) => $x: ($x, be, common jellyfish) => (r0.arg1: 35 cm, r0.namespace: reverb, r0.arg2: the most common jellyfish, r0.rel: is) => 35 cm
What is related to a common jellyfish?	corals	5035.963302927759	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => Corals; what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: openie4, r0.arg2: jellyfish, r0.rel: are related to) => Corals; what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are transparent animals related to) => Corals; what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are tiny animals related to) => Corals; what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: openie4, r0.arg2: jellyfishes and sea anemones, r0.rel: are related to) => Corals; what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Corals, r0.namespace: reverb, r0.arg2: jellyfish and sea anemones, r0.rel: are related to) => Corals
What is related to a common jellyfish?	polyps	5035.963302927759	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The polyps, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => The polyps
What is related to a common jellyfish?	ctenophores	5035.93175124253	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: ctenophores, r0.namespace: reverb, r0.arg2: the jellyfish and swim, r0.rel: are related to) => ctenophores
What is related to a common jellyfish?	hydroids	5035.163302927759	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Hydroids, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are related to) => Hydroids
What is related to a common jellyfish?	hydras	5035.150448537481	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Hydras, r0.namespace: reverb, r0.arg2: the jellyfish, r0.rel: are related to) => Hydras
What is related to a common jellyfish?	coral corals	5035.150448537481	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: coral Corals, r0.namespace: reverb, r0.arg2: jellyfish, r0.rel: are closely related to) => coral Corals
What is related to a common jellyfish?	hydra	5035.150448537481	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The Hydra, r0.namespace: openie4, r0.arg2: the jellyfish, r0.rel: is related to) => The Hydra; what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: The Hydra, r0.namespace: reverb, r0.arg2: the jellyfish, r0.rel: is related to) => The Hydra
What is related to a common jellyfish?	sea anemone	5035.131751242529	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: the sea anemone, r0.namespace: reverb, r0.arg2: coral and jellyfish, r0.rel: is closely related to) => the sea anemone
What is related to a common jellyfish?	anemones	5034.093114878893	what be related to a common type of jellyfish ? => $x: ($x, be related to a common type of, jellyfish) => $x: ($x, be related to, jellyfish) => (r0.arg1: Anemones, r0.namespace: openie4, r0.arg2: jellyfish and corals, r0.rel: are closely related to) => Anemones
Do hotels have room service?	inn	10678.880144246083	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The Inn, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The inn) => The Inn; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The Inn, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The inn) => The Inn
Do hotels have room service?	hotel	10678.880144246083	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: also has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: Also Has, r0.namespace: nell, r1.arg2: Room Service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: will have, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: These hotels) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: might have, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: These hotels) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has limited, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has such facilities as, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: also has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: Also Has, r0.namespace: nell, r1.arg2: Room Service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Hotel) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: will have, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: These hotels) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: might have, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: These hotels) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has limited, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The hotel, r1.rel: has such facilities as, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The hotel) => The hotel
Do hotels have room service?	westin	10678.855353636258	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The Westin, r1.rel: also has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Westin) => The Westin; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: The Westin, r1.rel: also has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: The Westin) => The Westin
Do hotels have room service?	sol melia	10678.855353636258	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: sol melia, r1.rel: has established, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: Sol Melia) => sol melia; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: sol melia, r1.rel: has established, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: reverb, r1.arg1: Sol Melia) => sol melia
Do hotels have room service?	z hotel	10677.841507882446	what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: A to Z hotel, r1.rel: had, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: openie4, r1.arg1: your hotel) => A to Z hotel; what hotel have room service ? => $x: ($x, "is a", hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: A to Z hotel, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: openie4, r1.arg1: Hotel A) => A to Z hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: A to Z hotel, r1.rel: had, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: openie4, r1.arg1: your hotel) => A to Z hotel; what deo hotel have room service ? => $x: ($x, "is a", deo hotel) ($x, have, room service) => $x: ($x, "is a", hotel) ($x, have, room service) => (r0.arg1: A to Z hotel, r1.rel: has, r0.namespace: nell, r1.arg2: room service, r0.arg2: hotel, r0.rel: is a, r1.namespace: openie4, r1.arg1: Hotel A) => A to Z hotel
What do scientists classify?	indian	8855.445129529404	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Indian, r1.rel: classified, r0.namespace: freebase, r1.arg2: Indians, r0.arg2: Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Indian; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Indian, r1.rel: classified, r0.namespace: freebase, r1.arg2: Indians, r0.arg2: Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Indian; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Indian, r1.rel: classified, r0.namespace: freebase, r1.arg2: Indians, r0.arg2: Playing card game, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Indian
What do scientists classify?	cat	8855.445129529404	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Things, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: My Favorite Things, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Animals, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Domestic animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what type of animal do scientist classify ? => $x: ($x, "type", animal) (scientist, classify, $x) => $x: ($x, "type", animal) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Domesticated animal, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Roleplaying Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Cat; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Cat, r1.rel: classify, r0.namespace: freebase, r1.arg2: cats, r0.arg2: Video Game Publisher, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Cat
What do scientists classify?	creatures	8855.3988537244	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: creatures, r0.rel: classify) => creatures; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Modern scientists, r0.namespace: reverb, r0.arg2: the creatures, r0.rel: classify) => the creatures; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game Series, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures
What do scientists classify?	dinosaur	8855.3988537244	what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Dinosaur, r1.rel: classify, r0.namespace: freebase, r1.arg2: dinosaurs, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Dinosaur; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dinosaur, r1.rel: classify, r0.namespace: freebase, r1.arg2: dinosaurs, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Dinosaur
What do scientists classify?	dinosaur'us	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dinosaur'us, r1.rel: classify, r0.namespace: freebase, r1.arg2: dinosaurs, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Dinosaur'us
What do scientists classify?	fruits	8855.3988537244	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: fruits, r0.rel: classify) => fruits; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: fruits, r0.rel: classify) => fruits; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Fruits, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Video Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruits; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Fruits, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruits
What do scientists classify?	creature shock	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creature Shock, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creature Shock; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: Creature Shock, r1.rel: classify, r0.namespace: nell, r1.arg2: creatures, r0.arg2: video game, r0.rel: is a, r1.namespace: reverb, r1.arg1: scientists) => Creature Shock
What do scientists classify?	animal	8855.3988537244	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Thing Type, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animal; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Thing Type, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Animal; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Animal, r1.rel: classify, r0.namespace: freebase, r1.arg2: animals, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Animal
What do scientists classify?	hobbit	8855.3988537244	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: the hobbit, r0.rel: classified) => the hobbit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: ZX Spectrum game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Hobbit, r1.rel: classified, r0.namespace: freebase, r1.arg2: the hobbit, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Hobbit
What do scientists classify?	creatures 2	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures 2, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures 2
What do scientists classify?	creatures 4	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures 4, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures 4
What do scientists classify?	human race	8855.3988537244	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: the human race, r0.rel: classify) => the human race; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: The Human Race, r1.rel: classify, r0.namespace: freebase, r1.arg2: the human race, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientist) => The Human Race
What do scientists classify?	dung beetles	8855.3988537244	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dung beetles, r0.rel: classify) => dung beetles; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dung Beetles, r1.rel: classify, r0.namespace: freebase, r1.arg2: dung beetles, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Dung Beetles; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Dung Beetles, r1.rel: classify, r0.namespace: freebase, r1.arg2: dung beetles, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Dung Beetles
What do scientists classify?	creature	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creature, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creature; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creature, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game Version, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creature
What do scientists classify?	creatures 3	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Creatures 3, r1.rel: classify, r0.namespace: freebase, r1.arg2: creatures, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Creatures 3
What do scientists classify?	system rush	8855.3988537244	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: System Rush, r1.rel: classify, r0.namespace: freebase, r1.arg2: systems, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => System Rush
What do scientists classify?	volcano	8855.368003187732	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Musical Game Song, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Volcano; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Volcano, r1.rel: classify, r0.namespace: freebase, r1.arg2: volcanoes, r0.arg2: Musical Game Song, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Volcano
What do scientists classify?	stars!	8855.368003187732	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Stars!, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Video Game, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Stars!
What do scientists classify?	fruit	8855.368003187732	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruit; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Sharable thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruit; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Sharable thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Fruit; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit; what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Fruit, r1.rel: classify, r0.namespace: freebase, r1.arg2: fruits, r0.arg2: Video Game Engine, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Fruit
What do scientists classify?	plutos	8854.360217360763	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Plutos, r1.rel: classify, r0.namespace: freebase, r1.arg2: Pluto, r0.arg2: Video Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Plutos
What do scientists classify?	solar flare	8854.360217360763	what kind of game do scientist classify ? => $x: ($x, "type", game) (scientist, classify, $x) => $x: ($x, "type", game) (scientist, classify, $x) => (r0.arg1: Solar Flare, r1.rel: classify, r0.namespace: freebase, r1.arg2: solar flares, r0.arg2: Video Game, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Solar Flare
What do scientists classify?	life	8850.563311347587	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Advertised thing, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Advertised thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the way scientists) => life; what system do scientist classify ? => $x: ($x, "is a kind of", system) (scientist, classify, $x) => $x: ($x, "is a kind of", system) (scientist, classify, $x) => (r0.arg1: life, r1.rel: started to classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: self-organized system, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: In This Our Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => In This Our Life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Life; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: In This Our Life, r1.rel: classify, r0.namespace: freebase, r1.arg2: life, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => In This Our Life; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: life, r0.rel: classify) => life; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: life, r0.rel: classify) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the way scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: Life, r1.rel: started to classify, r0.namespace: reverb, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => Life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: the way scientists) => life; what kind of game do scientist classify ? => $x: ($x, "is a kind of", game) (scientist, classify, $x) => $x: ($x, "is a kind of", game) (scientist, classify, $x) => (r0.arg1: life, r1.rel: started to classify, r0.namespace: openie4, r1.arg2: life, r0.arg2: game, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: scientists) => life
What do scientists classify?	group	8845.077020904024	what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Group, r1.rel: classify, r0.namespace: freebase, r1.arg2: groups, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => The Group; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: GROUP, r1.rel: classify, r0.namespace: nell, r1.arg2: groups, r0.arg2: sports game, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => GROUP
What do scientists classify?	two organisms	8845.077020904024	what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: openie4, r1.arg1: scientists) => two organisms; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: openie4, r1.arg1: Scientists) => two organisms; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientist) => two organisms; what kind of game do scientist classify ? => $x: ($x, "is a", game) (scientist, classify, $x) => $x: ($x, "is a", game) (scientist, classify, $x) => (r0.arg1: two organisms, r1.rel: classify, r0.namespace: nell, r1.arg2: organisms, r0.arg2: parlour game, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => two organisms
What do scientists classify?	matters	8838.274654469416	what kind of clothing do scientist classify ? => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => (r0.arg1: Matters, r1.rel: classify, r0.namespace: nell, r1.arg2: matter, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: Scientists) => Matters; what kind of clothing do scientist classify ? => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => $x: ($x, "is a kind of", clothing) (scientist, classify, $x) => (r0.arg1: Matters, r1.rel: classify, r0.namespace: nell, r1.arg2: matter, r0.arg2: clothing, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Scientists) => Matters
What do scientists classify?	birds	8798.155062681322	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Birds, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => The Birds; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: birds, r0.rel: classify) => birds; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Birds, r1.rel: classify, r0.namespace: freebase, r1.arg2: birds, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Birds
What do scientists classify?	star	8798.133026583702	what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what thing do scientist classify ? => $x: ($x, "type", thing) (scientist, classify, $x) => $x: ($x, "type", thing) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Organic Thing, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Organic Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Celestial object category, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: The Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => The Star; what county do scientist classify ? => $x: ($x, "type", county) (scientist, classify, $x) => $x: ($x, "type", county) (scientist, classify, $x) => (r0.arg1: Star, r1.rel: classify, r0.namespace: freebase, r1.arg2: stars, r0.arg2: HUD County Place, r0.rel: Type, r1.namespace: reverb, r1.arg1: citizen scientists) => Star
What do scientists classify?	nature	8766.880725454062	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: nature, r0.rel: classify) => nature; what medicine do scientist classify ? => $x: ($x, "is a kind of", medicine) (scientist, classify, $x) => $x: ($x, "is a kind of", medicine) (scientist, classify, $x) => (r0.arg1: Nature, r1.rel: classify, r0.namespace: reverb, r1.arg2: nature, r0.arg2: medicine, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Nature
What do scientists classify?	glaucoma	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: glaucoma, r0.rel: classify) => glaucoma
What do scientists classify?	emr	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: EMR, r0.rel: classify) => EMR
What do scientists classify?	bacteria	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bacteria, r0.rel: classify) => bacteria; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: openie4, r0.arg2: bacteria, r0.rel: classify) => bacteria
What do scientists classify?	insects	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: insects, r0.rel: classify) => insects; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: insects, r0.rel: classify) => insects
What do scientists classify?	organisms	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientist, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: organisms, r0.rel: classify) => organisms
What do scientists classify?	dragonflies	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: dragonflies, r0.rel: classify) => dragonflies
What do scientists classify?	butterflies	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: butterflies, r0.rel: classify) => butterflies
What do scientists classify?	systems	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems; what system do scientist classify ? => $x: ($x, "is a", system) (scientist, classify, $x) => $x: ($x, "is a", system) (scientist, classify, $x) => (r0.arg1: systems, r1.rel: classify, r0.namespace: nell, r1.arg2: systems, r0.arg2: transportation system, r0.rel: is a, r1.namespace: reverb, r1.arg1: scientists) => systems; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: systems, r0.rel: classify) => systems
What do scientists classify?	bats	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats; what type of animal do scientist classify ? => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => (r0.arg1: Bats, r1.rel: classify, r0.namespace: nell, r1.arg2: bats, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: Scientists) => Bats; what type of animal do scientist classify ? => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => (r0.arg1: Bats, r1.rel: classify, r0.namespace: nell, r1.arg2: all bats, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Bats; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: bats, r0.rel: classify) => bats
What do scientists classify?	galaxies	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: galaxies, r0.rel: classify) => galaxies
What do scientists classify?	dinosaurs	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs; what type of animal do scientist classify ? => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => $x: ($x, "is a kind of", animal) (scientist, classify, $x) => (r0.arg1: Dinosaurs, r1.rel: classify, r0.namespace: nell, r1.arg2: dinosaurs, r0.arg2: Animals, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: scientists) => Dinosaurs; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: dinosaurs, r0.rel: classify) => dinosaurs
What do scientists classify?	species	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: each species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => Species; what item do scientist classify ? => $x: ($x, "type", item) (scientist, classify, $x) => $x: ($x, "type", item) (scientist, classify, $x) => (r0.arg1: Species, r1.rel: classify, r0.namespace: freebase, r1.arg2: species, r0.arg2: Ranked item, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => Species; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: species, r0.rel: classify) => species; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: each species, r0.rel: classify) => each species; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: species, r0.rel: classify) => species
What do scientists classify?	plankton	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: plankton, r0.rel: classify) => plankton
What do scientists classify?	sound	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: the sound, r0.rel: classify) => the sound
What do scientists classify?	volcanoes	8693.423695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: volcanoes, r0.rel: classify) => volcanoes; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: volcanoes, r0.rel: classify) => volcanoes
What do scientists classify?	tarsiers	8693.38513269514	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: tarsiers, r0.rel: classify) => tarsiers
What do scientists classify?	pinnipedia	8693.38513269514	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Some scientists, r0.namespace: reverb, r0.arg2: Pinnipedia, r0.rel: classify) => Pinnipedia
What do scientists classify?	soils	8693.38513269514	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: soils, r0.rel: classify) => soils; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Soil Scientists, r0.namespace: reverb, r0.arg2: soils, r0.rel: classify) => soils
What do scientists classify?	ngc 4945	8692.789604956886	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: NGC 4945, r1.rel: classify, r0.namespace: freebase, r1.arg2: NGC 4945, r0.arg2: Celestial Object, r0.rel: Type, r1.namespace: openie4, r1.arg1: Scientists) => NGC 4945; what object do scientist classify ? => $x: ($x, "type", object) (scientist, classify, $x) => $x: ($x, "type", object) (scientist, classify, $x) => (r0.arg1: NGC 4945, r1.rel: classify, r0.namespace: freebase, r1.arg2: NGC 4945, r0.arg2: Celestial Object, r0.rel: Type, r1.namespace: reverb, r1.arg1: Scientists) => NGC 4945; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: openie4, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: NGC 4945, r0.rel: classify) => NGC 4945
What do scientists classify?	american robin	8692.623695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: scientists, r0.namespace: reverb, r0.arg2: an American Robin, r0.rel: classify) => an American Robin
What do scientists classify?	hypersonic speeds	8692.623695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: hypersonic speeds, r0.rel: classify) => hypersonic speeds
What do scientists classify?	groups	8692.623695865977	What do scientists classify? => $x: (scientists, classify, $x) => $x: (scientists, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what do the scientist classify ? => $x: (the scientist, classify, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what machine do scientist classify ? => $x: ($x, "is a", machine) (scientist, classify, $x) => $x: ($x, "is a", machine) (scientist, classify, $x) => (r0.arg1: Groups, r1.rel: classify, r0.namespace: nell, r1.arg2: groups, r0.arg2: dataset used within the scientific field of machine learning, r0.rel: is a, r1.namespace: reverb, r1.arg1: Scientists) => Groups; what do scientist classify again ? => $x: (scientist, classify again, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups; what do scientist classify specificly ? => $x: (scientist, classify specificly, $x) => $x: (scientist, classify, $x) => (r0.arg1: Scientists, r0.namespace: reverb, r0.arg2: groups, r0.rel: classify) => groups
Name the temperature measuring instrument?	thermometer	10307.154789825227	what be the temperature measure instrument ? => $x: ($x, be, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; who be the temperature measure instrument ? => $x: ($x, be, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; what be all of the temperature measure instrument ? => $x: ($x, be all of, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; what be all of the temperature measure instrument ? => $x: ($x, be all of, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; what be not the temperature measure instrument ? => $x: ($x, be not, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; what be the temperature measure instrument today ? => $x: ($x, be, the temperature measure instrument today) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; what be one of the temperature measure instrument ? => $x: ($x, be one of, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer; what be one of the temperature measure instrument ? => $x: ($x, be one of, the temperature measure instrument) => $x: ($x, be, temperature measure instrument) => (r0.arg1: Thermometer, r0.namespace: openie4, r0.arg2: an instrument to measure the temperature, r0.rel: is) => Thermometer
What is Heidi Montag's birthday?	kristin cavallari	7450.046703547596	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Kristin Cavallari, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was) => Kristin Cavallari; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Kristin Cavallari, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was) => Kristin Cavallari
What is Heidi Montag's birthday?	spencer pratt	7449.988858791342	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was convinced) => Spencer Pratt; who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag Pratt, r0.rel: is) => Spencer Pratt; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was convinced) => Spencer Pratt; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Spencer Pratt, r0.namespace: reverb, r0.arg2: Heidi Montag Pratt, r0.rel: is) => Spencer Pratt
What is Heidi Montag's birthday?	job security	7449.95415193759	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: job security, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is as improbable as) => job security; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: job security, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is as improbable as) => job security
What is Heidi Montag's birthday?	tina brown	7449.95415193759	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Tina Brown, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is talking to) => Tina Brown; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Tina Brown, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is talking to) => Tina Brown
What is Heidi Montag's birthday?	public	7449.931014035088	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: the Heidi Montags, r0.rel: is well over) => the public; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the public, r0.namespace: reverb, r0.arg2: the Heidi Montags, r0.rel: is well over) => the public
What is Heidi Montag's birthday?	beck	7449.914486961873	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: the contestants Heidi Montag, r0.rel: has been named) => Beck; who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: a and contestants Heidi Montag, r0.rel: has been) => Beck; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: the contestants Heidi Montag, r0.rel: has been named) => Beck; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Beck, r0.namespace: reverb, r0.arg2: a and contestants Heidi Montag, r0.rel: has been) => Beck
What is Heidi Montag's birthday?	y2k	7449.892450864252	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Y2K, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: turned out to be about as real as) => Y2K; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Y2K, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: turned out to be about as real as) => Y2K
What is Heidi Montag's birthday?	april 12th	7449.320061028499	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: April 12th, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is filed under) => April 12th; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: April 12th, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is filed under) => April 12th
What is Heidi Montag's birthday?	jun 23 , 2009	7449.296923125998	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Jun 23 , 2009 i, r0.namespace: reverb, r0.arg2: heidi montag, r0.rel: would be ashamed of) => Jun 23 , 2009 i; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Jun 23 , 2009 i, r0.namespace: reverb, r0.arg2: heidi montag, r0.rel: would be ashamed of) => Jun 23 , 2009 i
What is Heidi Montag's birthday?	most disastrous fashion line	7449.246703547596	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most disastrous fashion line, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is) => the most disastrous fashion line; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most disastrous fashion line, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is) => the most disastrous fashion line
What is Heidi Montag's birthday?	most important question ?	7449.188858791342	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most important question ?, r0.namespace: reverb, r0.arg2: the Heidi Montag, r0.rel: is) => the most important question ?; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the most important question ?, r0.namespace: reverb, r0.arg2: the Heidi Montag, r0.rel: is) => the most important question ?
What is Heidi Montag's birthday?	bonus	7449.188858791342	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: a bonus, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: there is) => a bonus; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: a bonus, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: there is) => a bonus
What is Heidi Montag's birthday?	opening	7449.15415193759	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The opening, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was hosted by) => The opening; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The opening, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: was hosted by) => The opening
What is Heidi Montag's birthday?	blonde	7449.15415193759	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the blonde, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: happens to be) => the blonde; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the blonde, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: happens to be) => the blonde
What is Heidi Montag's birthday?	audzo	7449.15415193759	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Audzo, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is worse than) => Audzo; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Audzo, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is worse than) => Audzo
What is Heidi Montag's birthday?	herve leger dress	7449.131014035088	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the Herve Leger dress, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: has been worn by) => the Herve Leger dress; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the Herve Leger dress, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: has been worn by) => the Herve Leger dress
What is Heidi Montag's birthday?	course	7449.131014035088	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: course, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is going on with) => course; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: course, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is going on with) => course
What is Heidi Montag's birthday?	fame	7449.114486961873	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Fame, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an addictive thing for) => Fame; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Fame, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an addictive thing for) => Fame
What is Heidi Montag's birthday?	mischa	7449.114486961873	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Mischa, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an undergrad compared to) => Mischa; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Mischa, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: is an undergrad compared to) => Mischa
What is Heidi Montag's birthday?	screen	7449.114486961873	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the screen, r0.namespace: reverb, r0.arg2: the show?s resident villains Heidi Montag, r0.rel: are) => the screen; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: the screen, r0.namespace: reverb, r0.arg2: the show?s resident villains Heidi Montag, r0.rel: are) => the screen
What is Heidi Montag's birthday?	world cup	7449.114486961873	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The World Cup, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: could easily be confused for) => The World Cup; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The World Cup, r0.namespace: reverb, r0.arg2: Heidi Montag, r0.rel: could easily be confused for) => The World Cup
What is Heidi Montag's birthday?	anonymous	7449.081432815442	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Anonymous It, r0.namespace: reverb, r0.arg2: Heidi Montag?s blood sacrifice, r0.rel: may be) => Anonymous It; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: Anonymous It, r0.namespace: reverb, r0.arg2: Heidi Montag?s blood sacrifice, r0.rel: may be) => Anonymous It
What is Heidi Montag's birthday?	same	7449.073169278834	who be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The same, r0.namespace: reverb, r0.arg2: Heidi Montag?s single, r0.rel: can be said about) => The same; what be heidus montag ? => $x: ($x, be, heidus montag) => $x: ($x, be, heidus montag) => (r0.arg1: The same, r0.namespace: reverb, r0.arg2: Heidi Montag?s single, r0.rel: can be said about) => The same
What is the average cost of a denture reline?	dentures	8719.87529616298	what be the average for a denture reline ? => $x: ($x, be the average for, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: Dentures, r0.namespace: reverb, r0.arg2: denture relines, r0.rel: there are) => Dentures; what be the average for a denture reline ? => $x: ($x, be the average for, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: Dentures, r0.namespace: reverb, r0.arg2: denture relines, r0.rel: there are) => Dentures
What is the average cost of a denture reline?	silent sleep	8719.051632399058	what be the average for a denture reline ? => $x: ($x, be the average for, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: The Silent Sleep, r0.namespace: reverb, r0.arg2: GC denture reline material, r0.rel: is fit with) => The Silent Sleep; what be the average for a denture reline ? => $x: ($x, be the average for, a denture reline) => $x: ($x, be, denture reline) => (r0.arg1: The Silent Sleep, r0.namespace: reverb, r0.arg2: GC denture reline material, r0.rel: is fit with) => The Silent Sleep
Where is mayans country?	mexico	9896.662636533758	what be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan country, r0.rel: is) => Mexico; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => Mexico; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => Mexico; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: openie4, r1.arg2: the Mayan Jungle, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: reverb, r1.arg2: the Mayan Jungle, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: openie4, r1.arg2: the Mayan Jungle, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Mexico, r1.rel: has been carefully sculpted from, r0.namespace: reverb, r1.arg2: the Mayan Jungle, r0.arg2: this process.Countries, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Mexico) => Mexico; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Mexico, r0.namespace: reverb, r0.arg2: Mayan country, r0.rel: is) => Mexico; what village be mayan country ? => $x: ($x, "type", village) ($x, be, mayan country) => $x: ($x, "type", village) ($x, be, mayan country) => (r0.arg1: Mexico, r1.rel: is, r0.namespace: freebase, r1.arg2: Mayan country, r0.arg2: City/Town/Village, r0.rel: Type, r1.namespace: reverb, r1.arg1: Mexico) => Mexico
Where is mayans country?	guatemala	9617.161429001962	what be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: the main Mayan country, r0.rel: is) => Guatemala; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Guatemala; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: openie4, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: openie4, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: openie4, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: reverb, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: reverb, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: reverb, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; which country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: openie4, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: openie4, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: openie4, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: openie4, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a large Mayan population, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: also has, r0.namespace: reverb, r1.arg2: magnificent Mayan ruins, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has a legacy from, r0.namespace: reverb, r1.arg2: the Mayan Civilization, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: must have been like in, r0.namespace: reverb, r1.arg2: this Mayan city, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; what country have mayan ? => $x: ($x, "is an example of", country) ($x, have, mayan) => $x: ($x, "is an example of", country) ($x, have, mayan) => (r0.arg1: Guatemala, r1.rel: has, r0.namespace: reverb, r1.arg2: a deep Mayan culture evident, r0.arg2: a country, r0.rel: is an example of, r1.namespace: reverb, r1.arg1: Guatemala) => Guatemala; who be mayan country ? => $x: ($x, be, mayan country) => $x: ($x, be, mayan country) => (r0.arg1: Guatemala, r0.namespace: reverb, r0.arg2: the main Mayan country, r0.rel: is) => Guatemala
Where is mayans country?	belize	8317.88430055742	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Belize, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: was) => Belize; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Belize, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: was) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: nell, r1.arg2: Mayan occupation, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize; which country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: nell, r1.arg2: Mayan sites, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: freebase, r1.arg2: Mayan occupation, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Countries, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: freebase, r1.arg2: Mayan sites, r0.arg2: Olympic participating country, r0.rel: Type, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has some evidence of, r0.namespace: nell, r1.arg2: Mayan occupation, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize; what country have mayan ? => $x: ($x, "is a", country) ($x, have, mayan) => $x: ($x, "is a", country) ($x, have, mayan) => (r0.arg1: Belize, r1.rel: has the highest concentration of, r0.namespace: nell, r1.arg2: Mayan sites, r0.arg2: country, r0.rel: is a, r1.namespace: reverb, r1.arg1: Belize) => Belize
Where is mayans country?	kent	8317.85274887219	which country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Kent, r1.rel: has studied extensively with, r0.namespace: freebase, r1.arg2: Mayan Daykeepers, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Ken) => Kent; what country have mayan ? => $x: ($x, "type", country) ($x, have, mayan) => $x: ($x, "type", country) ($x, have, mayan) => (r0.arg1: Kent, r1.rel: has studied extensively with, r0.namespace: freebase, r1.arg2: Mayan Daykeepers, r0.arg2: Beer country / region, r0.rel: Type, r1.namespace: reverb, r1.arg1: Ken) => Kent
Where is mayans country?	hotel	8312.759034060833	which country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: Mayan inspired architecture, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; which country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a Mayan Indian decor, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; which country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a spectacular Mayan-inspired spa, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: Mayan inspired architecture, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a Mayan Indian decor, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel; what country have mayan ? => $x: ($x, "is a kind of", country) ($x, have, mayan) => $x: ($x, "is a kind of", country) ($x, have, mayan) => (r0.arg1: The hotel, r1.rel: has, r0.namespace: reverb, r1.arg2: a spectacular Mayan-inspired spa, r0.arg2: country club affair, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The hotel) => The hotel
Where is mayans country?	france	6872.875891094347	what be the country of mayan ? => $x: (mayan, have country of, $x) => $x: (mayan, country of, $x) => (r0.arg1: K?rian Mayan, r0.namespace: freebase, r0.arg2: France, r0.rel: Country of nationality) => France; what be the country of mayan ? => $x: (mayan, have country of, $x) => $x: (mayan, country of, $x) => (r0.arg1: The Mayans, r0.namespace: freebase, r0.arg2: France, r0.rel: Country of origin) => France
Where is mayans country?	spain	6872.875891094347	what be the country of mayan ? => $x: (mayan, have country of, $x) => $x: (mayan, country of, $x) => (r0.arg1: Antonio Mayans, r0.namespace: freebase, r0.arg2: Spain, r0.rel: Country of nationality) => Spain
Where is mayans country?	united states america	6872.875891094347	what be the country of mayan ? => $x: (mayan, have country of, $x) => $x: (mayan, country of, $x) => (r0.arg1: Mayan Lopez, r0.namespace: freebase, r0.arg2: United States of America, r0.rel: Country of nationality) => United States of America; what be the country of mayan ? => $x: (mayan, have country of, $x) => $x: (mayan, country of, $x) => (r0.arg1: 2012: Mayan Prophecy and the Shift of the Ages, r0.namespace: freebase, r0.arg2: United States of America, r0.rel: Country of origin) => United States of America
Where is mayans country?	united kingdom	6872.859364021132	what be the country of mayan ? => $x: (mayan, have country of, $x) => $x: (mayan, country of, $x) => (r0.arg1: Mayans & Aztecs, r0.namespace: freebase, r0.arg2: United Kingdom, r0.rel: Country of origin) => United Kingdom
Where is mayans country?	chia seeds	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Chia Seeds, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Chia Seeds; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Chia Seeds, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Chia Seeds
Where is mayans country?	chichen itza	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Chichen Itza; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Chichen Itza, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Chichen Itza
Where is mayans country?	settlers	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the settlers, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: are) => the settlers; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the settlers, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: are) => the settlers
Where is mayans country?	casualties	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the casualties, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: were) => the casualties; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the casualties, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: were) => the casualties
Where is mayans country?	holbox	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Holbox, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Holbox; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Holbox, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Holbox
Where is mayans country?	civil war	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the civil war, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the civil war; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the civil war, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the civil war
Where is mayans country?	balam	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Balam, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Balam; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Balam, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Balam
Where is mayans country?	lamanai	6869.809571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Lamanai, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Lamanai; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Lamanai, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Lamanai
Where is mayans country?	villagers	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The villagers, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: are) => The villagers; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The villagers, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => The villagers; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The villagers, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: are) => The villagers; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The villagers, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => The villagers
Where is mayans country?	about 10.6 %	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: about 10.6 %, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => about 10.6 %; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: about 10.6 %, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => about 10.6 %
Where is mayans country?	hol chan	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Hol Chan, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Hol Chan; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Hol Chan, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Hol Chan
Where is mayans country?	students	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the students, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => the students; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the students, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => the students
Where is mayans country?	utz kapeh	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Utz Kapeh, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Utz Kapeh; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Utz Kapeh, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Utz Kapeh
Where is mayans country?	kin	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Kin, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Kin; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Kin, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Kin
Where is mayans country?	guides	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The guides, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => The guides; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The guides, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => The guides
Where is mayans country?	identified victims	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the identified victims, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => the identified victims; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the identified victims, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => the identified victims
Where is mayans country?	rural nonmigrants	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: rural nonmigrants, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => rural nonmigrants; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: rural nonmigrants, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => rural nonmigrants
Where is mayans country?	ignacio	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Ignacio, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Ignacio; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Ignacio, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Ignacio
Where is mayans country?	yucateco soup	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: a Yucateco soup, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => a Yucateco soup; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: a Yucateco soup, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => a Yucateco soup
Where is mayans country?	name chia	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The name chia, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The name chia; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The name chia, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The name chia
Where is mayans country?	hebrew lesson	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the Hebrew lesson, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => the Hebrew lesson; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the Hebrew lesson, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => the Hebrew lesson
Where is mayans country?	nearly 14 million inhabitants	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: nearly 14 million inhabitants, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => nearly 14 million inhabitants; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: nearly 14 million inhabitants, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => nearly 14 million inhabitants
Where is mayans country?	zapatista women	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The Zapatista women, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => The Zapatista women; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The Zapatista women, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => The Zapatista women
Where is mayans country?	pyramid	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The pyramid, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The pyramid; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The pyramid, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The pyramid
Where is mayans country?	atot	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Atot, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Atot; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Atot, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Atot
Where is mayans country?	hopi	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the Hopi, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the Hopi; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the Hopi, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the Hopi
Where is mayans country?	word tulum	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The word Tulum, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The word Tulum; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The word Tulum, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The word Tulum
Where is mayans country?	second most common language	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The second most common language, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The second most common language; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The second most common language, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => The second most common language
Where is mayans country?	majority	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the majority, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => the majority; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the majority, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: were) => the majority; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the majority, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => the majority; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the majority, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: were) => the majority
Where is mayans country?	great kabir	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the great Kabir, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: was) => the great Kabir; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the great Kabir, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: was) => the great Kabir
Where is mayans country?	about 9.2 %	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: about 9.2 %, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => about 9.2 %; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: about 9.2 %, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => about 9.2 %
Where is mayans country?	victims	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the victims, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the victims; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the victims, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the victims
Where is mayans country?	22	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: 22, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => 22; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: 22, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => 22
Where is mayans country?	esperanza estevan	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Esperanza and Estevan, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => Esperanza and Estevan; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Esperanza and Estevan, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => Esperanza and Estevan
Where is mayans country?	only 3	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: only 3, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => only 3; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: only 3, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: are) => only 3
Where is mayans country?	bolon yokte k'uh	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Bolon Yokte K'uh, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Bolon Yokte K'uh; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Bolon Yokte K'uh, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Bolon Yokte K'uh
Where is mayans country?	zapatistas	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The Zapatistas, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: are) => The Zapatistas; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: The Zapatistas, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: are) => The Zapatistas
Where is mayans country?	loltun	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Loltun, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Loltun; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: Loltun, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => Loltun
Where is mayans country?	inhabitants	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the inhabitants, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: were) => the inhabitants; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the inhabitants, r0.namespace: reverb, r0.arg2: Mayans, r0.rel: were) => the inhabitants
Where is mayans country?	pumpkin seed dip	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the pumpkin seed dip, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => the pumpkin seed dip; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the pumpkin seed dip, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: is) => the pumpkin seed dip
Where is mayans country?	chakobsa tribe	6869.009571373664	what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the Chakobsa tribe, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the Chakobsa tribe; what be the country of mayan ? => $x: ($x, be the country of, mayan) => $x: ($x, be, mayan) => (r0.arg1: the Chakobsa tribe, r0.namespace: reverb, r0.arg2: Mayan, r0.rel: were) => the Chakobsa tribe
What color are wedding dresses?	red	7705.963183375837	What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; What color are wedding dresses? => $x: ($x, "type", color) ($x, are, wedding dresses) => $x: ($x, "type", color) ($x, are, wedding dresses) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was a popular color choice for) => Red; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was a popular color choice for) => Red; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was a popular color choice for) => Red; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was a popular color choice for) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the marriage wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the relationship wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the marriage wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; which color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what color be your wedding dress ? => $x: ($x, "type", color) ($x, be, your wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be your wedding dress ? => $x: ($x, "type", color) ($x, be, your wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be your wedding dress ? => $x: ($x, "type", color) ($x, be, your wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be your wedding dress ? => $x: ($x, "type", color) ($x, be, your wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what color be your wedding dress ? => $x: ($x, "type", color) ($x, be, your wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color be your wedding dress ? => $x: ($x, "type", color) ($x, be, your wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was common in) => red; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: Red, r1.rel: was a popular color choice for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: Red, r1.rel: was a popular color choice for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: Red, r1.rel: was a popular color choice for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: red, r1.rel: was a popular color choice for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => red; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: Red, r1.rel: was a popular color choice for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: Red, r1.rel: was a popular color choice for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what kind of color be there for wedding dress ? => $x: ($x, "is a", color) ($x, be there for, wedding dress) => $x: ($x, "is a", color) ($x, be for, wedding dress) => (r0.arg1: red, r1.rel: was a popular color choice for, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what color color be wedding dress ? => $x: ($x, "type", color color) ($x, be, wedding dress) => $x: ($x, "type", color color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what kind of color be wedding dress ? => $x: ($x, "type", color) ($x, be, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was common in) => red; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was common in) => red; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what colour be associate with wedding dress ? => $x: ($x, "type", color) ($x, be associate with, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be associate with wedding dress ? => $x: ($x, "type", color) ($x, be associate with, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be associate with wedding dress ? => $x: ($x, "type", color) ($x, be associate with, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be associate with wedding dress ? => $x: ($x, "type", color) ($x, be associate with, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => red; what colour be associate with wedding dress ? => $x: ($x, "type", color) ($x, be associate with, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what colour be associate with wedding dress ? => $x: ($x, "type", color) ($x, be associate with, wedding dress) => $x: ($x, "type", color) ($x, be, wedding dress) => (r0.arg1: Red, r1.rel: was common in, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: red) => Red; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the relationship wedding dress coloring, r0.rel: is) => Red; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Red, r0.namespace: reverb, r0.arg2: the marriage wedding dress coloring, r0.rel: is) => Red; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: red, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: Indian wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: red) => red; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was common in) => red; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was common in) => red; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: red, r0.namespace: reverb, r0.arg2: Indian wedding dress, r0.rel: is the traditional color of) => red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Hair color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Hair Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the relationship wedding dress coloring, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: Red, r1.rel: is, r0.namespace: freebase, r1.arg2: the marriage wedding dress coloring, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: Red) => Red; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, color wedding dress) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the relationship wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, color wedding dress) => (r0.arg1: red, r1.rel: is, r0.namespace: nell, r1.arg2: the marriage wedding dress coloring, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Red) => red
What color are wedding dresses?	white	7705.963183375837	What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; What color are wedding dresses? => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => $x: ($x, "is a kind of", color) ($x, are, wedding dresses) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: The wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: All White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is nt, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: must be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: should be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: to be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => The white; what color be wedding dress be ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: was the standard color for) => white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: American wedding dresses, r0.rel: is a popular color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a holiday wedding dress, r0.rel: is the most popular color for) => white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: was the standard color for) => white; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: American wedding dresses, r0.rel: is a popular color for) => White; what be the color for wedding dress ? => $x: ($x, be the color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a holiday wedding dress, r0.rel: is the most popular color for) => white; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: was the standard color for) => white; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: American wedding dresses, r0.rel: is a popular color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a holiday wedding dress, r0.rel: is the most popular color for) => white; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: was the standard color for) => white; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: perfect wedding dresses, r0.rel: is the ideal color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: a wedding dress, r0.rel: is the traditional color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: American wedding dresses, r0.rel: is a popular color for) => White; what be some color for wedding dress ? => $x: ($x, be some color for, wedding dress) => $x: ($x, be color for, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: a holiday wedding dress, r0.rel: is the most popular color for) => white; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "type", color) ($x, be, wedding dress color) => $x: ($x, "type", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: white) => WHITE; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be wedding dress color ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => $x: ($x, "is a kind of", color) ($x, be, wedding dress color) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "type", color) ($x, be use for, wedding dress) => $x: ($x, "type", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "is a", color) ($x, be use for, wedding dress) => $x: ($x, "is a", color) ($x, be use for, wedding dress) => (r0.arg1: WHITE, r1.rel: has been used for, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be use for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be use for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be use for, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; which color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be your wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, your wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "type", color) ($x, be there for, wedding dress) => $x: ($x, "type", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a", color) ($x, be there for, wedding dress) => $x: ($x, "is a", color) ($x, be for, wedding dress) => (r0.arg1: WHITE, r1.rel: has been used for, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what kind of color be there for wedding dress ? => $x: ($x, "is a", color) ($x, be there for, wedding dress) => $x: ($x, "is a", color) ($x, be for, wedding dress) => (r0.arg1: WHITE, r1.rel: is perfect for, r0.namespace: nell, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be there for wedding dress ? => $x: ($x, "is a kind of", color) ($x, be there for, wedding dress) => $x: ($x, "is a kind of", color) ($x, be for, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: The wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: freebase, r1.arg2: All White, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; wedding dress be what color ? => $x: ($x, "type", color) (wedding dress, be, $x) => $x: ($x, "type", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: freebase, r1.arg2: white, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: most wedding dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the western wedding dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: The wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is nt, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is nt, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: must be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: must be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: should be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: should be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: are in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: are in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: most Beach Wedding Dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: to be, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: to be, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is available in, r0.namespace: openie4, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is available in, r0.namespace: reverb, r1.arg2: All White, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: This wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the color of wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional wedding dress color) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the main color for the wedding dresses) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: the traditional color for a wedding dress) => White; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: The white, r1.rel: was in, r0.namespace: openie4, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => The white; wedding dress be what color ? => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => $x: ($x, "is a kind of", color) (wedding dress, be, $x) => (r0.arg1: White, r1.rel: was in, r0.namespace: reverb, r1.arg2: white, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: The off-shoulder wedding dress) => White; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color color be wedding dress ? => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what kind of color be wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the bride wedding dress, r0.rel: became the preferred color of) => white; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the bride wedding dress, r0.rel: became the preferred color of) => white; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the bride wedding dress, r0.rel: became the preferred color of) => white; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the bride wedding dress, r0.rel: became the preferred color of) => white; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is perfect for, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is perfect for, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: has been used for, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: has been used for, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is tall with, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is tall with, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is linked to, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is linked to, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the ideal color for, r0.namespace: openie4, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the ideal color for, r0.namespace: reverb, r1.arg2: perfect wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: was the standard color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: was the standard color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color for, r0.namespace: openie4, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color for, r0.namespace: reverb, r1.arg2: a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is a popular color for, r0.namespace: openie4, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is a popular color for, r0.namespace: reverb, r1.arg2: American wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular colour for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular colour for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the most popular color for, r0.namespace: openie4, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the most popular color for, r0.namespace: reverb, r1.arg2: a holiday wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: pure White Wedding dresses Essex, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what colour be associate with wedding dress ? => $x: ($x, "is a kind of", color) ($x, be associate with, wedding dress) => $x: ($x, "is a kind of", color) ($x, be, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: openie4, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: the traditional wedding dress color, r0.rel: is) => white; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: the traditional color for a wedding dress, r0.rel: is) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "type", color) ($x, be of, wedding dress) => $x: ($x, "type", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: freebase, r1.arg2: classic wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional colour of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional colour of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the most common color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be of wedding dress ? => $x: ($x, "is a", color) ($x, be of, wedding dress) => $x: ($x, "is a", color) ($x, be of, wedding dress) => (r0.arg1: WHITE, r1.rel: is a part of, r0.namespace: nell, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional colour of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional colour of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is a part of, r0.namespace: openie4, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is a part of, r0.namespace: reverb, r1.arg2: classic wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: freebase, r1.arg2: wedding dresses, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "type", color) ($x, be the color of, wedding dress) => $x: ($x, "type", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: freebase, r1.arg2: the bride?s wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the most common color of, r0.namespace: nell, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a", color) ($x, be the color of, wedding dress) => $x: ($x, "is a", color) ($x, be color of, wedding dress) => (r0.arg1: WHITE, r1.rel: is the traditional color of, r0.namespace: nell, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: White) => WHITE; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the most common color of, r0.namespace: reverb, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: White, r1.rel: is the traditional color of, r0.namespace: reverb, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => White; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: The white, r1.rel: is the color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: The white, r1.rel: is the most common color of, r0.namespace: openie4, r1.arg2: wedding dresses, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what color be the color of wedding dress ? => $x: ($x, "is a kind of", color) ($x, be the color of, wedding dress) => $x: ($x, "is a kind of", color) ($x, be color of, wedding dress) => (r0.arg1: The white, r1.rel: is the traditional color of, r0.namespace: openie4, r1.arg2: the bride?s wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: White) => The white; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the most common color of wedding dress ? => $x: ($x, be the most common color of, wedding dress) => $x: ($x, be most common color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the most common color of wedding dress ? => $x: ($x, be the most common color of, wedding dress) => $x: ($x, be most common color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: the bride?s wedding dress, r0.rel: is the traditional color of) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Exterior Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: coat color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: coat color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Rose color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Rose color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chess Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Magic Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Chicken Egg Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Dog Coat Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: Motorcycle paint color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional wedding dress color, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "type", color) ($x, be, the color wedding dress) => $x: ($x, "type", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: freebase, r1.arg2: the traditional color for a wedding dress, r0.arg2: M:TG Mana Color, r0.rel: Type, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, color wedding dress) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: white) => WHITE; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, color wedding dress) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: white) => WHITE; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, color wedding dress) => (r0.arg1: WHITE, r1.rel: is, r0.namespace: nell, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a, r1.namespace: openie4, r1.arg1: White) => WHITE; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, color wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: white) => The white; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => White; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, color wedding dress) => (r0.arg1: White, r1.rel: is, r0.namespace: reverb, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => White; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, color wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional wedding dress color, r0.arg2: color, r0.rel: is a kind of, r1.namespace: reverb, r1.arg1: white) => The white; what color be the color wedding dress ? => $x: ($x, "is a kind of", color) ($x, be, the color wedding dress) => $x: ($x, "is a kind of", color) ($x, be, color wedding dress) => (r0.arg1: The white, r1.rel: is, r0.namespace: openie4, r1.arg2: the traditional color for a wedding dress, r0.arg2: color, r0.rel: is a kind of, r1.namespace: openie4, r1.arg1: White) => The white; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the traditional colour of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional colour of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: classic wedding dress, r0.rel: is a part of) => white; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the traditional colour of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the traditional color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional colour of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: is the traditional color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the most common color of) => White; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: white, r0.namespace: reverb, r0.arg2: classic wedding dress, r0.rel: is a part of) => white
What color are wedding dresses?	alexander mcqueen	7703.8166530817625	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Alexander McQueen, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: was the designer of) => Alexander McQueen; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Alexander McQueen, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: was the designer of) => Alexander McQueen
What color are wedding dresses?	mind	7703.779926252396	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: mind, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is buying the proper type of) => mind; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: mind, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is buying the proper type of) => mind
What color are wedding dresses?	oni	7703.767071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: onI, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: was very specific concerning the kind of) => onI; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: onI, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: was very specific concerning the kind of) => onI
What color are wedding dresses?	front page	7703.767071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The front page, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is completely full of) => The front page; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The front page, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is completely full of) => The front page
What color are wedding dresses?	woman	7703.767071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: a woman, r0.namespace: reverb, r0.arg2: her wedding dress, r0.rel: thinks of is) => a woman; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: a woman, r0.namespace: reverb, r0.arg2: her wedding dress, r0.rel: thinks of is) => a woman
What color are wedding dresses?	ted baker	7703.720796057113	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Ted Baker, r0.namespace: reverb, r0.arg2: a dynamic ,wedding dresses, r0.rel: is representative of) => Ted Baker; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Ted Baker, r0.namespace: reverb, r0.arg2: a dynamic ,wedding dresses, r0.rel: is representative of) => Ted Baker
What color are wedding dresses?	2012	7703.161903331154	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is filed under) => 2012; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is filed under) => 2012; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is filed under) => 2012; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is filed under) => 2012; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is filed under) => 2012; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the fashionable trend of) => 2012; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: 2012, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the fashionable trend of) => 2012
What color are wedding dresses?	veil	7703.016653081763	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The veil, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is part of) => The veil; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The veil, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is part of) => The veil
What color are wedding dresses?	brides	7703.016653081763	what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: are turning to) => brides; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the selection of) => brides; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: brides, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the selection of) => brides
What color are wedding dresses?	part	7703.016653081763	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: A part, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the selection of) => A part; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: A part, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the selection of) => A part
What color are wedding dresses?	most important	7703.016653081763	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the most important, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the design of) => the most important; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the most important, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the design of) => the most important
What color are wedding dresses?	race	7703.016653081763	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: race, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the cause of) => race; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: race, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the cause of) => race
What color are wedding dresses?	bridal veils	7703.016653081763	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The bridal veils, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: are part of) => The bridal veils; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The bridal veils, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: are part of) => The bridal veils
What color are wedding dresses?	classic line dress	7703.016653081763	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The classic A line dress, r0.namespace: reverb, r0.arg2: the wedding dresses, r0.rel: is one of) => The classic A line dress; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The classic A line dress, r0.namespace: reverb, r0.arg2: the wedding dresses, r0.rel: is one of) => The classic A line dress
What color are wedding dresses?	ppp	7703.016653081763	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: a PPP, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is the production of) => a PPP
What color are wedding dresses?	western eastern culture	7703.016653081763	what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be color of wedding dress ? => $x: ($x, be color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the coloring of wedding dress ? => $x: ($x, be the coloring of, wedding dress) => $x: ($x, be coloring of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the official color of wedding dress ? => $x: ($x, be the official color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the main color of wedding dress ? => $x: ($x, be the main color of, wedding dress) => $x: ($x, color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the colour of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; the color of wedding dress ? => $x: ($x, be the color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be some color of wedding dress ? => $x: ($x, be some color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the usual color of wedding dress ? => $x: ($x, be the usual color of, wedding dress) => $x: ($x, be color of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Western and Eastern culture, r0.namespace: reverb, r0.arg2: the wedding dress, r0.rel: is the color of) => Western and Eastern culture
What color are wedding dresses?	bridal market	7702.995994240243	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the bridal market, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the new breed of) => the bridal market; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the bridal market, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is the new breed of) => the bridal market
What color are wedding dresses?	hannah	7702.995994240243	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Hannah, r0.namespace: reverb, r0.arg2: the Manhattan wedding dress, r0.rel: is the winner of) => Hannah; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Hannah, r0.namespace: reverb, r0.arg2: the Manhattan wedding dress, r0.rel: is the winner of) => Hannah
What color are wedding dresses?	product series	7702.995994240243	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: product series, r0.namespace: reverb, r0.arg2: the Couture Wedding Dresses, r0.rel: is the growth of) => product series; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: product series, r0.namespace: reverb, r0.arg2: the Couture Wedding Dresses, r0.rel: is the growth of) => product series
What color are wedding dresses?	wedding dress	7702.995994240243	what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: colored wedding dresses, r0.rel: is one of) => the wedding dress; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: here is the trend of) => the wedding dress; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the wedding dress, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: here is the trend of) => the wedding dress
What color are wedding dresses?	lines	7702.995994240243	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: lines, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: are the wide varieties of) => lines; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: lines, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are the wide varieties of) => lines; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: lines, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: are the wide varieties of) => lines; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: lines, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are the wide varieties of) => lines
What color are wedding dresses?	wedding	7702.995994240243	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: wedding Dress, r0.rel: is) => a wedding; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: wedding Dress, r0.rel: is) => a wedding; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: wedding Dress, r0.rel: is) => a wedding; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: wedding Dress, r0.rel: is) => a wedding; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: wedding Dress, r0.rel: is) => a wedding; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the choice of) => a wedding; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: a wedding, r0.namespace: reverb, r0.arg2: a wedding dress, r0.rel: is the choice of) => a wedding
What color are wedding dresses?	column-shaped dresses	7702.995994240243	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Column-shaped dresses, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: are the perfect type of) => Column-shaped dresses; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Column-shaped dresses, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: are the perfect type of) => Column-shaped dresses
What color are wedding dresses?	white pearl strands	7702.995994240243	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White pearl strands, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are the perfect match of) => White pearl strands; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: White pearl strands, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are the perfect match of) => White pearl strands
What color are wedding dresses?	see-through cover	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: See-through cover, r0.namespace: reverb, r0.arg2: my wedding dress, r0.rel: was part of) => See-through cover; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: See-through cover, r0.namespace: reverb, r0.arg2: my wedding dress, r0.rel: was part of) => See-through cover
What color are wedding dresses?	affordable flower girl dress	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: affordable flower girl dress, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is a variety of) => affordable flower girl dress; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: affordable flower girl dress, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is a variety of) => affordable flower girl dress
What color are wedding dresses?	mermaid silhouette	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The mermaid silhouette, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is another model of) => The mermaid silhouette; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The mermaid silhouette, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is another model of) => The mermaid silhouette
What color are wedding dresses?	five feet	7702.967071862117	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: five feet, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: were two pairs of) => five feet
What color are wedding dresses?	? exhibition	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: ? exhibition, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is a celebration of) => ? exhibition; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: ? exhibition, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is a celebration of) => ? exhibition
What color are wedding dresses?	museum	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the Museum, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was a collection of) => the Museum; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: the Museum, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: was a collection of) => the Museum
What color are wedding dresses?	cloth	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The cloth, r0.namespace: reverb, r0.arg2: uk wedding dresses, r0.rel: is made of) => The cloth; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The cloth, r0.namespace: reverb, r0.arg2: uk wedding dresses, r0.rel: is made of) => The cloth
What color are wedding dresses?	7:58	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: 7:58, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: am Special style of) => 7:58; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: 7:58, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: am Special style of) => 7:58
What color are wedding dresses?	international sites	7702.967071862117	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: international sites, r0.namespace: reverb, r0.arg2: gorgeous wedding dresses, r0.rel: are full of) => international sites; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: international sites, r0.namespace: reverb, r0.arg2: gorgeous wedding dresses, r0.rel: are full of) => international sites
What color are wedding dresses?	bride description	7702.967071862117	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The Bride Description, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: Here are collection of) => The Bride Description
What color are wedding dresses?	abigail wright designs	7702.954217471838	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Abigail Wright Designs, r0.namespace: reverb, r0.arg2: Modest Wedding Dresses, r0.rel: is a purveyor of) => Abigail Wright Designs; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Abigail Wright Designs, r0.namespace: reverb, r0.arg2: Modest Wedding Dresses, r0.rel: is a purveyor of) => Abigail Wright Designs
What color are wedding dresses?	best example	7702.954217471838	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The best example, r0.namespace: reverb, r0.arg2: a Victorian wedding dress, r0.rel: is think of) => The best example; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The best example, r0.namespace: reverb, r0.arg2: a Victorian wedding dress, r0.rel: is think of) => The best example
What color are wedding dresses?	firm	7702.954217471838	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is a leading supplier of) => The firm; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The firm, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: is a leading supplier of) => The firm
What color are wedding dresses?	milanoo	7702.954217471838	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Milanoo, r0.namespace: reverb, r0.arg2: Wedding Dresses, r0.rel: is a leading supplier of) => Milanoo; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Milanoo, r0.namespace: reverb, r0.arg2: Wedding Dresses, r0.rel: is a leading supplier of) => Milanoo
What color are wedding dresses?	next boulevard	7702.954217471838	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The next Boulevard, r0.namespace: reverb, r0.arg2: wedding dresses and outfits, r0.rel: is full of) => The next Boulevard; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: The next Boulevard, r0.namespace: reverb, r0.arg2: wedding dresses and outfits, r0.rel: is full of) => The next Boulevard
What color are wedding dresses?	bingo trans	7702.954217471838	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Bingo Trans, r0.namespace: reverb, r0.arg2: Wedding Dresses, r0.rel: is a leading supplier of) => Bingo Trans; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Bingo Trans, r0.namespace: reverb, r0.arg2: Wedding Dresses, r0.rel: is a leading supplier of) => Bingo Trans
What color are wedding dresses?	women	7702.954217471838	what be wedding dress ? => $x: ($x, be, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: women, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were wearing) => women; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: women, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were wearing) => women; what be color on wedding dress ? => $x: ($x, be color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: women, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were wearing) => women; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: women, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were wearing) => women; what be the color on wedding dress ? => $x: ($x, be the color on, wedding dress) => $x: ($x, be, wedding dress) => (r0.arg1: women, r0.namespace: openie4, r0.arg2: wedding dresses, r0.rel: were wearing) => women; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: women, r0.namespace: reverb, r0.arg2: their wedding dresses, r0.rel: are posting photos of) => women; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: women, r0.namespace: reverb, r0.arg2: their wedding dresses, r0.rel: are posting photos of) => women
What color are wedding dresses?	texture	7702.943933959615	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: texture, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are all become exquisite works of) => texture; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: texture, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: are all become exquisite works of) => texture
What color are wedding dresses?	red wedding dress	7702.943933959615	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Red wedding dress, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: may be a classic types of) => Red wedding dress; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: Red wedding dress, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: may be a classic types of) => Red wedding dress
What color are wedding dresses?	wedding veil	7702.935520176888	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: wedding veil, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is also a very important part of) => wedding veil; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: wedding veil, r0.namespace: reverb, r0.arg2: wedding dress, r0.rel: is also a very important part of) => wedding veil
What color are wedding dresses?	you?ll	7702.935520176888	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: you?ll, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: be able to use this type of) => you?ll; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: you?ll, r0.namespace: reverb, r0.arg2: wedding dresses, r0.rel: be able to use this type of) => you?ll
What color are wedding dresses?	line tube dress	7701.915581108203	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: A line tube dress, r0.namespace: openie4, r0.arg2: wedding dress, r0.rel: is a specific style of) => A line tube dress; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: A line tube dress, r0.namespace: openie4, r0.arg2: wedding dress, r0.rel: is a specific style of) => A line tube dress
What color are wedding dresses?	online	7701.864163547088	what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: online, r0.namespace: openie4, r0.arg2: wedding dress, r0.rel: [is] designer [of]) => online; what be the predater of wedding dress ? => $x: ($x, be the predater of, wedding dress) => $x: ($x, be of, wedding dress) => (r0.arg1: online, r0.namespace: openie4, r0.arg2: wedding dress, r0.rel: [is] designer [of]) => online
What color are wedding dresses?	reddish	7695.633637921292	what color be wedding dress color ? => $x: ($x, "is a", color) ($x, be, wedding dress color) => $x: ($x, "is a", color) ($x, be, wedding dress color) => (r0.arg1: reddish, r1.rel: is, r0.namespace: nell, r1.arg2: the union wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Reddish) => reddish; what be wedding dress color ? => $x: ($x, be, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; meaning of wedding dress color ? => $x: ($x, be meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; what be the color wedding dress ? => $x: ($x, be, the color wedding dress) => $x: ($x, be, color wedding dress) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; what be the meaning of wedding dress color ? => $x: ($x, be the meaning of, wedding dress color) => $x: ($x, be, wedding dress color) => (r0.arg1: Reddish, r0.namespace: reverb, r0.arg2: the union wedding dress color, r0.rel: is) => Reddish; what color be the color wedding dress ? => $x: ($x, "is a", color) ($x, be, the color wedding dress) => $x: ($x, "is a", color) ($x, be, color wedding dress) => (r0.arg1: reddish, r1.rel: is, r0.namespace: nell, r1.arg2: the union wedding dress color, r0.arg2: color, r0.rel: is a, r1.namespace: reverb, r1.arg1: Reddish) => reddish
