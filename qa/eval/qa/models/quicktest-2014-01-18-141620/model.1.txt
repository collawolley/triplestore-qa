question prefix = 'what' ^ answer shape = '1. AAAA'	-1.0
question prefix = 'where' ^ answer shape = 'Aaa Aaaaa'	2.0
template arg pos tags = WP DT NN	0.0
question prefix = 'UNK' ^ answer shape = 'aaa Aaaaa Aaaaa'	1.0
lex type = Identity ^ rightTag = RB	1.0
lex category (postags) = Unary(WDT NN NN VB NN IN JJ JJ NN)	0.0
lex category (postags) = Unary(WDT VB JJ NN NN)	1.0
lex category (postags) = Binary(VB DT NN)	0.0
question prefix = 'who' ^ answer shape = '1111 Aaaa'	-1.0
parser lexical rule = quantIdentity	1.0
lex category (postags) = Arg(JJ)	-1.0
parser lexical rule = finalNounHack	-1.0
lex category (postags) = Unary(WP VBP JJ NN VB)	0.0
action type = RelSynRule	-5.0
lex category (postags) = Unary(WDT NN VBP NN NN VB)	-1.0
lex category (postags) = Binary(VB DT JJ NN)	-1.0
lex category (postags) = Unary(WRB VBP DT NN NN VB)	0.0
evidence similarity with question	2.584947388352962
lex type = Identity ^ leftTag = RBS	0.0
action type = ParsedQuestion	0.0
question prefix = 'UNK' ^ answer shape = 'aaa aaaa'	-1.0
question prefix = 'who' ^ answer shape = 'Aaaa Aaaaa Aaa Aaaaa'	-1.0
template arg pos tags = VBP JJ NN	1.0
lex type = Identity ^ rightTag = WP	-1.0
parser lexical rule = npArg	-1.0
relSynRule pmi	1.0
lex category (postags) = Unary(WRB VBP DT NN)	-1.0
lex category (postags) = Arg(PRP$ NN)	-1.0
lex type = Unary ^ rightTag = NN	-2.0
template arg pos tags = VBN	0.0
question prefix = 'what' ^ answer shape = 'aaa'	-1.0
lex category (postags) = Unary(WP VBP NN NN)	0.0
question prefix = 'where' ^ answer shape = 'aaaa aaa'	-1.0
parser lexical rule = punctIdentity	1.0
lex category (postags) = Unary(VBP NN JJ NN .)	0.0
question prefix = 'what year' ^ isNumber	-1.0
question prefix = 'who' ^ answer shape = 'Aaaa Aaaaa'	1.0
lex category (postags) = Unary(WDT VB TO NN)	0.0
lex category (postags) = Unary(WDT NN VBP DT NNS VB)	0.0
minimum join key similarity	-1.3173547642587895
question prefix = 'where' ^ answer shape = 'Aaaaa Aaa'	-1.0
template prefix what => when	-1.0
lex type = Binary ^ rightTag = VBN	-1.0
parser lexical rule = fullPatternCop	0.0
question prefix = 'when' ^ answer shape = 'Aaaaa'	-1.0
lex category (postags) = Unary(WP VBP NNS VB IN)	0.0
lex type = Identity ^ leftTag = IN	0.0
question prefix = 'what' ^ answer shape = 'aaa Aaaa Aaaaa aaaa'	-1.0
lex category (postags) = Unary(DT NN IN NN)	0.0
lex category (postags) = Unary(WRB VBP NN NN VBN IN)	-1.0
question prefix = 'what' ^ answer shape = 'A'Aaaa Aaaaa'	1.0
template pair pmi	-2.0
lex category (postags) = Unary(VBP DT NN NN NN .)	0.0
lex type = Binary ^ rightTag = NN	-5.0
question prefix = 'who' ^ answer shape = 'Aaaa AaAaaaa'	1.0
fbid join key violation	0.0
template arg pos tags = NN NN VB	-1.0
parser lexical rule = ofProp	2.0
question prefix = 'what' ^ answer shape = 'aaa Aaaaa'	1.0
template arg pos tags = NN NN VBP	-1.0
question prefix = 'UNK' ^ answer shape = 'AA Aaaaa'	-1.0
parser lexical rule = fullPatternRelType	0.0
lex category (postags) = Identity(WDT)	0.0
question prefix = 'what' ^ answer shape = 'Aaa'	-1.0
question prefix = 'what' ^ answer shape = 'Aaaaa aa Aaaaa'	1.0
answer is linked to freebase	1.0
lex category (postags) = Unary(NN VBP NN VB)	0.0
lex category (postags) = Unary(WRB VB DT JJ NN VB)	0.0
lex type = Arg ^ rightTag = TO	0.0
lex type = Binary ^ leftTag = NNS	0.0
template arg pos tags = VB NN	0.0
template arg pos tags = NN VB NN	-1.0
lex type = Arg ^ leftTag = JJ	-1.0
lex category (postags) = Binary(NNS)	0.0
question prefix = 'what' ^ answer shape = 'aaa aaaa'	-1.0
parser lexical rule = fullPatternWhenOn	1.0
lex category (postags) = Unary(WDT NN VB JJ NN)	0.0
lex category (postags) = Binary(VBN)	-1.0
lex category (postags) = Arg(DT JJ JJ NN)	1.0
template prefix where => what	0.0
question prefix = 'what year' ^ answer shape = 'Aaaaa Aaaa AAAA'	1.0
question prefix = 'what' ^ answer shape = 'aaaa aaaa aaaa aaa aaaa'	1.0
lex type = Identity ^ leftTag = TO	0.0
question prefix = 'who' ^ answer shape = 'aaaa AAA'	1.0
parser lexical rule = auxIdentity	-1.0
lex category (postags) = Unary(WP VB VB NN)	1.0
lex category (postags) = Unary(WP VB JJ NN VB TO)	-1.0
template arg pos tags = VBP NN NN	-1.0
template arg pos tags = DT VBP IN NN	0.0
question prefix = 'what' ^ answer shape = 'a aaaa-aaaa aaaa'	1.0
template prefix UNK => UNK	0.0
question prefix = 'what' ^ answer shape = 'Aaa aaaa'	0.0
lex type = Identity ^ leftTag = <s>	0.0
template arg pos tags = NN NNS	-1.0
lex type = Arg ^ leftTag = <s>	0.0
question prefix = 'where' ^ answer shape = 'Aaaaa'	0.0
parser combinator rule = LeftApply	-3.0
question prefix = 'what' ^ answer shape = 'Aaa aaa'	-1.0
template arg pos tags = VBN JJ NN	0.0
lex category (postags) = Binary(VBP IN)	-2.0
dropPP	-5.0
lex type = Identity ^ rightTag = VBP	2.0
question prefix = 'where' ^ answer shape = 'Aaa Aaaaa Aaaaa'	-1.0
question prefix = 'what' ^ answer shape = 'Aaa Aaaa aa Aaaaa Aaaaa'	1.0
parser combinator rule = UnaryIdentity	1.0
lex type = Arg ^ rightTag = PRP$	1.0
lex category (postags) = Identity(JJS)	1.0
lex type = Arg ^ leftTag = WDT	-3.0
question prefix = 'what' ^ answer shape = '1111 Aaaaa'	-1.0
lex type = Arg ^ rightTag = JJ	0.0
answer from namespace 'probase'	0.0
template arg pos tags = NN NN NN	1.0
template arg pos tags = NN IN JJ	1.0
action type = ProjectAction$	0.0
answer from namespace 'reverb'	0.0
lex type = Unary ^ rightTag = PRP$	-1.0
lex category (postags) = Unary(NN IN NN)	2.0
lex category (postags) = Unary(WP VB JJ NN NN VB IN)	0.0
template arg pos tags = JJ NN	-1.0
action type = DropStopAction$	-4.0
lex type = Identity ^ leftTag = NN	0.0
question prefix = 'what' ^ answer shape = 'aaa aaa aaaa'	-1.0
parser combinator rule = UnaryIntersect	-4.0
lex type = Unary ^ leftTag = VB	0.0
lex category (postags) = Unary(WDT VB JJ JJ NN)	-1.0
lex type = Binary ^ leftTag = WDT	0.0
lex category (postags) = Arg(NNP NNP)	-1.0
question prefix = 'what' ^ answer shape = 'Aaaaa Aaaaa Aaaaa Aaaaa'	1.0
lex category (postags) = Unary(WDT VB DT NN NN IN NN)	0.0
lex type = Identity ^ rightTag = VB	-2.0
lex type = Binary ^ leftTag = JJ	-1.0
lex category (postags) = Unary(WRB JJ NN VBP NN NN VB VB IN)	1.0
lex category (postags) = Unary(WDT NN VB NN NN)	0.0
template arg pos tags = DT NN IN NN	-1.0
question prefix = 'what' ^ answer shape = 'Aaa Aaaa'	1.0
question prefix = 'who' ^ answer shape = '11 aaaa'	-1.0
template prefix what => who	0.0
lex category (postags) = Arg(JJ JJ NN)	1.0
template prefix what => how many	0.0
question prefix = 'what' ^ answer shape = 'Aaaaa Aaaaa Aaaaa'	1.0
question prefix = 'what' ^ answer shape = 'Aaaaa aaaa'	0.0
num lexical rules	-3.0000000000000018
parser lexical rule = fullPatternWhereIn	-2.0
lex type = Binary ^ rightTag = NNS	1.0
lex category (postags) = Binary(NN IN)	0.0
lex category (postags) = Unary(WDT NN VB VB IN NN)	0.0
dropTypeOf	2.0
lex type = Binary ^ leftTag = WP	1.0
lex type = Binary ^ rightTag = IN	1.0
lex category (postags) = Unary(VB NN NN NN .)	1.0
lex type = Identity ^ leftTag = RP	0.0
template arg pos tags = DT NN	0.0
question prefix = 'who' ^ answer shape = 'Aaa aaaa'	-1.0
question prefix = 'who' ^ answer shape = 'Aa. Aaaa'	1.0
lex type = Arg ^ rightTag = RP	1.0
question prefix = 'who' ^ answer shape = 'Aaaaa'	-1.0
template arg pos tags = IN NN	1.0
lex type = Binary ^ leftTag = RBS	0.0
lex category (postags) = Unary(WP VB DT JJ NN)	-1.0
lex category (postags) = Unary(WRB JJ JJ NN VB IN NN)	1.0
lex type = Arg ^ leftTag = IN	2.0
question prefix = 'what' ^ answer shape = '1111'	-1.0
lex type = Arg ^ leftTag = VBN	-1.0
lex type = Identity ^ rightTag = JJ	-2.0
lex type = Binary ^ leftTag = NN	-1.0
lex category (postags) = Unary(WRB VBP NN)	1.0
question prefix = 'UNK' ^ answer shape = 'Aaaaa'	0.0
question prefix = 'where' ^ answer shape = 'AAAA AAAA'	1.0
lex category (postags) = Arg(DT NN)	0.0
question prefix = 'when' ^ answer shape = 'Aaaa'	0.0
lex category (postags) = Identity(CC)	-1.0
lex type = Arg ^ leftTag = NNP	-1.0
lex type = Binary ^ leftTag = DT	-1.0
num conjuncts	-2.0
action type = DropStopAction	1.0
template prefix UNK => be	1.0
lex type = Arg ^ rightTag = DT	-1.0
answer from namespace 'nell'	0.0
lex category (postags) = Arg(DT NNP NN)	1.0
lex category (postags) = Identity(WP)	-1.0
parser lexical rule = ignoreTypesIdentity	1.0
question prefix = 'who' ^ answer shape = 'aaa Aaaaa'	0.0
question prefix = 'where' ^ answer shape = 'aaa Aaaaa Aaa'	1.0
template prefix who => who	-1.0
lex category (postags) = Unary(WP VB JJ NN)	-1.0
lex category (postags) = Unary(WP VBP NN VB)	0.0
lex type = Identity ^ leftTag = DT	-1.0
lex category (postags) = Unary(WP VB DT NN IN NN)	0.0
lex category (postags) = Arg(JJS JJ)	-1.0
lex category (postags) = Binary(VBP DT NN IN)	1.0
answer from namespace 'freebase'	2.0
question prefix = 'what' ^ answer shape = '? Aaaa'	1.0
parser lexical rule = conjIdentity	-1.0
question prefix = 'what' ^ answer shape = 'Aaaaa Aaaaa Aaaaa - Aaaaa Aaaaa'	-1.0
lex type = Binary ^ leftTag = VBZ	1.0
question prefix = 'where' ^ answer shape = 'Aaaaa Aaaa'	-1.0
lex category (postags) = Unary(WP VBP DT JJ NN VBP IN)	0.0
whatDate	0.0
lex category (postags) = Binary(VBP TO)	0.0
question prefix = 'where' ^ answer shape = 'aaa aaaa aaa'	-1.0
lex category (postags) = Binary(VB RP IN)	1.0
lex category (postags) = Unary(WDT JJ NN VB JJ NN)	0.0
parser lexical rule = fullPatternDobj	3.0
question prefix = 'UNK' ^ answer shape = 'aaaa'	-1.0
lex category (postags) = Identity(DT)	-1.0
question prefix = 'when' and isDate	1.0
query relation is light verb	0.0
lex type = Arg ^ rightTag = NN	0.0
question prefix = 'where' ^ isDate	0.0
lex type = Binary ^ leftTag = CD	0.0
template arg pos tags = TO VB	0.0
template prefix what => UNK	5.0
question prefix = 'who' ^ answer shape = 'aaa-aaaa-aaaa'	1.0
lex category (postags) = Unary(WP VB NN NN)	2.0
lex category (postags) = Arg(NN IN NN)	-1.0
lex type = Binary ^ rightTag = VB	-1.0
question prefix = 'what' ^ answer shape = 'aaa Aaaaa Aaaaa'	0.0
template prefix who => where	-1.0
lex type = Arg ^ rightTag = </s>	1.0
parser lexical rule = fullPatternSubj	-1.0
lex type = Binary ^ rightTag = NNP	-1.0
lex category (postags) = Unary(VBP DT NN NN .)	0.0
lex type = Unary ^ leftTag = WDT	2.0
template prefix when => where	-1.0
question prefix = 'what' ^ answer shape = 'Aaaaa'a Aaaaa'	-1.0
action type = ExecutionAction$	0.0
question prefix = 'what year' ^ answer shape = '1111'	-1.0
lex category (postags) = Identity(NN)	1.0
question prefix = 'what' ^ answer shape = 'Aaaaa Aaa aaa Aaa Aaa'	1.0
lex category (postags) = Arg(DT JJ NN)	0.0
lex category (postags) = Unary(WDT NN VB IN NN)	0.0
parser lexical rule = npTitle	-1.0
lex category (postags) = Arg(NN NN NN)	0.0
lex category (postags) = Unary(WP VBP NN VB NN TO)	1.0
parser combinator rule = RightApply	-1.0
lex category (postags) = Arg(DT NN IN NN)	0.0
question prefix = 'what' ^ answer shape = 'aaa A Aaaaa aaaa'	1.0
lex category (postags) = Binary(VBP VBP)	-1.0
lex type = Arg ^ leftTag = VBP	1.0
question prefix = 'what' ^ answer shape = 'aaaa aaaa'	-1.0
question prefix = 'who' ^ answer shape = 'Aaaaa Aaa'	-1.0
template prefix what => where	-1.0
lex category (postags) = Unary(WDT JJ NN VB IN NN)	-1.0
lex type = Unary ^ leftTag = WRB	-1.0
lex type = Binary ^ leftTag = WRB	0.0
template pair count1	-1.7935520708560944
lex type = Identity ^ rightTag = NNS	0.0
parser lexical rule = fullPatternTypeSubj	0.0
parser lexical rule = adjPrepBinary	-1.0
lex category (postags) = Arg(NN JJ NN NN)	1.0
lex type = Identity ^ rightTag = </s>	1.0
parser lexical rule = whIdentity	-1.0
lex category (postags) = Unary(WP VBP NN NN NN VB)	0.0
lex category (postags) = Binary(VB DT JJ NN IN)	0.0
question prefix = 'what' ^ isDate	-3.0
lex type = Binary ^ rightTag = CD	1.0
question prefix = 'what' ^ answer shape = 'Aa aaaa'	1.0
parser lexical rule = fullPatternWhereIs	-1.0
lex type = Binary ^ leftTag = VB	-2.0
question prefix = 'when' ^ answer shape = 'aaa aaaa aaaa aa Aaaa'	-1.0
question prefix = 'what' ^ answer shape = 'Aaaaa A. Aaaa'	-1.0
question prefix = 'where' ^ answer shape = 'Aaaaa Aaaaa'	-1.0
lex type = Identity ^ leftTag = WP	-2.0
lex type = Unary ^ leftTag = <s>	1.0
question prefix = 'when' ^ isDate	2.0
lex type = Identity ^ leftTag = VBP	2.0
question prefix = 'where' ^ answer shape = 'aaa aaaa'	-1.0
lex category (postags) = Arg(DT NN NN)	0.0
template arg pos tags = NN NN NN IN	-1.0
question prefix = 'where' ^ answer shape = 'aaa Aaaaa Aaaa'	1.0
lex category (postags) = Binary(VB)	-1.0
question prefix = 'where' and isDate	-1.0
lex category (postags) = Binary(VBZ)	1.0
lex category (postags) = Binary(VBP NN)	-1.0
lex category (postags) = Unary(WDT NN VBP NN VB)	0.0
question prefix = 'what' ^ answer shape = 'aaaa Aaaaa'	-1.0
parser lexical rule = haveProp	1.0
lex category (postags) = Arg(JJ JJ)	0.0
question prefix = 'who' ^ answer shape = 'aaaa aaaa'	0.0
lex category (postags) = Identity(RBS)	0.0
template prefix what => what	-2.0
lex type = Arg ^ rightTag = CD	0.0
question prefix = 'what' ^ answer shape = 'Aaaaa aaa Aaaaa'	0.0
lex type = Arg ^ leftTag = WRB	0.0
lex type = Arg ^ leftTag = VB	-3.0
question prefix = 'what' ^ answer shape = 'AAA Aaaa Aaaaa Aaaaa'	-1.0
lex category (postags) = Binary(VB PRP$ NN)	1.0
lex type = Binary ^ rightTag = JJ	2.0
lex category (postags) = Unary(WRB JJ NNS VB IN NN)	-1.0
template arg pos tags = VB NN JJ IN	1.0
dropAdverb	0.0
lex category (postags) = Arg(DT NN DT)	-1.0
template arg pos tags = WDT JJ VB VBP	1.0
lex category (postags) = Unary(WP VB VBN NN)	0.0
lex type = Arg ^ leftTag = JJS	1.0
lex category (postags) = Unary(WP VBP JJ NNS VBP IN)	1.0
template prefix where => who	-1.0
lex type = Identity ^ leftTag = CD	1.0
lex category (postags) = Binary(VBN IN)	0.0
lex category (postags) = Unary(WRB VBP DT CD DT NN JJ NN VB)	0.0
action type = ParaphraseRule	-2.0
question prefix = 'who' ^ answer shape = '111 aaaa'	1.0
dropFinalPrep	1.0
lex category (postags) = Unary(WP VB JJ NN VB)	1.0
question prefix = 'who' ^ answer shape = 'aaaa aaaa aaaa'	0.0
lex category (postags) = Unary(WDT NN VBP IN NN)	0.0
question prefix = 'what' ^ answer shape = 'Aaa 11aa Aaaaa Aaaaa Aaaaa Aaaaa'	1.0
question prefix = 'UNK' ^ answer shape = 'Aaaa Aaa Aaaaa'	1.0
template pair count2	-2.611591324210167
lex category (postags) = Unary(WDT NN VBP NN NN VB TO)	0.0
lex category (postags) = Binary(JJ IN)	-1.0
lex type = Unary ^ leftTag = NN	-1.0
lex category (postags) = Binary(VB IN)	0.0
parser lexical rule = reverbBinary	0.0
question prefix = 'what' ^ answer shape = 'a aaaa aaaa'	0.0
question prefix = 'where' ^ answer shape = 'aaa AA.'	1.0
question prefix = 'where' ^ answer shape = 'aaa Aaaa Aaa'	1.0
lex category (postags) = Binary(DT NN IN)	-1.0
lex category (postags) = Unary(WDT VB DT JJ NN IN NN)	0.0
parser lexical rule = fullPatternDefn	-4.0
lex category (postags) = Unary(WDT VB NN NN NN)	-1.0
lex category (postags) = Binary(VB NN)	0.0
question prefix = 'what' ^ answer shape = 'aaaa'	-3.0
parser lexical rule = adjArg	-2.0
question prefix = 'what' ^ answer shape = 'Aaaaa Aaaaa'	2.0
lex category (postags) = Identity(VB)	-4.0
question prefix = 'what' ^ answer shape = 'Aaaaa Aaaa'	0.0
parser lexical rule = beInstanceOf	0.0
lex type = Arg ^ rightTag = VB	-1.0
lex type = Identity ^ rightTag = NN	0.0
template arg pos tags = NN NN	0.0
lex type = Arg ^ rightTag = VBP	-1.0
uses full parser pattern	0.0
question prefix = 'what' ^ answer shape = 'Aa. Aaaaa Aaaaa'	-1.0
question prefix = 'when' ^ answer shape = 'Aaaaa 11 , 1111'	1.0
lex category (postags) = Unary(WDT NN VBP NN NN VB IN)	1.0
template arg pos tags = NN VB VB	-1.0
parser lexical rule = fullPatternProperty	2.0
lex category (postags) = Identity(WRB JJ)	1.0
question prefix = 'what' ^ answer shape = 'Aaa Aaaaa aa Aaaaa'	1.0
question prefix = 'where' ^ answer shape = 'aaa aaaa 11 aaaa'	-1.0
question prefix = 'who' ^ answer shape = 'aaa aaaa'	-1.0
question prefix = 'what' ^ isNumber	-2.0
lex category (postags) = Binary(VB DT NN IN)	1.0
lex type = Identity ^ rightTag = NNP	0.0
question prefix = 'who' ^ isDate	0.0
lex type = Arg ^ leftTag = NNS	0.0
template pair count12	0.08122727274894714
question prefix = 'who' ^ answer shape = 'Aaaaa Aaaaa'	2.0
lex type = Identity ^ rightTag = VBN	-1.0
lex category (postags) = Unary(WDT VB DT NN IN NN)	0.0
lex category (postags) = Unary(WRB VB JJ NN)	-1.0
lex category (postags) = Unary(DT NN IN NN NN)	-1.0
template prefix UNK => who	0.0
lex type = Identity ^ leftTag = VB	0.0
lex category (postags) = Binary(VB VBP NN)	-1.0
template arg pos tags = RB	0.0
lex type = Binary ^ rightTag = </s>	-2.0
lex category (postags) = Binary(VB VB)	0.0
lex category (postags) = Unary(VB DT NN NN .)	-1.0
parser lexical rule = npOfArg	-1.0
lex category (postags) = Unary(WRB JJ NN VBP NN NN VB)	-1.0
template arg pos tags = VB JJ NNP	0.0
lex type = Identity ^ leftTag = WDT	1.0
question prefix = 'what' ^ answer shape = 'a Aaaaa Aaaa aa-aa'	1.0
question prefix = 'what year' ^ isDate	-1.0
question prefix = 'what' ^ answer shape = 'Aaa Aaaaa'	0.0
parser lexical rule = reverbBinaryNoPrep	-2.0
template arg pos tags = NN JJ VB	-1.0
question prefix = 'UNK' ^ isNumber	0.0
lex type = Unary ^ rightTag = VBN	1.0
lex category (postags) = Unary(VB NN NNS NN NN .)	1.0
lex category (postags) = Unary(VB JJ NN NN .)	-1.0
lex type = Binary ^ leftTag = <s>	-1.0
lex category (postags) = Unary(VB NN NN .)	-1.0
template arg pos tags = VBP DT NN	1.0
lex type = Identity ^ rightTag = IN	0.0
question prefix = 'UNK' ^ isDate	0.0
question prefix = 'what' ^ answer shape = 'Aaaa'	0.0
lex type = Arg ^ rightTag = NNS	-1.0
lex type = Identity ^ rightTag = JJS	0.0
lex category (postags) = Arg(NN NN)	-2.0
parser lexical rule = fullPatternCopRel	0.0
question prefix = 'who' ^ answer shape = 'aaa Aaaa'	-1.0
question prefix = 'where' ^ answer shape = 'Aa'	1.0
steps	-5.25
question prefix = 'when' ^ answer shape = '1111'	1.0
lex category (postags) = Unary(WDT VB DT NN IN NN NN)	0.0
action type = AbstractArgAction	-3.0
lex category (postags) = Unary(WRB VB DT NN NNS VB)	0.0
lex type = Arg ^ rightTag = IN	-3.0
lex category (postags) = Unary(WP VBP NNP)	0.0
question prefix = 'who' ^ answer shape = 'a aaaa'	-1.0
answer from namespace 'openie4'	0.0
lex type = Binary ^ leftTag = VBP	0.0
lex category (postags) = Binary(VB RB VB)	1.0
lex category (postags) = Unary(WRB VB NN)	1.0
lex category (postags) = Arg(NNP)	0.0
question prefix = 'who' ^ isNumber	-1.0
template arg pos tags = JJ NN VB	-1.0
question prefix = 'where' ^ answer shape = 'aaaa aaaa'	0.0
lex category (postags) = Arg(NN NNS)	0.0
parser lexical rule = relMarkerIdentity	-1.0
parser lexical rule = fullPatternTypeDobj	2.0
parser lexical rule = nounPrepBinary	-1.0
lex category (postags) = Unary(WP VBP NN NN VB)	1.0
question prefix = 'where' ^ answer shape = 'Aaa Aaaaa Aaaaa Aaa'	1.0
lex type = Unary ^ rightTag = </s>	4.0
lex category (postags) = Unary(WDT NN VBP DT JJ NN VBP JJ NN IN)	0.0
question prefix = 'where' ^ answer shape = 'aaaa'	-2.0
query similarity with question	1.1870324120324118
lex type = Arg ^ leftTag = NN	0.0
lex category (postags) = Unary(WDT VB DT NN)	-1.0
question prefix = 'when' ^ isNumber	2.0
question prefix = 'UNK' ^ answer shape = 'Aaaaa aaa Aaaaa'	1.0
lex category (postags) = Arg(JJ NN)	1.0
lex category (postags) = Unary(NN VBP NN JJ VB)	1.0
question prefix = 'who' ^ answer shape = 'aaa Aaa Aaaa Aaaa'	1.0
lex type = Identity ^ leftTag = JJ	1.0
lex type = Unary ^ leftTag = CD	0.0
question prefix = 'who' ^ answer shape = 'aaa'	-1.0
template prefix who => when	-1.0
template arg pos tags = JJ	0.0
lex category (postags) = Unary(WRB JJ JJ NN VBP IN NN)	-1.0
lex category (postags) = Identity(WRB)	-1.0
lex type = Identity ^ leftTag = WRB	0.0
lex category (postags) = Unary(WDT NN DT VBP IN NN)	1.0
template prefix when => how many	1.0
question prefix = 'what year' and isDate	1.0
question prefix = 'what' ^ answer shape = 'AAA'	0.0
action type = TemplatePair	-3.0
lex category (postags) = Unary(WP VBP NN)	-1.0
template prefix where => when	-1.0
lex category (postags) = Unary(NN IN NN NN)	1.0
question prefix = 'what' ^ answer shape = 'A1'	1.0
lex category (postags) = Unary(WRB VBP DT NNP)	-1.0
lex category (postags) = Unary(WDT VB DT JJ NN)	-2.0
question prefix = 'who' ^ answer shape = 'aaaa'	-1.0
lex category (postags) = Identity(CD)	1.0
question prefix = 'where' ^ isNumber	-1.0
lex category (postags) = Arg(NN JJ)	0.0
question prefix = 'what' ^ answer shape = 'Aaaaa'	-1.0
lex category (postags) = Unary(WP VBP JJ NNS VB)	0.0
lex type = Unary ^ rightTag = VB	-1.0
lex type = Identity ^ rightTag = DT	2.0
question prefix = 'who' ^ answer shape = 'Aaaa AaaAaaaa'	1.0
lex category (postags) = Identity(NNS)	0.0
parser lexical rule = fullPatternWhenIn	-1.0
template arg pos tags = NN	1.0
question prefix = 'what' ^ answer shape = '1 aaaa aaaa'	-1.0
question prefix = 'what' ^ answer shape = 'Aaaa Aaaaa'	2.0
template is typed	0.0
lex category (postags) = Arg(NN)	-2.0
lex category (postags) = Binary(JJ NN IN)	0.0
lex category (postags) = Unary(WDT VB DT NN IN NNP)	1.0
lex type = Identity ^ leftTag = NNP	0.0
template prefix where => why	-1.0
lex category (postags) = Binary(VBP)	0.0
question prefix = 'who' ^ answer shape = 'Aaaaa Aaa-aa Aaa'	1.0
lex category (postags) = Unary(WDT NN VBP NN JJ VB)	0.0
lex category (postags) = Identity(VBP)	3.0
lex category (postags) = Unary(WRB JJ NN VBP NN NN VBP RP)	0.0
template prefix where => where	0.0
lex category (postags) = Unary(WRB JJ NN VBP NN NN VB IN)	1.0
lex type = Identity ^ leftTag = CC	-1.0
question prefix = 'where' ^ answer shape = 'Aaaaa aaaa aaaa'	1.0
lex category (postags) = Identity(.)	1.0
lex category (postags) = Unary(WDT NN VB NN VB IN)	1.0
lex category (postags) = Unary(WDT NN VB VBP NN)	1.0
template prefix who => UNK	-1.0
lex category (postags) = Unary(WRB VB NN VB NN IN)	-1.0
